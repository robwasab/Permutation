<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - dict manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> dict</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="dict.htm#M2" name="L286">NAME</a> 

<dl>
<dd>dict - Manipulate dictionaries</dd>
</dl>
</dd>

<dd><a href="dict.htm#M3" name="L287">SYNOPSIS</a> 

<dl>
<dd><b>dict</b> <i>option arg</i> ?<i>arg ...</i>?</dd>
</dl>
</dd>

<dd><a href="dict.htm#M4" name="L288">DESCRIPTION</a> 

<dl class="description">
<dd><a href="dict.htm#M5" name="L289"><b>dict append</b>
<i>dictionaryVariable key</i> ?<i>string ...</i>?</a></dd>

<dd><a href="dict.htm#M6" name="L290"><b>dict create</b> ?<i>key
value ...</i>?</a></dd>

<dd><a href="dict.htm#M7" name="L291"><b>dict exists</b>
<i>dictionaryValue key</i> ?<i>key ...</i>?</a></dd>

<dd><a href="dict.htm#M8" name="L292"><b>dict filter</b>
<i>dictionaryValue filterType arg</i> ?<i>arg ...</i>?</a> 

<dl class="description">
<dd><a href="dict.htm#M9" name="L293"><b>dict filter</b>
<i>dictionaryValue</i> <b>key</b> <i>globPattern</i></a></dd>

<dd><a href="dict.htm#M10" name="L294"><b>dict filter</b>
<i>dictionaryValue</i> <b>script {</b><i>keyVar
valueVar</i><b>}</b> <i>script</i></a></dd>

<dd><a href="dict.htm#M11" name="L295"><b>dict filter</b>
<i>dictionaryValue</i> <b>value</b> <i>globPattern</i></a></dd>
</dl>
</dd>

<dd><a href="dict.htm#M12" name="L296"><b>dict for {</b><i>keyVar
valueVar</i><b>}</b> <i>dictionaryValue body</i></a></dd>

<dd><a href="dict.htm#M13" name="L297"><b>dict get</b>
<i>dictionaryValue</i> ?<i>key ...</i>?</a></dd>

<dd><a href="dict.htm#M14" name="L298"><b>dict incr</b>
<i>dictionaryVariable key</i> ?<i>increment</i>?</a></dd>

<dd><a href="dict.htm#M15" name="L299"><b>dict info</b>
<i>dictionaryValue</i></a></dd>

<dd><a href="dict.htm#M16" name="L300"><b>dict keys</b>
<i>dictionaryValue</i> ?<i>globPattern</i>?</a></dd>

<dd><a href="dict.htm#M17" name="L301"><b>dict lappend</b>
<i>dictionaryVariable key</i> ?<i>value ...</i>?</a></dd>

<dd><a href="dict.htm#M18" name="L302"><b>dict merge</b>
?<i>dictionaryValue ...</i>?</a></dd>

<dd><a href="dict.htm#M19" name="L303"><b>dict remove</b>
<i>dictionaryValue</i> ?<i>key ...</i>?</a></dd>

<dd><a href="dict.htm#M20" name="L304"><b>dict replace</b>
<i>dictionaryValue</i> ?<i>key value ...</i>?</a></dd>

<dd><a href="dict.htm#M21" name="L305"><b>dict set</b>
<i>dictionaryVariable key</i> ?<i>key ...</i>?
<i>value</i></a></dd>

<dd><a href="dict.htm#M22" name="L306"><b>dict size</b>
<i>dictionaryValue</i></a></dd>

<dd><a href="dict.htm#M23" name="L307"><b>dict unset</b>
<i>dictionaryVariable key</i> ?<i>key ...</i>?</a></dd>

<dd><a href="dict.htm#M24" name="L308"><b>dict update</b>
<i>dictionaryVariable key varName</i> ?<i>key varName ...</i>?
<i>body</i></a></dd>

<dd><a href="dict.htm#M25" name="L309"><b>dict values</b>
<i>dictionaryValue</i> ?<i>globPattern</i>?</a></dd>

<dd><a href="dict.htm#M26" name="L310"><b>dict with</b>
<i>dictionaryVariable</i> ?<i>key ...</i>? <i>body</i></a></dd>
</dl>
</dd>

<dd><a href="dict.htm#M27" name="L311">DICTIONARY VALUES</a></dd>

<dd><a href="dict.htm#M28" name="L312">EXAMPLES</a></dd>

<dd><a href="dict.htm#M29" name="L313">SEE ALSO</a></dd>

<dd><a href="dict.htm#M30" name="L314">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

dict - Manipulate dictionaries 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>dict</b> <i>option arg</i> ?<i>arg ...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

Performs one of several operations on dictionary values or
variables containing dictionary values (see the <b>DICTIONARY
VALUES</b> section below for a description), depending on
<i>option</i>. The legal <i>option</i>s (which may be abbreviated)
are: 

<dl class="description">
<dt><a name="M5"><b>dict append</b> <i>dictionaryVariable key</i>
?<i>string ...</i>?</a></dt>

<dd>This appends the given string (or strings) to the value that
the given key maps to in the dictionary value contained in the
given variable, writing the resulting dictionary value back to that
variable. Non-existent keys are treated as if they map to an empty
string.</dd>

<dt><a name="M6"><b>dict create</b> ?<i>key value ...</i>?</a></dt>

<dd>Create a new dictionary that contains each of the key/value
mappings listed as arguments (keys and values alternating, with
each key being followed by its associated value.)</dd>

<dt><a name="M7"><b>dict exists</b> <i>dictionaryValue key</i>
?<i>key ...</i>?</a></dt>

<dd>This returns a boolean value indicating whether the given key
(or path of keys through a set of nested dictionaries) exists in
the given dictionary value. This returns a true value exactly when
<b>dict get</b> on that path will succeed.</dd>

<dt><a name="M8"><b>dict filter</b> <i>dictionaryValue filterType
arg</i> ?<i>arg ...</i>?</a></dt>

<dd>This takes a dictionary value and returns a new dictionary that
contains just those key/value pairs that match the specified filter
type (which may be abbreviated.) Supported filter types are: 

<dl class="description">
<dt><a name="M9"><b>dict filter</b> <i>dictionaryValue</i>
<b>key</b> <i>globPattern</i></a></dt>

<dd>The key rule only matches those key/value pairs whose keys
match the given pattern (in the style of <b><a href=
"../TclCmd/string.htm">string match</a></b>.)</dd>

<dt><a name="M10"><b>dict filter</b> <i>dictionaryValue</i>
<b>script {</b><i>keyVar valueVar</i><b>}</b>
<i>script</i></a></dt>

<dd>The script rule tests for matching by assigning the key to the
<i>keyVar</i> and the value to the <i>valueVar</i>, and then
evaluating the given script which should return a boolean value
(with the key/value pair only being included in the result of the
<b>dict filter</b> when a true value is returned.) Note that the
first argument after the rule selection word is a two-element list.
If the <i>script</i> returns with a condition of <b>TCL_BREAK</b>,
no further key/value pairs are considered for inclusion in the
resulting dictionary, and a condition of <b>TCL_CONTINUE</b> is
equivalent to a false result. The key/value pairs are tested in the
order in which the keys were inserted into the dictionary.</dd>

<dt><a name="M11"><b>dict filter</b> <i>dictionaryValue</i>
<b>value</b> <i>globPattern</i></a></dt>

<dd>The value rule only matches those key/value pairs whose values
match the given pattern (in the style of <b><a href=
"../TclCmd/string.htm">string match</a></b>.)</dd>
</dl>
</dd>

<dt><a name="M12"><b>dict for {</b><i>keyVar valueVar</i><b>}</b>
<i>dictionaryValue body</i></a></dt>

<dd>This command takes three arguments, the first a two-element
list of variable names (for the key and value respectively of each
mapping in the dictionary), the second the dictionary value to
iterate across, and the third a script to be evaluated for each
mapping with the key and value variables set appropriately (in the
manner of <b><a href="../TclCmd/foreach.htm">foreach</a></b>.) The
result of the command is an empty string. If any evaluation of the
body generates a <b>TCL_BREAK</b> result, no further pairs from the
dictionary will be iterated over and the <b>dict for</b> command
will terminate successfully immediately. If any evaluation of the
body generates a <b>TCL_CONTINUE</b> result, this shall be treated
exactly like a normal <b>TCL_OK</b> result. The order of iteration
is the order in which the keys were inserted into the
dictionary.</dd>

<dt><a name="M13"><b>dict get</b> <i>dictionaryValue</i> ?<i>key
...</i>?</a></dt>

<dd>Given a dictionary value (first argument) and a key (second
argument), this will retrieve the value for that key. Where several
keys are supplied, the behaviour of the command shall be as if the
result of <b>dict get $dictVal $key</b> was passed as the first
argument to <b>dict get</b> with the remaining arguments as second
(and possibly subsequent) arguments. This facilitates lookups in
nested dictionaries. For example, the following two commands are
equivalent: 

<pre>
dict get $dict foo bar spong
dict get [dict get [dict get $dict foo] bar] spong
</pre>

<p>If no keys are provided, <b>dict get</b> will return a list
containing pairs of elements in a manner similar to <b><a href=
"../TclCmd/array.htm">array get</a></b>. That is, the first element
of each pair would be the key and the second element would be the
value for that key.</p>

<p>It is an error to attempt to retrieve a value for a key that is
not present in the dictionary.</p>
</dd>

<dt><a name="M14"><b>dict incr</b> <i>dictionaryVariable key</i>
?<i>increment</i>?</a></dt>

<dd>This adds the given increment value (an integer that defaults
to 1 if not specified) to the value that the given key maps to in
the dictionary value contained in the given variable, writing the
resulting dictionary value back to that variable. Non-existent keys
are treated as if they map to 0. It is an error to increment a
value for an existing key if that value is not an integer.</dd>

<dt><a name="M15"><b>dict info</b> <i>dictionaryValue</i></a></dt>

<dd>This returns information (intended for display to people) about
the given dictionary though the format of this data is dependent on
the implementation of the dictionary. For dictionaries that are
implemented by hash tables, it is expected that this will return
the string produced by <b><a href=
"../TclLib/Hash.htm">Tcl_HashStats</a></b>, similar to <b><a href=
"../TclCmd/array.htm">array statistics</a></b>.</dd>

<dt><a name="M16"><b>dict keys</b> <i>dictionaryValue</i>
?<i>globPattern</i>?</a></dt>

<dd>Return a list of all keys in the given dictionary value. If a
pattern is supplied, only those keys that match it (according to
the rules of <b><a href="../TclCmd/string.htm">string
match</a></b>) will be returned. The returned keys will be in the
order that they were inserted into the dictionary.</dd>

<dt><a name="M17"><b>dict lappend</b> <i>dictionaryVariable key</i>
?<i>value ...</i>?</a></dt>

<dd>This appends the given items to the list value that the given
key maps to in the dictionary value contained in the given
variable, writing the resulting dictionary value back to that
variable. Non-existent keys are treated as if they map to an empty
list, and it is legal for there to be no items to append to the
list. It is an error for the value that the key maps to to not be
representable as a list.</dd>

<dt><a name="M18"><b>dict merge</b> ?<i>dictionaryValue
...</i>?</a></dt>

<dd>Return a dictionary that contains the contents of each of the
<i>dictionaryValue</i> arguments. Where two (or more) dictionaries
contain a mapping for the same key, the resulting dictionary maps
that key to the value according to the last dictionary on the
command line containing a mapping for that key.</dd>

<dt><a name="M19"><b>dict remove</b> <i>dictionaryValue</i> ?<i>key
...</i>?</a></dt>

<dd>Return a new dictionary that is a copy of an old one passed in
as first argument except without mappings for each of the keys
listed. It is legal for there to be no keys to remove, and it also
legal for any of the keys to be removed to not be present in the
input dictionary in the first place.</dd>

<dt><a name="M20"><b>dict replace</b> <i>dictionaryValue</i>
?<i>key value ...</i>?</a></dt>

<dd>Return a new dictionary that is a copy of an old one passed in
as first argument except with some values different or some extra
key/value pairs added. It is legal for this command to be called
with no key/value pairs, but illegal for this command to be called
with a key but no value.</dd>

<dt><a name="M21"><b>dict set</b> <i>dictionaryVariable key</i>
?<i>key ...</i>? <i>value</i></a></dt>

<dd>This operation takes the name of a variable containing a
dictionary value and places an updated dictionary value in that
variable containing a mapping from the given key to the given
value. When multiple keys are present, this operation creates or
updates a chain of nested dictionaries.</dd>

<dt><a name="M22"><b>dict size</b> <i>dictionaryValue</i></a></dt>

<dd>Return the number of key/value mappings in the given dictionary
value.</dd>

<dt><a name="M23"><b>dict unset</b> <i>dictionaryVariable key</i>
?<i>key ...</i>?</a></dt>

<dd>This operation (the companion to <b>dict set</b>) takes the
name of a variable containing a dictionary value and places an
updated dictionary value in that variable that does not contain a
mapping for the given key. Where multiple keys are present, this
describes a path through nested dictionaries to the mapping to
remove. At least one key must be specified, but the last key on the
key-path need not exist. All other components on the path must
exist.</dd>

<dt><a name="M24"><b>dict update</b> <i>dictionaryVariable key
varName</i> ?<i>key varName ...</i>? <i>body</i></a></dt>

<dd>Execute the Tcl script in <i>body</i> with the value for each
<i>key</i> (as found by reading the dictionary value in
<i>dictionaryVariable</i>) mapped to the variable <i>varName</i>.
There may be multiple <i>key</i>/<i>varName</i> pairs. If a
<i>key</i> does not have a mapping, that corresponds to an unset
<i>varName</i>. When <i>body</i> terminates, any changes made to
the <i>varName</i>s is reflected back to the dictionary within
<i>dictionaryVariable</i> (unless <i>dictionaryVariable</i> itself
becomes unreadable, when all updates are silently discarded), even
if the result of <i>body</i> is an error or some other kind of
exceptional exit. The result of <b>dict update</b> is (unless some
kind of error occurs) the result of the evaluation of <i>body</i>. 

<p>Each <i>varName</i> is mapped in the scope enclosing the <b>dict
update</b>; it is recommended that this command only be used in a
local scope (<b><a href="../TclCmd/proc.htm">proc</a></b>edure or
lambda term for <b><a href="../TclCmd/apply.htm">apply</a></b>).
Because of this, the variables set by <b>dict update</b> will
continue to exist after the command finishes (unless explicitly
<b><a href="../TclCmd/unset.htm">unset</a></b>). Note that the
mapping of values to variables does not use traces; changes to the
<i>dictionaryVariable</i>'s contents only happen when <i>body</i>
terminates.</p>
</dd>

<dt><a name="M25"><b>dict values</b> <i>dictionaryValue</i>
?<i>globPattern</i>?</a></dt>

<dd>Return a list of all values in the given dictionary value. If a
pattern is supplied, only those values that match it (according to
the rules of <b><a href="../TclCmd/string.htm">string
match</a></b>) will be returned. The returned values will be in the
order of that the keys associated with those values were inserted
into the dictionary.</dd>

<dt><a name="M26"><b>dict with</b> <i>dictionaryVariable</i>
?<i>key ...</i>? <i>body</i></a></dt>

<dd>Execute the Tcl script in <i>body</i> with the value for each
key in <i>dictionaryVariable</i> mapped (in a manner similarly to
<b>dict update</b>) to a variable with the same name. Where one or
more <i>key</i>s are available, these indicate a chain of nested
dictionaries, with the innermost dictionary being the one opened
out for the execution of <i>body</i>. As with <b>dict update</b>,
making <i>dictionaryVariable</i> unreadable will make the updates
to the dictionary be discarded, and this also happens if the
contents of <i>dictionaryVariable</i> are adjusted so that the
chain of dictionaries no longer exists. The result of <b>dict
with</b> is (unless some kind of error occurs) the result of the
evaluation of <i>body</i>. 

<p>The variables are mapped in the scope enclosing the <b>dict
with</b>; it is recommended that this command only be used in a
local scope (<b><a href="../TclCmd/proc.htm">proc</a></b>edure or
lambda term for <b><a href="../TclCmd/apply.htm">apply</a></b>).
Because of this, the variables set by <b>dict with</b> will
continue to exist after the command finishes (unless explicitly
<b><a href="../TclCmd/unset.htm">unset</a></b>). Note that the
mapping of values to variables does not use traces; changes to the
<i>dictionaryVariable</i>'s contents only happen when <i>body</i>
terminates.</p>

<p>If the <i>dictionaryVariable</i> contains a value that is not a
dictionary at the point when the <i>body</i> terminates (which can
easily happen if the name is the same as any of the keys in
dictionary) then an error occurs at that point. This command is
thus not recommended for use when the keys in the dictionary are
expected to clash with the <i>dictionaryVariable</i> name itself.
Where the contained key does map to a dictionary, the net effect is
to combine that inner dictionary into the outer dictionary; see the
<b>EXAMPLES</b> below for an illustration of this.</p>
</dd>
</dl>

<h3><a name="M27">DICTIONARY VALUES</a></h3>

Dictionaries are values that contain an efficient, order-preserving
mapping from arbitrary keys to arbitrary values. Each key in the
dictionary maps to a single value. They have a textual format that
is exactly that of any list with an even number of elements, with
each mapping in the dictionary being represented as two items in
the list. When a command takes a dictionary and produces a new
dictionary based on it (either returning it or writing it back into
the variable that the starting dictionary was read from) the new
dictionary will have the same order of keys, modulo any deleted
keys and with new keys added on to the end. When a string is
interpreted as a dictionary and it would otherwise have duplicate
keys, only the last value for a particular key is used; the others
are ignored, meaning that, &ldquo;apple banana&rdquo; and
&ldquo;apple carrot apple banana&rdquo; are equivalent dictionaries
(with different string representations). 

<p>Operations that derive a new dictionary from an old one (e.g.,
updates like <b>dict set</b> and <b>dict unset</b>) preserve the
order of keys in the dictionary. The exceptions to this are for any
new keys they add, which are appended to the sequence, and any keys
that are removed, which are excised from the order.</p>

<h3><a name="M28">EXAMPLES</a></h3>

Basic dictionary usage: 

<pre>
# Make a dictionary to map extensions to descriptions
set filetypes [<b>dict create</b> .txt "Text File" .tcl "Tcl File"]

# Add/update the dictionary
<b>dict set</b> filetypes .tcl "Tcl Script"
<b>dict set</b> filetypes .tm  "Tcl Module"
<b>dict set</b> filetypes .gif "GIF Image"
<b>dict set</b> filetypes .png "PNG Image"

# Simple read from the dictionary
set ext ".tcl"
set desc [<b>dict get</b> $filetypes $ext]
puts "$ext is for a $desc"

# Somewhat more complex, with existence test
foreach filename [glob *] {
    set ext [file extension $filename]
    if {[<b>dict exists</b> $filetypes $ext]} {
        puts "$filename is a [<b>dict get</b> $filetypes $ext]"
    }
}
</pre>

<p>Constructing and using nested dictionaries:</p>

<pre>
# Data for one employee
<b>dict set</b> employeeInfo 12345-A forenames "Joe"
<b>dict set</b> employeeInfo 12345-A surname   "Schmoe"
<b>dict set</b> employeeInfo 12345-A street "147 Short Street"
<b>dict set</b> employeeInfo 12345-A city   "Springfield"
<b>dict set</b> employeeInfo 12345-A phone  "555-1234"
# Data for another employee
<b>dict set</b> employeeInfo 98372-J forenames "Anne"
<b>dict set</b> employeeInfo 98372-J surname   "Other"
<b>dict set</b> employeeInfo 98372-J street "32995 Oakdale Way"
<b>dict set</b> employeeInfo 98372-J city   "Springfield"
<b>dict set</b> employeeInfo 98372-J phone  "555-8765"
# The above data probably ought to come from a database...

# Print out some employee info
set i 0
puts "There are [<b>dict size</b> $employeeInfo] employees"
<b>dict for</b> {id info} $employeeInfo {
   puts "Employee #[incr i]: $id"
   <b>dict with</b> info {
      puts "   Name: $forenames $surname"
      puts "   Address: $street, $city"
      puts "   Telephone: $phone"
   }
}
# Another way to iterate and pick out names...
foreach id [<b>dict keys</b> $employeeInfo] {
   puts "Hello, [<b>dict get</b> $employeeInfo $id forenames]!"
}
</pre>

<p>A localizable version of <b><a href=
"../TclCmd/string.htm">string toupper</a></b>:</p>

<pre>
# Set up the basic C locale
set capital [<b>dict create</b> C [<b>dict create</b>]]
foreach c [split {abcdefghijklmnopqrstuvwxyz} ""] {
   <b>dict set</b> capital C $c [string toupper $c]
}

# English locales can luckily share the "C" locale
<b>dict set</b> capital en [<b>dict get</b> $capital C]
<b>dict set</b> capital en_US [<b>dict get</b> $capital C]
<b>dict set</b> capital en_GB [<b>dict get</b> $capital C]

# ... and so on for other supported languages ...

# Now get the mapping for the current locale and use it.
set upperCaseMap [<b>dict get</b> $capital $env(LANG)]
set upperCase [string map $upperCaseMap $string]
</pre>

<p>Showing the detail of <b>dict with</b>:</p>

<pre>
proc sumDictionary {varName} {
   upvar 1 $varName vbl
   foreach key [<b>dict keys</b> $vbl] {
      # Manufacture an entry in the subdictionary
      <b>dict set</b> vbl $key total 0
      # Add the values and remove the old
      <b>dict with</b> vbl $key {
         set total [expr {$x + $y + $z}]
         unset x y z
      }
   }
   puts "last total was $total, for key $key"
}

set myDict {
   a {x 1 y 2 z 3}
   b {x 6 y 5 z 4}
}

sumDictionary myDict
#    prints: <i>last total was 15, for key b</i>

puts "dictionary is now \"$myDict\""
#    prints: <i>dictionary is now "a {total 6} b {total 15}"</i>
</pre>

<p>When <b>dict with</b> is used with a key that clashes with the
name of the dictionary variable:</p>

<pre>
set foo {foo {a b} bar 2 baz 3}
<b>dict with</b> foo {}
puts $foo
#    prints: <i>a b foo {a b} bar 2 baz 3</i>
</pre>

<h3><a name="M29">SEE ALSO</a></h3>

<b><a href="../TclCmd/append.htm">append</a></b>, <b><a href=
"../TclCmd/array.htm">array</a></b>, <b><a href=
"../TclCmd/foreach.htm">foreach</a></b>, <b><a href=
"../TclCmd/incr.htm">incr</a></b>, <b><a href=
"../TclCmd/list.htm">list</a></b>, <b><a href=
"../TclCmd/lappend.htm">lappend</a></b>, <b><a href=
"../TclCmd/set.htm">set</a></b> 

<h3><a name="M30">KEYWORDS</a></h3>

<a href="../Keywords/D.htm#dictionary">dictionary</a>, <a href=
"../Keywords/C.htm#create">create</a>, <a href=
"../Keywords/U.htm#update">update</a>, <a href=
"../Keywords/L.htm#lookup">lookup</a>, <a href=
"../Keywords/I.htm#iterate">iterate</a>, <a href=
"../Keywords/F.htm#filter">filter</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2003 Donal K. Fellows</div>
</body>
</html>

