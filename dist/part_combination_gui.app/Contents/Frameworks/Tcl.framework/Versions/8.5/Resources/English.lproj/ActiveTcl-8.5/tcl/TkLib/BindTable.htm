<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_CreateBindingTable manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> BindTable</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tk_CreateBindingTable, Tk_DeleteBindingTable, Tk_CreateBinding,
Tk_DeleteBinding, Tk_GetBinding, Tk_GetAllBindings,
Tk_DeleteAllBindings, Tk_BindEvent - invoke scripts in response to
X events 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
Tk_BindingTable<br>
<b>Tk_CreateBindingTable(</b><i>interp</i><b>)</b><br>
<b>Tk_DeleteBindingTable(</b><i>bindingTable</i><b>)</b><br>
unsigned long<br>
<b>Tk_CreateBinding(</b><i>interp, bindingTable, object,
eventString, script, append</i><b>)</b><br>
int<br>
<b>Tk_DeleteBinding(</b><i>interp, bindingTable, object,
eventString</i><b>)</b><br>
const char *<br>
<b>Tk_GetBinding(</b><i>interp, bindingTable, object,
eventString</i><b>)</b><br>
<b>Tk_GetAllBindings(</b><i>interp, bindingTable,
object</i><b>)</b><br>
<b>Tk_DeleteAllBindings(</b><i>bindingTable, object</i><b>)</b><br>
<b>Tk_BindEvent(</b><i>bindingTable, eventPtr, tkwin, numObjects,
objectPtr</i><b>)</b><br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter to use when invoking bindings in binding table.
Also used for returning results and errors from binding
procedures.</dd>

<dt>Tk_BindingTable <b>bindingTable</b> (in)</dt>

<dd>Token for binding table; must have been returned by some
previous call to <b>Tk_CreateBindingTable</b>.</dd>

<dt>ClientData <b>object</b> (in)</dt>

<dd>Identifies object with which binding is associated.</dd>

<dt>const char <b>*eventString</b> (in)</dt>

<dd>String describing event sequence.</dd>

<dt>char <b>*script</b> (in)</dt>

<dd>Tcl script to invoke when binding triggers.</dd>

<dt>int <b><a href="../TclCmd/append.htm">append</a></b> (in)</dt>

<dd>Non-zero means append <i>script</i> to existing script for
binding, if any; zero means replace existing script with new
one.</dd>

<dt>XEvent <b>*eventPtr</b> (in)</dt>

<dd>X event to match against bindings in <i>bindingTable</i>.</dd>

<dt>Tk_Window <b>tkwin</b> (in)</dt>

<dd>Identifier for any window on the display where the event
occurred. Used to find display-related information such as key
maps.</dd>

<dt>int <b>numObjects</b> (in)</dt>

<dd>Number of object identifiers pointed to by
<i>objectPtr</i>.</dd>

<dt>ClientData <b>*objectPtr</b> (in)</dt>

<dd>Points to an array of object identifiers: bindings will be
considered for each of these objects in order from first to
last.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These procedures provide a general-purpose mechanism for creating
and invoking bindings. Bindings are organized in terms of
<i>binding tables</i>. A binding table consists of a collection of
bindings plus a history of recent events. Within a binding table,
bindings are associated with <i>objects</i>. The meaning of an
object is defined by clients of the binding package. For example,
Tk keeps uses one binding table to hold all of the bindings created
by the <b><a href="../TkCmd/bind.htm">bind</a></b> command. For
this table, objects are pointers to strings such as window names,
class names, or other binding tags such as <b>all</b>. Tk also
keeps a separate binding table for each canvas widget, which
manages bindings created by the canvas's <b><a href=
"../TkCmd/bind.htm">bind</a></b> widget command; within this table,
an object is either a pointer to the internal structure for a
canvas item or a <a href="../TkLib/GetUid.htm">Tk_Uid</a>
identifying a tag. 

<p>The procedure <b>Tk_CreateBindingTable</b> creates a new binding
table and associates <i>interp</i> with it (when bindings in the
table are invoked, the scripts will be evaluated in <i>interp</i>).
<b>Tk_CreateBindingTable</b> returns a token for the table, which
must be used in calls to other procedures such as
<b>Tk_CreateBinding</b> or <b>Tk_BindEvent</b>.</p>

<p><b>Tk_DeleteBindingTable</b> frees all of the state associated
with a binding table. Once it returns the caller should not use the
<i>bindingTable</i> token again.</p>

<p><b>Tk_CreateBinding</b> adds a new binding to an existing table.
The <i>object</i> argument identifies the object with which the
binding is to be associated, and it may be any one-word value.
Typically it is a pointer to a string or data structure. The
<i>eventString</i> argument identifies the event or sequence of
events for the binding; see the documentation for the <b><a href=
"../TkCmd/bind.htm">bind</a></b> command for a description of its
format. <i>script</i> is the Tcl script to be evaluated when the
binding triggers. <i>append</i> indicates what to do if there
already exists a binding for <i>object</i> and <i>eventString</i>:
if <i>append</i> is zero then <i>script</i> replaces the old
script; if <i>append</i> is non-zero then the new script is
appended to the old one. <b>Tk_CreateBinding</b> returns an X event
mask for all the events associated with the bindings. This
information may be useful to invoke <b>XSelectInput</b> to select
relevant events, or to disallow the use of certain events in
bindings. If an error occurred while creating the binding (e.g.,
<i>eventString</i> refers to a non-existent event), then 0 is
returned and an error message is left in
<i>interp-&gt;result</i>.</p>

<p><b>Tk_DeleteBinding</b> removes from <i>bindingTable</i> the
binding given by <i>object</i> and <i>eventString</i>, if such a
binding exists. <b>Tk_DeleteBinding</b> always returns
<b>TCL_OK</b>. In some cases it may reset <i>interp-&gt;result</i>
to the default empty value.</p>

<p><b>Tk_GetBinding</b> returns a pointer to the script associated
with <i>eventString</i> and <i>object</i> in <i>bindingTable</i>.
If no such binding exists then NULL is returned and an error
message is left in <i>interp-&gt;result</i>.</p>

<p><b>Tk_GetAllBindings</b> returns in <i>interp-&gt;result</i> a
list of all the event strings for which there are bindings in
<i>bindingTable</i> associated with <i>object</i>. If there are no
bindings for <i>object</i> then an empty string is returned in
<i>interp-&gt;result</i>.</p>

<p><b>Tk_DeleteAllBindings</b> deletes all of the bindings in
<i>bindingTable</i> that are associated with <i>object</i>.</p>

<p><b>Tk_BindEvent</b> is called to process an event. It makes a
copy of the event in an internal history list associated with the
binding table, then it checks for bindings that match the event.
<b>Tk_BindEvent</b> processes each of the objects pointed to by
<i>objectPtr</i> in turn. For each object, it finds all the
bindings that match the current event history, selects the most
specific binding using the priority mechanism described in the
documentation for <b><a href="../TkCmd/bind.htm">bind</a></b>, and
invokes the script for that binding. If there are no matching
bindings for a particular object, then the object is skipped.
<b>Tk_BindEvent</b> continues through all of the objects, handling
exceptions such as errors, <b><a href=
"../TclCmd/break.htm">break</a></b>, and <b><a href=
"../TclCmd/continue.htm">continue</a></b> as described in the
documentation for <b><a href="../TkCmd/bind.htm">bind</a></b>.</p>

<h3><a name="M6">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#binding">binding</a>, <a href=
"../Keywords/E.htm#event">event</a>, <a href=
"../Keywords/O.htm#object">object</a>, <a href=
"../Keywords/S.htm#script">script</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1994 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

