<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - package manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> package</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="package.htm#M2" name="L1139">NAME</a> 

<dl>
<dd>package - Facilities for package loading and version
control</dd>
</dl>
</dd>

<dd><a href="package.htm#M3" name="L1140">SYNOPSIS</a> 

<dl>
<dd><b>package forget ?</b><i>package package ...</i>?</dd>

<dd><b>package ifneeded</b> <i>package version</i>
?<i>script</i>?</dd>

<dd><b>package names</b></dd>

<dd><b>package present</b> <i>package</i>
?<i>requirement...</i>?</dd>

<dd><b>package present -exact</b> <i>package version</i></dd>

<dd><b>package provide</b> <i>package</i> ?<i>version</i>?</dd>

<dd><b>package require</b> <i>package</i>
?<i>requirement...</i>?</dd>

<dd><b>package require -exact</b> <i>package version</i></dd>

<dd><b>package unknown</b> ?<i>command</i>?</dd>

<dd><b>package vcompare</b> <i>version1 version2</i></dd>

<dd><b>package versions</b> <i>package</i></dd>

<dd><b>package vsatisfies</b> <i>version requirement...</i></dd>

<dd><b>package prefer</b> ?<b>latest</b>|<b>stable</b>?</dd>
</dl>
</dd>

<dd><a href="package.htm#M4" name="L1141">DESCRIPTION</a> 

<dl class="description">
<dd><a href="package.htm#M5" name="L1142"><b>package forget
?</b><i>package package ...</i>?</a></dd>

<dd><a href="package.htm#M6" name="L1143"><b>package ifneeded</b>
<i>package version</i> ?<i>script</i>?</a></dd>

<dd><a href="package.htm#M7" name="L1144"><b>package
names</b></a></dd>

<dd><a href="package.htm#M8" name="L1145"><b>package present</b>
?<b>-exact</b>? <i>package</i> ?<i>requirement...</i>?</a></dd>

<dd><a href="package.htm#M9" name="L1146"><b>package provide</b>
<i>package</i> ?<i>version</i>?</a></dd>

<dd><a href="package.htm#M10" name="L1147"><b>package require</b>
<i>package</i> ?<i>requirement...</i>?</a></dd>

<dd><a href="package.htm#M11" name="L1148"><b>package require
-exact</b> <i>package version</i></a></dd>

<dd><a href="package.htm#M12" name="L1149"><b>package unknown</b>
?<i>command</i>?</a></dd>

<dd><a href="package.htm#M13" name="L1150"><b>package vcompare</b>
<i>version1 version2</i></a></dd>

<dd><a href="package.htm#M14" name="L1151"><b>package versions</b>
<i>package</i></a></dd>

<dd><a href="package.htm#M15" name="L1152"><b>package
vsatisfies</b> <i>version requirement...</i></a> 

<dl class="description">
<dd><a href="package.htm#M16" name="L1153">min</a></dd>

<dd><a href="package.htm#M17" name="L1154">min-</a></dd>

<dd><a href="package.htm#M18" name="L1155">min-max</a></dd>
</dl>

<dl class="description">
<dd>
<dl class="description">
<dd><a href="package.htm#M19" name="L1156">[a]</a></dd>

<dd><a href="package.htm#M20" name="L1157">[b]</a></dd>
</dl>
</dd>
</dl>
</dd>

<dd><a href="package.htm#M21" name="L1158"><b>package prefer</b>
?<b>latest</b>|<b>stable</b>?</a></dd>
</dl>
</dd>

<dd><a href="package.htm#M22" name="L1159">VERSION NUMBERS</a></dd>

<dd><a href="package.htm#M23" name="L1160">PACKAGE INDICES</a></dd>

<dd><a href="package.htm#M24" name="L1161">EXAMPLES</a></dd>

<dd><a href="package.htm#M25" name="L1162">SEE ALSO</a></dd>

<dd><a href="package.htm#M26" name="L1163">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

package - Facilities for package loading and version control 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>package forget ?</b><i>package package ...</i>?<br>
<b>package ifneeded</b> <i>package version</i> ?<i>script</i>?<br>
<b>package names</b><br>
<b>package present</b> <i>package</i> ?<i>requirement...</i>?<br>
<b>package present -exact</b> <i>package version</i><br>
<b>package provide</b> <i>package</i> ?<i>version</i>?<br>
<b>package require</b> <i>package</i> ?<i>requirement...</i>?<br>
<b>package require -exact</b> <i>package version</i><br>
<b>package unknown</b> ?<i>command</i>?<br>
<b>package vcompare</b> <i>version1 version2</i><br>
<b>package versions</b> <i>package</i><br>
<b>package vsatisfies</b> <i>version requirement...</i><br>
<b>package prefer</b> ?<b>latest</b>|<b>stable</b>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

This command keeps a simple database of the packages available for
use by the current interpreter and how to load them into the
interpreter. It supports multiple versions of each package and
arranges for the correct version of a package to be loaded based on
what is needed by the application. This command also detects and
reports version clashes. Typically, only the <b>package require</b>
and <b>package provide</b> commands are invoked in normal Tcl
scripts; the other commands are used primarily by system scripts
that maintain the package database. 

<p>The behavior of the <b>package</b> command is determined by its
first argument. The following forms are permitted:</p>

<dl class="description">
<dt><a name="M5"><b>package forget ?</b><i>package package
...</i>?</a></dt>

<dd>Removes all information about each specified package from this
interpreter, including information provided by both <b>package
ifneeded</b> and <b>package provide</b>.</dd>

<dt><a name="M6"><b>package ifneeded</b> <i>package version</i>
?<i>script</i>?</a></dt>

<dd>This command typically appears only in system configuration
scripts to set up the package database. It indicates that a
particular version of a particular package is available if needed,
and that the package can be added to the interpreter by executing
<i>script</i>. The script is saved in a database for use by
subsequent <b>package require</b> commands; typically,
<i>script</i> sets up auto-loading for the commands in the package
(or calls <b><a href="../TclCmd/load.htm">load</a></b> and/or <b><a
href="../TclCmd/source.htm">source</a></b> directly), then invokes
<b>package provide</b> to indicate that the package is present.
There may be information in the database for several different
versions of a single package. If the database already contains
information for <i>package</i> and <i>version</i>, the new
<i>script</i> replaces the existing one. If the <i>script</i>
argument is omitted, the current script for version <i>version</i>
of package <i>package</i> is returned, or an empty string if no
<b>package ifneeded</b> command has been invoked for this
<i>package</i> and <i>version</i>.</dd>

<dt><a name="M7"><b>package names</b></a></dt>

<dd>Returns a list of the names of all packages in the interpreter
for which a version has been provided (via <b>package provide</b>)
or for which a <b>package ifneeded</b> script is available. The
order of elements in the list is arbitrary.</dd>

<dt><a name="M8"><b>package present</b> ?<b>-exact</b>?
<i>package</i> ?<i>requirement...</i>?</a></dt>

<dd>This command is equivalent to <b>package require</b> except
that it does not try and load the package if it is not already
loaded.</dd>

<dt><a name="M9"><b>package provide</b> <i>package</i>
?<i>version</i>?</a></dt>

<dd>This command is invoked to indicate that version <i>version</i>
of package <i>package</i> is now present in the interpreter. It is
typically invoked once as part of an <b>ifneeded</b> script, and
again by the package itself when it is finally loaded. An error
occurs if a different version of <i>package</i> has been provided
by a previous <b>package provide</b> command. If the <i>version</i>
argument is omitted, then the command returns the version number
that is currently provided, or an empty string if no <b>package
provide</b> command has been invoked for <i>package</i> in this
interpreter.</dd>

<dt><a name="M10"><b>package require</b> <i>package</i>
?<i>requirement...</i>?</a></dt>

<dd>This command is typically invoked by Tcl code that wishes to
use a particular version of a particular package. The arguments
indicate which package is wanted, and the command ensures that a
suitable version of the package is loaded into the interpreter. If
the command succeeds, it returns the version number that is loaded;
otherwise it generates an error. 

<p>A suitable version of the package is any version which satisfies
at least one of the requirements, per the rules of <b>package
vsatisfies</b>. If multiple versions are suitable the
implementation with the highest version is chosen. This last part
is additionally influenced by the selection mode set with
<b>package prefer</b>.</p>

<p>In the &ldquo;stable&rdquo; selection mode the command will
select the highest stable version satisfying the requirements, if
any. If no stable version satisfies the requirements, the highest
unstable version satisfying the requirements will be selected. In
the &ldquo;latest&rdquo; selection mode the command will accept the
highest version satisfying all the requirements, regardless of its
stableness.</p>

<p>If a version of <i>package</i> has already been provided (by
invoking the <b>package provide</b> command), then its version
number must satisfy the <i>requirement</i>s and the command returns
immediately. Otherwise, the command searches the database of
information provided by previous <b>package ifneeded</b> commands
to see if an acceptable version of the package is available. If so,
the script for the highest acceptable version number is evaluated
in the global namespace; it must do whatever is necessary to load
the package, including calling <b>package provide</b> for the
package. If the <b>package ifneeded</b> database does not contain
an acceptable version of the package and a <b>package unknown</b>
command has been specified for the interpreter then that command is
evaluated in the global namespace; when it completes, Tcl checks
again to see if the package is now provided or if there is a
<b>package ifneeded</b> script for it. If all of these steps fail
to provide an acceptable version of the package, then the command
returns an error.</p>
</dd>

<dt><a name="M11"><b>package require -exact</b> <i>package
version</i></a></dt>

<dd>This form of the command is used when only the given
<i>version</i> of <i>package</i> is acceptable to the caller. This
command is equivalent to <b>package require</b> <i>package
version</i>-<i>version</i>.</dd>

<dt><a name="M12"><b>package unknown</b> ?<i>command</i>?</a></dt>

<dd>This command supplies a &ldquo;last resort&rdquo; command to
invoke during <b>package require</b> if no suitable version of a
package can be found in the <b>package ifneeded</b> database. If
the <i>command</i> argument is supplied, it contains the first part
of a command; when the command is invoked during a <b>package
require</b> command, Tcl appends one or more additional arguments
giving the desired package name and requirements. For example, if
<i>command</i> is <b>foo bar</b> and later the command <b>package
require test 2.4</b> is invoked, then Tcl will execute the command
<b>foo bar test 2.4</b> to load the package. If no requirements are
supplied to the <b>package require</b> command, then only the name
will be added to invoked command. If the <b>package unknown</b>
command is invoked without a <i>command</i> argument, then the
current <b>package unknown</b> script is returned, or an empty
string if there is none. If <i>command</i> is specified as an empty
string, then the current <b>package unknown</b> script is removed,
if there is one.</dd>

<dt><a name="M13"><b>package vcompare</b> <i>version1
version2</i></a></dt>

<dd>Compares the two version numbers given by <i>version1</i> and
<i>version2</i>. Returns -1 if <i>version1</i> is an earlier
version than <i>version2</i>, 0 if they are equal, and 1 if
<i>version1</i> is later than <b>version2</b>.</dd>

<dt><a name="M14"><b>package versions</b> <i>package</i></a></dt>

<dd>Returns a list of all the version numbers of <i>package</i> for
which information has been provided by <b>package ifneeded</b>
commands.</dd>

<dt><a name="M15"><b>package vsatisfies</b> <i>version
requirement...</i></a></dt>

<dd>Returns 1 if the <i>version</i> satisfies at least one of the
given requirements, and 0 otherwise. Each <i>requirement</i> is
allowed to have any of the forms: 

<dl class="description">
<dt><a name="M16">min</a></dt>

<dd>This form is called &ldquo;min-bounded&rdquo;.</dd>

<dt><a name="M17">min-</a></dt>

<dd>This form is called &ldquo;min-unbound&rdquo;.</dd>

<dt><a name="M18">min-max</a></dt>

<dd>This form is called &ldquo;bounded&rdquo;.</dd>
</dl>

<p>where &ldquo;min&rdquo; and &ldquo;max&rdquo; are valid version
numbers. The legacy syntax is a special case of the extended
syntax, keeping backward compatibility. Regarding satisfaction the
rules are:</p>

<dl class="description">
<dt>[1]</dt>

<dd>The <i>version</i> has to pass at least one of the listed
<i>requirement</i>s to be satisfactory.</dd>

<dt>[2]</dt>

<dd>A version satisfies a &ldquo;bounded&rdquo; requirement when 

<dl class="description">
<dt><a name="M19">[a]</a></dt>

<dd>For <i>min</i> equal to the <i>max</i> if, and only if the
<i>version</i> is equal to the <i>min</i>.</dd>

<dt><a name="M20">[b]</a></dt>

<dd>Otherwise if, and only if the <i>version</i> is greater than or
equal to the <i>min</i>, and less than the <i>max</i>, where both
<i>min</i> and <i>max</i> have been padded internally with
&ldquo;a0&rdquo;. Note that while the comparison to <i>min</i> is
inclusive, the comparison to <i>max</i> is exclusive.</dd>
</dl>
</dd>

<dt>[3]</dt>

<dd>A &ldquo;min-bounded&rdquo; requirement is a
&ldquo;bounded&rdquo; requirement in disguise, with the <i>max</i>
part implicitly specified as the next higher major version number
of the <i>min</i> part. A version satisfies it per the rules
above.</dd>

<dt>[4]</dt>

<dd>A <i>version</i> satisfies a &ldquo;min-unbound&rdquo;
requirement if, and only if it is greater than or equal to the
<i>min</i>, where the <i>min</i> has been padded internally with
&ldquo;a0&rdquo;. There is no constraint to a maximum.</dd>
</dl>
</dd>

<dt><a name="M21"><b>package prefer</b>
?<b>latest</b>|<b>stable</b>?</a></dt>

<dd>With no arguments, the commands returns either
&ldquo;latest&rdquo; or &ldquo;stable&rdquo;, whichever describes
the current mode of selection logic used by <b>package require</b>.


<p>When passed the argument &ldquo;latest&rdquo;, it sets the
selection logic mode to &ldquo;latest&rdquo;.</p>

<p>When passed the argument &ldquo;stable&rdquo;, if the mode is
already &ldquo;stable&rdquo;, that value is kept. If the mode is
already &ldquo;latest&rdquo;, then the attempt to set it back to
&ldquo;stable&rdquo; is ineffective and the mode value remains
&ldquo;latest&rdquo;.</p>

<p>When passed any other value as an argument, raise an invalid
argument error.</p>

<p>When an interpreter is created, its initial selection mode value
is set to &ldquo;stable&rdquo; unless the environment variable
<b>TCL_PKG_PREFER_LATEST</b> is set. If that environment variable
is defined (with any value) then the initial (and permanent)
selection mode value is set to &ldquo;latest&rdquo;.</p>
</dd>
</dl>

<h3><a name="M22">VERSION NUMBERS</a></h3>

Version numbers consist of one or more decimal numbers separated by
dots, such as 2 or 1.162 or 3.1.13.1. The first number is called
the major version number. Larger numbers correspond to later
versions of a package, with leftmost numbers having greater
significance. For example, version 2.1 is later than 1.3 and
version 3.4.6 is later than 3.3.5. Missing fields are equivalent to
zeroes: version 1.3 is the same as version 1.3.0 and 1.3.0.0, so it
is earlier than 1.3.1 or 1.3.0.2. In addition, the letters
&ldquo;a&rdquo; (alpha) and/or &ldquo;b&rdquo; (beta) may appear
exactly once to replace a dot for separation. These letters
semantically add a negative specifier into the version, where
&ldquo;a&rdquo; is -2, and &ldquo;b&rdquo; is -1. Each may be
specified only once, and &ldquo;a&rdquo; or &ldquo;b&rdquo; are
mutually exclusive in a specifier. Thus 1.3a1 becomes
(semantically) 1.3.-2.1, 1.3b1 is 1.3.-1.1. Negative numbers are
not directly allowed in version specifiers. A version number not
containing the letters &ldquo;a&rdquo; or &ldquo;b&rdquo; as
specified above is called a <b>stable</b> version, whereas presence
of the letters causes the version to be called is <b>unstable</b>.
A later version number is assumed to be upwards compatible with an
earlier version number as long as both versions have the same major
version number. For example, Tcl scripts written for version 2.3 of
a package should work unchanged under versions 2.3.2, 2.4, and
2.5.1. Changes in the major version number signify incompatible
changes: if code is written to use version 2.1 of a package, it is
not guaranteed to work unmodified with either version 1.7.3 or
version 3.1. 

<h3><a name="M23">PACKAGE INDICES</a></h3>

The recommended way to use packages in Tcl is to invoke <b>package
require</b> and <b>package provide</b> commands in scripts, and use
the procedure <b>pkg_mkIndex</b> to create package index files.
Once you have done this, packages will be loaded automatically in
response to <b>package require</b> commands. See the documentation
for <b>pkg_mkIndex</b> for details. 

<h3><a name="M24">EXAMPLES</a></h3>

To state that a Tcl script requires the Tk and http packages, put
this at the top of the script: 

<pre>
<b>package require</b> Tk
<b>package require</b> http
</pre>

<p>To test to see if the Snack package is available and load if it
is (often useful for optional enhancements to programs where the
loss of the functionality is not critical) do this:</p>

<pre>
if {[catch {<b>package require</b> Snack}]} {
   # Error thrown - package not found.
   # Set up a dummy interface to work around the absence
} else {
   # We have the package, configure the app to use it
}
</pre>

<h3><a name="M25">SEE ALSO</a></h3>

<b><a href="../TclCmd/msgcat.htm">msgcat</a></b>, <b>packagens</b>,
<b>pkgMkIndex</b> 

<h3><a name="M26">KEYWORDS</a></h3>

<a href="../Keywords/P.htm#package">package</a>, <a href=
"../Keywords/V.htm#version">version</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1996 Sun Microsystems, Inc.</div>
</body>
</html>

