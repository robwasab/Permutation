<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_CreateImageType manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> CrtImgType</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="CrtImgType.htm#M2" name="L120">NAME</a> 

<dl>
<dd>Tk_CreateImageType, Tk_GetImageMasterData, Tk_InitImageArgs -
define new kind of image</dd>
</dl>
</dd>

<dd><a href="CrtImgType.htm#M3" name="L121">SYNOPSIS</a></dd>

<dd><a href="CrtImgType.htm#M4" name="L122">ARGUMENTS</a></dd>

<dd><a href="CrtImgType.htm#M5" name="L123">DESCRIPTION</a></dd>

<dd><a href="CrtImgType.htm#M6" name="L124">NAME</a></dd>

<dd><a href="CrtImgType.htm#M7" name="L125">CREATEPROC</a></dd>

<dd><a href="CrtImgType.htm#M8" name="L126">GETPROC</a></dd>

<dd><a href="CrtImgType.htm#M9" name="L127">DISPLAYPROC</a></dd>

<dd><a href="CrtImgType.htm#M10" name="L128">FREEPROC</a></dd>

<dd><a href="CrtImgType.htm#M11" name="L129">DELETEPROC</a></dd>

<dd><a href="CrtImgType.htm#M12" name=
"L130">TK_GETIMAGEMASTERDATA</a></dd>

<dd><a href="CrtImgType.htm#M13" name="L131">LEGACY INTERFACE
SUPPORT</a></dd>

<dd><a href="CrtImgType.htm#M14" name="L132">SEE ALSO</a></dd>

<dd><a href="CrtImgType.htm#M15" name="L133">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tk_CreateImageType, Tk_GetImageMasterData, Tk_InitImageArgs -
define new kind of image 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
<b>Tk_CreateImageType</b>(<i>typePtr</i>)<br>
ClientData<br>
<b>Tk_GetImageMasterData</b>(<i>interp, name, typePtrPtr</i>)<br>
<b>Tk_InitImageArgs</b>(<i>interp, argc, argvPtr</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Tk_ImageType <b>*typePtr</b> (in)</dt>

<dd>Structure that defines the new type of image. Must be static: a
pointer to this structure is retained by the image code.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which image was created.</dd>

<dt>const char <b>*name</b> (in)</dt>

<dd>Name of existing image.</dd>

<dt>Tk_ImageType <b>**typePtrPtr</b> (out)</dt>

<dd>Points to word in which to store a pointer to type information
for the given image, if it exists.</dd>

<dt>int <b>argc</b> (in)</dt>

<dd>Number of arguments</dd>

<dt>char <b>***argvPtr</b> (in/out)</dt>

<dd>Pointer to argument list</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tk_CreateImageType</b> is invoked to define a new kind of image.
An image type corresponds to a particular value of the <i>type</i>
argument for the <b><a href="../TkCmd/image.htm">image
create</a></b> command. There may exist any number of different
image types, and new types may be defined dynamically by calling
<b>Tk_CreateImageType</b>. For example, there might be one type for
2-color bitmaps, another for multi-color images, another for
dithered images, another for video, and so on. 

<p>The code that implements a new image type is called an <i>image
manager</i>. It consists of a collection of procedures plus three
different kinds of data structures. The first data structure is a
Tk_ImageType structure, which contains the name of the image type
and pointers to five procedures provided by the image manager to
deal with images of this type:</p>

<pre>
typedef struct Tk_ImageType {
    char *<i>name</i>;
    Tk_ImageCreateProc *<i>createProc</i>;
    Tk_ImageGetProc *<i>getProc</i>;
    Tk_ImageDisplayProc *<i>displayProc</i>;
    Tk_ImageFreeProc *<i>freeProc</i>;
    Tk_ImageDeleteProc *<i>deleteProc</i>;
} Tk_ImageType;
</pre>

The fields of this structure will be described in later subsections
of this entry. 

<p>The second major data structure manipulated by an image manager
is called an <i>image master</i>; it contains overall information
about a particular image, such as the values of the configuration
options specified in an <b><a href="../TkCmd/image.htm">image
create</a></b> command. There will usually be one of these
structures for each invocation of the <b><a href=
"../TkCmd/image.htm">image create</a></b> command.</p>

<p>The third data structure related to images is an <i>image
instance</i>. There will usually be one of these structures for
each usage of an image in a particular widget. It is possible for a
single image to appear simultaneously in multiple widgets, or even
multiple times in the same widget. Furthermore, different instances
may be on different screens or displays. The image instance data
structure describes things that may vary from instance to instance,
such as colors and graphics contexts for redisplay. There is
usually one instance structure for each <b>-image</b> option
specified for a widget or canvas item.</p>

<p>The following subsections describe the fields of a Tk_ImageType
in more detail.</p>

<h4><a name="M6">NAME</a></h4>

<p><i>typePtr-&gt;name</i> provides a name for the image type. Once
<b>Tk_CreateImageType</b> returns, this name may be used in <b><a
href="../TkCmd/image.htm">image create</a></b> commands to create
images of the new type. If there already existed an image type by
this name then the new image type replaces the old one.</p>

<h4><a name="M7">CREATEPROC</a></h4>

<i>typePtr-&gt;createProc</i> provides the address of a procedure
for Tk to call whenever <b><a href="../TkCmd/image.htm">image
create</a></b> is invoked to create an image of the new type.
<i>typePtr-&gt;createProc</i> must match the following prototype: 

<pre>
typedef int Tk_ImageCreateProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    char *<i>name</i>,
    int <i>objc</i>,
    Tcl_Obj *const <i>objv</i>[],
    Tk_ImageType *<i>typePtr</i>,
    Tk_ImageMaster <i>master</i>,
    ClientData *<i>masterDataPtr</i>);
</pre>

The <i>interp</i> argument is the interpreter in which the <b><a
href="../TkCmd/image.htm">image</a></b> command was invoked, and
<i>name</i> is the name for the new image, which was either
specified explicitly in the <b><a href=
"../TkCmd/image.htm">image</a></b> command or generated
automatically by the <b><a href="../TkCmd/image.htm">image</a></b>
command. The <i>objc</i> and <i>objv</i> arguments describe all the
configuration options for the new image (everything after the name
argument to <b><a href="../TkCmd/image.htm">image</a></b>). The
<i>master</i> argument is a token that refers to Tk's information
about this image; the image manager must return this token to Tk
when invoking the <b><a href=
"../TkLib/ImgChanged.htm">Tk_ImageChanged</a></b> procedure.
Typically <i>createProc</i> will parse <i>objc</i> and <i>objv</i>
and create an image master data structure for the new image.
<i>createProc</i> may store an arbitrary one-word value at
*<i>masterDataPtr</i>, which will be passed back to the image
manager when other callbacks are invoked. Typically the value is a
pointer to the master data structure for the image. 

<p>If <i>createProc</i> encounters an error, it should leave an
error message in the interpreter result and return
<b>TCL_ERROR</b>; otherwise it should return <b>TCL_OK</b>.</p>

<p><i>createProc</i> should call <b><a href=
"../TkLib/ImgChanged.htm">Tk_ImageChanged</a></b> in order to set
the size of the image and request an initial redisplay.</p>

<h4><a name="M8">GETPROC</a></h4>

<i>typePtr-&gt;getProc</i> is invoked by Tk whenever a widget calls
<b><a href="../TkLib/GetImage.htm">Tk_GetImage</a></b> to use a
particular image. This procedure must match the following
prototype: 

<pre>
typedef ClientData Tk_ImageGetProc(
    Tk_Window <i>tkwin</i>,
    ClientData <i>masterData</i>);
</pre>

The <i>tkwin</i> argument identifies the window in which the image
will be used and <i>masterData</i> is the value returned by
<i>createProc</i> when the image master was created. <i>getProc</i>
will usually create a data structure for the new instance,
including such things as the resources needed to display the image
in the given window. <i>getProc</i> returns a one-word token for
the instance, which is typically the address of the instance data
structure. Tk will pass this value back to the image manager when
invoking its <i>displayProc</i> and <i>freeProc</i> procedures. 

<h4><a name="M9">DISPLAYPROC</a></h4>

<i>typePtr-&gt;displayProc</i> is invoked by Tk whenever an image
needs to be displayed (i.e., whenever a widget calls <b><a href=
"../TkLib/GetImage.htm">Tk_RedrawImage</a></b>). <i>displayProc</i>
must match the following prototype: 

<pre>
typedef void Tk_ImageDisplayProc(
    ClientData <i>instanceData</i>,
    Display *<i>display</i>,
    Drawable <i>drawable</i>,
    int <i>imageX</i>,
    int <i>imageY</i>,
    int <i>width</i>,
    int <i>height</i>,
    int <i>drawableX</i>,
    int <i>drawableY</i>);
</pre>

The <i>instanceData</i> will be the same as the value returned by
<i>getProc</i> when the instance was created. <i>display</i> and
<i>drawable</i> indicate where to display the image;
<i>drawable</i> may be a pixmap rather than the window specified to
<i>getProc</i> (this is usually the case, since most widgets
double-buffer their redisplay to get smoother visual effects).
<i>imageX</i>, <i>imageY</i>, <i>width</i>, and <i>height</i>
identify the region of the image that must be redisplayed. This
region will always be within the size of the image as specified in
the most recent call to <b><a href=
"../TkLib/ImgChanged.htm">Tk_ImageChanged</a></b>. <i>drawableX</i>
and <i>drawableY</i> indicate where in <i>drawable</i> the image
should be displayed; <i>displayProc</i> should display the given
region of the image so that point (<i>imageX</i>, <i>imageY</i>) in
the image appears at (<i>drawableX</i>, <i>drawableY</i>) in
<i>drawable</i>. 

<h4><a name="M10">FREEPROC</a></h4>

<i>typePtr-&gt;freeProc</i> contains the address of a procedure
that Tk will invoke when an image instance is released (i.e., when
<b><a href="../TkLib/GetImage.htm">Tk_FreeImage</a></b> is
invoked). This can happen, for example, when a widget is deleted or
a image item in a canvas is deleted, or when the image displayed in
a widget or canvas item is changed. <i>freeProc</i> must match the
following prototype: 

<pre>
typedef void Tk_ImageFreeProc(
    ClientData <i>instanceData</i>,
    Display *<i>display</i>);
</pre>

The <i>instanceData</i> will be the same as the value returned by
<i>getProc</i> when the instance was created, and <i>display</i> is
the display containing the window for the instance. <i>freeProc</i>
should release any resources associated with the image instance,
since the instance will never be used again. 

<h4><a name="M11">DELETEPROC</a></h4>

<i>typePtr-&gt;deleteProc</i> is a procedure that Tk invokes when
an image is being deleted (i.e. when the <b><a href=
"../TkCmd/image.htm">image delete</a></b> command is invoked).
Before invoking <i>deleteProc</i> Tk will invoke <i>freeProc</i>
for each of the image's instances. <i>deleteProc</i> must match the
following prototype: 

<pre>
typedef void Tk_ImageDeleteProc(
    ClientData <i>masterData</i>);
</pre>

The <i>masterData</i> argument will be the same as the value stored
in <i>*masterDataPtr</i> by <i>createProc</i> when the image was
created. <i>deleteProc</i> should release any resources associated
with the image. 

<h3><a name="M12">TK_GETIMAGEMASTERDATA</a></h3>

The procedure <b>Tk_GetImageMasterData</b> may be invoked to
retrieve information about an image. For example, an image manager
can use this procedure to locate its image master data for an
image. If there exists an image named <i>name</i> in the
interpreter given by <i>interp</i>, then <i>*typePtrPtr</i> is
filled in with type information for the image (the <i>typePtr</i>
value passed to <b>Tk_CreateImageType</b> when the image type was
registered) and the return value is the ClientData value returned
by the <i>createProc</i> when the image was created (this is
typically a pointer to the image master data structure). If no such
image exists then NULL is returned and NULL is stored at
<i>*typePtrPtr</i>. 

<h3><a name="M13">LEGACY INTERFACE SUPPORT</a></h3>

In Tk 8.2 and earlier, the definition of <b>Tk_ImageCreateProc</b>
was incompatibly different, with the following prototype: 

<pre>
typedef int Tk_ImageCreateProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    char *<i>name</i>,
    int <i>argc</i>,
    char **<i>argv</i>,
    Tk_ImageType *<i>typePtr</i>,
    Tk_ImageMaster <i>master</i>,
    ClientData *<i>masterDataPtr</i>);
</pre>

Legacy programs and libraries dating from those days may still
contain code that defines extended Tk image types using the old
interface. The Tk header file will still support this legacy
interface if the code is compiled with the macro
<b>USE_OLD_IMAGE</b> defined. 

<p>When the <b>USE_OLD_IMAGE</b> legacy support is enabled, you may
see the routine <b>Tk_InitImageArgs</b> in use. This was a
migration tool used to create stub-enabled extensions that could be
loaded into interps containing all versions of Tk 8.1 and later. Tk
8.5 no longer provides this routine, but uses a macro to convert
any attempted calls of this routine into an empty comment. Any
stub-enabled extension providing an extended image type via the
legacy interface that is compiled against Tk 8.5 headers and linked
against the Tk 8.5 stub library will produce a file that can be
loaded only into interps with Tk 8.5 or later; that is, the normal
stub-compatibility rules. If a developer needs to generate from
such code a file that is loadable into interps with Tk 8.4 or
earlier, they must use Tk 8.4 headers and stub libraries to do
so.</p>

<p>Any new code written today should not make use of the legacy
interfaces. Expect their support to go away in Tk 9.</p>

<h3><a name="M14">SEE ALSO</a></h3>

<b><a href="../TkLib/ImgChanged.htm">Tk_ImageChanged</a></b>, <b><a
href="../TkLib/GetImage.htm">Tk_GetImage</a></b>, <b><a href=
"../TkLib/GetImage.htm">Tk_FreeImage</a></b>, <b><a href=
"../TkLib/GetImage.htm">Tk_RedrawImage</a></b>, <b><a href=
"../TkLib/GetImage.htm">Tk_SizeOfImage</a></b> 

<h3><a name="M15">KEYWORDS</a></h3>

<a href="../Keywords/I.htm#image manager">image manager</a>, <a
href="../Keywords/I.htm#image type">image type</a>, <a href=
"../Keywords/I.htm#instance">instance</a>, <a href=
"../Keywords/M.htm#master">master</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1994 The Regents of the University of California.
Copyright &copy; 1994-1997 Sun Microsystems, Inc.</div>
</body>
</html>

