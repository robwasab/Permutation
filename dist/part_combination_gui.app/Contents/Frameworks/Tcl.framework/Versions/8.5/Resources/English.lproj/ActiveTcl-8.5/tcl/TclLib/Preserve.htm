<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_Preserve manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> Preserve</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_Preserve, Tcl_Release, Tcl_EventuallyFree - avoid freeing
storage while it is being used 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
<b>Tcl_Preserve</b>(<i>clientData</i>)<br>
<b>Tcl_Release</b>(<i>clientData</i>)<br>
<b>Tcl_EventuallyFree</b>(<i>clientData, freeProc</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Token describing structure to be freed or reallocated. Usually
a pointer to memory for structure.</dd>

<dt>Tcl_FreeProc <b>*freeProc</b> (in)</dt>

<dd>Procedure to invoke to free <i>clientData</i>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These three procedures help implement a simple reference count
mechanism for managing storage. They are designed to solve a
problem having to do with widget deletion, but are also useful in
many other situations. When a widget is deleted, its widget record
(the structure holding information specific to the widget) must be
returned to the storage allocator. However, it is possible that the
widget record is in active use by one of the procedures on the
stack at the time of the deletion. This can happen, for example, if
the command associated with a button widget causes the button to be
destroyed: an X event causes an event-handling C procedure in the
button to be invoked, which in turn causes the button's associated
Tcl command to be executed, which in turn causes the button to be
deleted, which in turn causes the button's widget record to be
de-allocated. Unfortunately, when the Tcl command returns, the
button's event-handling procedure will need to reference the
button's widget record. Because of this, the widget record must not
be freed as part of the deletion, but must be retained until the
event-handling procedure has finished with it. In other situations
where the widget is deleted, it may be possible to free the widget
record immediately. 

<p><b>Tcl_Preserve</b> and <b>Tcl_Release</b> implement short-term
reference counts for their <i>clientData</i> argument. The
<i>clientData</i> argument identifies an object and usually
consists of the address of a structure. The reference counts
guarantee that an object will not be freed until each call to
<b>Tcl_Preserve</b> for the object has been matched by calls to
<b>Tcl_Release</b>. There may be any number of unmatched
<b>Tcl_Preserve</b> calls in effect at once.</p>

<p><b>Tcl_EventuallyFree</b> is invoked to free up its
<i>clientData</i> argument. It checks to see if there are unmatched
<b>Tcl_Preserve</b> calls for the object. If not, then
<b>Tcl_EventuallyFree</b> calls <i>freeProc</i> immediately.
Otherwise <b>Tcl_EventuallyFree</b> records the fact that
<i>clientData</i> needs eventually to be freed. When all calls to
<b>Tcl_Preserve</b> have been matched with calls to
<b>Tcl_Release</b> then <i>freeProc</i> will be called by
<b>Tcl_Release</b> to do the cleanup.</p>

<p>All the work of freeing the object is carried out by
<i>freeProc</i>. <i>FreeProc</i> must have arguments and result
that match the type <b>Tcl_FreeProc</b>:</p>

<pre>
typedef void Tcl_FreeProc(char *<i>blockPtr</i>);
</pre>

The <i>blockPtr</i> argument to <i>freeProc</i> will be the same as
the <i>clientData</i> argument to <b>Tcl_EventuallyFree</b>. The
type of <i>blockPtr</i> (<b>char *</b>) is different than the type
of the <i>clientData</i> argument to <b>Tcl_EventuallyFree</b> for
historical reasons, but the value is the same. 

<p>When the <i>clientData</i> argument to <b>Tcl_EventuallyFree</b>
refers to storage allocated and returned by a prior call to <b><a
href="../TclLib/Alloc.htm">Tcl_Alloc</a></b>, <b><a href=
"../TclLib/Alloc.htm">ckalloc</a></b>, or another function of the
Tcl library, then the <i>freeProc</i> argument should be given the
special value of <b>TCL_DYNAMIC</b>.</p>

<p>This mechanism can be used to solve the problem described above
by placing <b>Tcl_Preserve</b> and <b>Tcl_Release</b> calls around
actions that may cause undesired storage re-allocation. The
mechanism is intended only for short-term use (i.e. while
procedures are pending on the stack); it will not work efficiently
as a mechanism for long-term reference counts. The implementation
does not depend in any way on the internal structure of the objects
being freed; it keeps the reference counts in a separate
structure.</p>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclLib/Interp.htm">Tcl_Interp</a></b>, <b><a href=
"../TclLib/Alloc.htm">Tcl_Alloc</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/F.htm#free">free</a>, <a href=
"../Keywords/R.htm#reference count">reference count</a>, <a href=
"../Keywords/S.htm#storage">storage</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1990 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

