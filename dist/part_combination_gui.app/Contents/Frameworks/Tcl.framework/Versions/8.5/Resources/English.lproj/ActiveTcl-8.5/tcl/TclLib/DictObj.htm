<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_DictObj manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> DictObj</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_NewDictObj, Tcl_DictObjPut, Tcl_DictObjGet, Tcl_DictObjRemove,
Tcl_DictObjSize, Tcl_DictObjFirst, Tcl_DictObjNext,
Tcl_DictObjDone, Tcl_DictObjPutKeyList, Tcl_DictObjRemoveKeyList -
manipulate Tcl objects as dictionaries 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
Tcl_Obj *<br>
<b>Tcl_NewDictObj</b>()<br>
int<br>
<b>Tcl_DictObjGet</b>(<i>interp, dictPtr, keyPtr,
valuePtrPtr</i>)<br>
int<br>
<b>Tcl_DictObjPut</b>(<i>interp, dictPtr, keyPtr, valuePtr</i>)<br>
int<br>
<b>Tcl_DictObjRemove</b>(<i>interp, dictPtr, keyPtr</i>)<br>
int<br>
<b>Tcl_DictObjSize</b>(<i>interp, dictPtr, sizePtr</i>)<br>
int<br>
<b>Tcl_DictObjFirst</b>(<i>interp, dictPtr, searchPtr,<br>
 keyPtrPtr, valuePtrPtr, donePtr</i>)<br>
void<br>
<b>Tcl_DictObjNext</b>(<i>searchPtr, keyPtrPtr, valuePtrPtr,
donePtr</i>)<br>
void<br>
<b>Tcl_DictObjDone</b>(<i>searchPtr</i>)<br>
int<br>
<b>Tcl_DictObjPutKeyList</b>(<i>interp, dictPtr, keyc, keyv,
valuePtr</i>)<br>
int<br>
<b>Tcl_DictObjRemoveKeyList</b>(<i>interp, dictPtr, keyc,
keyv</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>If an error occurs while converting an object to be a
dictionary object, an error message is left in the interpreter's
result object unless <i>interp</i> is NULL.</dd>

<dt>Tcl_Obj <b>*dictPtr</b> (in/out)</dt>

<dd>Points to the dictionary object to be manipulated. If
<i>dictPtr</i> does not already point to a dictionary object, an
attempt will be made to convert it to one.</dd>

<dt>Tcl_Obj <b>*keyPtr</b> (in)</dt>

<dd>Points to the key for the key/value pair being manipulated
within the dictionary object.</dd>

<dt>Tcl_Obj <b>**keyPtrPtr</b> (out)</dt>

<dd>Points to a variable that will have the key from a key/value
pair placed within it. May be NULL to indicate that the caller is
not interested in the key.</dd>

<dt>Tcl_Obj <b>*valuePtr</b> (in)</dt>

<dd>Points to the value for the key/value pair being manipulate
within the dictionary object (or sub-object, in the case of
<b>Tcl_DictObjPutKeyList</b>.)</dd>

<dt>Tcl_Obj <b>**valuePtrPtr</b> (out)</dt>

<dd>Points to a variable that will have the value from a key/value
pair placed within it. For <b>Tcl_DictObjFirst</b> and
<b>Tcl_DictObjNext</b>, this may be NULL to indicate that the
caller is not interested in the value.</dd>

<dt>int <b>*sizePtr</b> (out)</dt>

<dd>Points to a variable that will have the number of key/value
pairs contained within the dictionary placed within it.</dd>

<dt>Tcl_DictSearch <b>*searchPtr</b> (in/out)</dt>

<dd>Pointer to record to use to keep track of progress in
enumerating all key/value pairs in a dictionary. The contents of
the record will be initialized by the call to
<b>Tcl_DictObjFirst</b>. If the enumerating is to be terminated
before all values in the dictionary have been returned, the search
record <i>must</i> be passed to <b>Tcl_DictObjDone</b> to enable
the internal locks to be released.</dd>

<dt>int <b>*donePtr</b> (out)</dt>

<dd>Points to a variable that will have a non-zero value written
into it when the enumeration of the key/value pairs in a dictionary
has completed, and a zero otherwise.</dd>

<dt>int <b>keyc</b> (in)</dt>

<dd>Indicates the number of keys that will be supplied in the
<i>keyv</i> array.</dd>

<dt>Tcl_Obj *const <b>*keyv</b> (in)</dt>

<dd>Array of <i>keyc</i> pointers to objects that
<b>Tcl_DictObjPutKeyList</b> and <b>Tcl_DictObjRemoveKeyList</b>
will use to locate the key/value pair to manipulate within the
sub-dictionaries of the main dictionary object passed to them.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

Tcl dictionary objects have an internal representation that
supports efficient mapping from keys to values and which guarantees
that the particular ordering of keys within the dictionary remains
the same modulo any keys being deleted (which removes them from the
order) or added (which adds them to the end of the order). If
reinterpreted as a list, the values at the even-valued indices in
the list will be the keys of the dictionary, and each will be
followed (in the odd-valued index) by the value associated with
that key. 

<p>The procedures described in this man page are used to create,
modify, index, and iterate over dictionary objects from C code.</p>

<p><b>Tcl_NewDictObj</b> creates a new, empty dictionary object.
The string representation of the object will be invalid, and the
reference count of the object will be zero.</p>

<p><b>Tcl_DictObjGet</b> looks up the given key within the given
dictionary and writes a pointer to the value associated with that
key into the variable pointed to by <i>valuePtrPtr</i>, or a NULL
if the key has no mapping within the dictionary. The result of this
procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b> if the
<i>dictPtr</i> cannot be converted to a dictionary.</p>

<p><b>Tcl_DictObjPut</b> updates the given dictionary so that the
given key maps to the given value; any key may exist at most once
in any particular dictionary. The dictionary must not be shared,
but the key and value may be. This procedure may increase the
reference count of both key and value if it proves necessary to
store them. Neither key nor value should be NULL. The result of
this procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b> if the
<i>dictPtr</i> cannot be converted to a dictionary.</p>

<p><b>Tcl_DictObjRemove</b> updates the given dictionary so that
the given key has no mapping to any value. The dictionary must not
be shared, but the key may be. The key actually stored in the
dictionary will have its reference count decremented if it was
present. It is not an error if the key did not previously exist.
The result of this procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b>
if the <i>dictPtr</i> cannot be converted to a dictionary.</p>

<p><b>Tcl_DictObjSize</b> updates the given variable with the
number of key/value pairs currently in the given dictionary. The
result of this procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b> if
the <i>dictPtr</i> cannot be converted to a dictionary.</p>

<p><b>Tcl_DictObjFirst</b> commences an iteration across all the
key/value pairs in the given dictionary, placing the key and value
in the variables pointed to by the <i>keyPtrPtr</i> and
<i>valuePtrPtr</i> arguments (which may be NULL to indicate that
the caller is uninterested in they key or variable respectively.)
The next key/value pair in the dictionary may be retrieved with
<b>Tcl_DictObjNext</b>. Concurrent updates of the dictionary's
internal representation will not modify the iteration processing
unless the dictionary is unshared, when this will trigger premature
termination of the iteration instead (which Tcl scripts cannot
trigger via the <b><a href="../TclCmd/dict.htm">dict</a></b>
command.) The <i>searchPtr</i> argument points to a piece of
context that is used to identify which particular iteration is
being performed, and is initialized by the call to
<b>Tcl_DictObjFirst</b>. The <i>donePtr</i> argument points to a
variable that is updated to be zero of there are further key/value
pairs to be iterated over, or non-zero if the iteration is
complete. The order of iteration is implementation-defined. If the
<i>dictPtr</i> argument cannot be converted to a dictionary,
<b>Tcl_DictObjFirst</b> returns <b>TCL_ERROR</b> and the iteration
is not commenced, and otherwise it returns <b>TCL_OK</b>.</p>

<p>When <b>Tcl_DictObjFirst</b> is called upon a dictionary, a lock
is placed on the dictionary to enable that dictionary to be
iterated over safely without regard for whether the dictionary is
modified during the iteration. Because of this, once the iteration
over a dictionary's keys has finished (whether because all values
have been iterated over as indicated by the variable indicated by
the <i>donePtr</i> argument being set to one, or because no further
values are required) the <b>Tcl_DictObjDone</b> function must be
called with the same <i>searchPtr</i> as was passed to
<b>Tcl_DictObjFirst</b> so that the internal locks can be released.
Once a particular <i>searchPtr</i> is passed to
<b>Tcl_DictObjDone</b>, passing it to <b>Tcl_DictObjNext</b>
(without first initializing it with <b>Tcl_DictObjFirst</b>) will
result in no values being produced and the variable pointed to by
<i>donePtr</i> being set to one. It is safe to call
<b>Tcl_DictObjDone</b> multiple times on the same <i>searchPtr</i>
for each call to <b>Tcl_DictObjFirst</b>.</p>

<p>The procedures <b>Tcl_DictObjPutKeyList</b> and
<b>Tcl_DictObjRemoveKeyList</b> are the close analogues of
<b>Tcl_DictObjPut</b> and <b>Tcl_DictObjRemove</b> respectively,
except that instead of working with a single dictionary, they are
designed to operate on a nested tree of dictionaries, with inner
dictionaries stored as values inside outer dictionaries. The
<i>keyc</i> and <i>keyv</i> arguments specify a list of keys (with
outermost keys first) that acts as a path to the key/value pair to
be affected. Note that there is no corresponding operation for
reading a value for a path as this is easy to construct from
repeated use of <b>Tcl_DictObjGet</b>. With
<b>Tcl_DictObjPutKeyList</b>, nested dictionaries are created for
non-terminal keys where they do not already exist. With
<b>Tcl_DictObjRemoveKeyList</b>, all non-terminal keys must exist
and have dictionaries as their values.</p>

<h3><a name="M6">EXAMPLE</a></h3>

Using the dictionary iteration interface to search determine if
there is a key that maps to itself: 

<pre>
Tcl_DictSearch search;
Tcl_Obj *key, *value;
int done;

/*
 * Assume interp and objPtr are parameters.  This is the
 * idiomatic way to start an iteration over the dictionary; it
 * sets a lock on the internal representation that ensures that
 * there are no concurrent modification issues when normal
 * reference count management is also used.  The lock is
 * released automatically when the loop is finished, but must
 * be released manually when an exceptional exit from the loop
 * is performed. However it is safe to try to release the lock
 * even if we've finished iterating over the loop.
 */
if (<b>Tcl_DictObjFirst</b>(interp, objPtr, &amp;search,
        &amp;key, &amp;value, &amp;done) != TCL_OK) {
    return TCL_ERROR;
}
for (; !done ; <b>Tcl_DictObjNext</b>(&amp;search, &amp;key, &amp;value, &amp;done)) {
    /*
     * Note that strcmp() is not a good way of comparing
     * objects and is just used here for demonstration
     * purposes.
     */
    if (!strcmp(<a href=
"../TclLib/StringObj.htm">Tcl_GetString</a>(key), <a href=
"../TclLib/StringObj.htm">Tcl_GetString</a>(value))) {
        break;
    }
}
<b>Tcl_DictObjDone</b>(&amp;search);
<a href="../TclLib/SetResult.htm">Tcl_SetObjResult</a>(interp, <a
href="../TclLib/BoolObj.htm">Tcl_NewBooleanObj</a>(!done));
return TCL_OK;
</pre>

<h3><a name="M7">SEE ALSO</a></h3>

<b><a href="../TclLib/Object.htm">Tcl_NewObj</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_DecrRefCount</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_IncrRefCount</a></b>, <b><a href=
"../TclLib/Hash.htm">Tcl_InitObjHashTable</a></b> 

<h3><a name="M8">KEYWORDS</a></h3>

<a href="../Keywords/D.htm#dict">dict</a>, <a href=
"../Keywords/D.htm#dict object">dict object</a>, <a href=
"../Keywords/D.htm#dictionary">dictionary</a>, <a href=
"../Keywords/D.htm#dictionary object">dictionary object</a>, <a
href="../Keywords/H.htm#hash table">hash table</a>, <a href=
"../Keywords/I.htm#iteration">iteration</a>, <a href=
"../Keywords/O.htm#object">object</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2003 Donal K. Fellows</div>
</body>
</html>

