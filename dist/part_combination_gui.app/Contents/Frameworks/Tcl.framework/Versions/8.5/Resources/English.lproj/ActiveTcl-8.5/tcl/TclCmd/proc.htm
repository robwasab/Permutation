<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Built-In Commands - proc manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> proc</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

proc - Create a Tcl procedure 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>proc</b> <i>name args body</i><br>
<h3><a name="M4">DESCRIPTION</a></h3>

The <b>proc</b> command creates a new Tcl procedure named
<i>name</i>, replacing any existing command or procedure there may
have been by that name. Whenever the new command is invoked, the
contents of <i>body</i> will be executed by the Tcl interpreter.
Normally, <i>name</i> is unqualified (does not include the names of
any containing namespaces), and the new procedure is created in the
current namespace. If <i>name</i> includes any namespace
qualifiers, the procedure is created in the specified namespace.
<i>Args</i> specifies the formal arguments to the procedure. It
consists of a list, possibly empty, each of whose elements
specifies one argument. Each argument specifier is also a list with
either one or two fields. If there is only a single field in the
specifier then it is the name of the argument; if there are two
fields, then the first is the argument name and the second is its
default value. Arguments with default values that are followed by
non-defaulted arguments become required arguments. In 8.6 this will
be considered an error. 

<p>When <i>name</i> is invoked a local variable will be created for
each of the formal arguments to the procedure; its value will be
the value of corresponding argument in the invoking command or the
argument's default value. Actual arguments are assigned to formal
arguments strictly in order. Arguments with default values need not
be specified in a procedure invocation. However, there must be
enough actual arguments for all the formal arguments that do not
have defaults, and there must not be any extra actual arguments.
Arguments with default values that are followed by non-defaulted
arguments become required arguments (in 8.6 it will be considered
an error). There is one special case to permit procedures with
variable numbers of arguments. If the last formal argument has the
name <b>args</b>, then a call to the procedure may contain more
actual arguments than the procedure has formals. In this case, all
of the actual arguments starting at the one that would be assigned
to <b>args</b> are combined into a list (as if the <b><a href=
"../TclCmd/list.htm">list</a></b> command had been used); this
combined value is assigned to the local variable <b>args</b>.</p>

<p>When <i>body</i> is being executed, variable names normally
refer to local variables, which are created automatically when
referenced and deleted when the procedure returns. One local
variable is automatically created for each of the procedure's
arguments. Other variables can only be accessed by invoking one of
the <b><a href="../TclCmd/global.htm">global</a></b>, <b><a href=
"../TclCmd/variable.htm">variable</a></b>, <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> or <b>namespace upvar</b>
commands.</p>

<p>The <b>proc</b> command returns an empty string. When a
procedure is invoked, the procedure's return value is the value
specified in a <b><a href="../TclCmd/return.htm">return</a></b>
command. If the procedure does not execute an explicit <b><a href=
"../TclCmd/return.htm">return</a></b>, then its return value is the
value of the last command executed in the procedure's body. If an
error occurs while executing the procedure body, then the
procedure-as-a-whole will return that same error.</p>

<h3><a name="M5">EXAMPLES</a></h3>

This is a procedure that accepts arbitrarily many arguments and
prints them out, one by one. 

<pre>
<b>proc</b> printArguments args {
   foreach arg $args {
      puts $arg
   }
}
</pre>

<p>This procedure is a bit like the <b><a href=
"../TclCmd/incr.htm">incr</a></b> command, except it multiplies the
contents of the named variable by the value, which defaults to
<b>2</b>:</p>

<pre>
<b>proc</b> mult {varName {multiplier 2}} {
   upvar 1 $varName var
   set var [expr {$var * $multiplier}]
}
</pre>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclCmd/info.htm">info</a></b>, <b><a href=
"../TclCmd/unknown.htm">unknown</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#argument">argument</a>, <a href=
"../Keywords/P.htm#procedure">procedure</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

