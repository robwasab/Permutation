<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Library Procedures - Tcl_Hash manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> Hash</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="Hash.htm#M2" name="L366">NAME</a> 

<dl>
<dd>Tcl_InitHashTable, Tcl_InitCustomHashTable,
Tcl_InitObjHashTable, Tcl_DeleteHashTable, Tcl_CreateHashEntry,
Tcl_DeleteHashEntry, Tcl_FindHashEntry, Tcl_GetHashValue,
Tcl_SetHashValue, Tcl_GetHashKey, Tcl_FirstHashEntry,
Tcl_NextHashEntry, Tcl_HashStats - procedures to manage hash
tables</dd>
</dl>
</dd>

<dd><a href="Hash.htm#M3" name="L367">SYNOPSIS</a></dd>

<dd><a href="Hash.htm#M4" name="L368">ARGUMENTS</a></dd>

<dd><a href="Hash.htm#M5" name="L369">DESCRIPTION</a> 

<dl class="description">
<dd><a href="Hash.htm#M6" name=
"L370"><b>TCL_STRING_KEYS</b></a></dd>

<dd><a href="Hash.htm#M7" name=
"L371"><b>TCL_ONE_WORD_KEYS</b></a></dd>

<dd><a href="Hash.htm#M8" name=
"L372"><b>TCL_CUSTOM_TYPE_KEYS</b></a></dd>

<dd><a href="Hash.htm#M9" name=
"L373"><b>TCL_CUSTOM_PTR_KEYS</b></a></dd>

<dd><a href="Hash.htm#M10" name="L374"><i>other</i></a></dd>
</dl>
</dd>

<dd><a href="Hash.htm#M11" name="L375">THE TCL_HASHKEYTYPE
STRUCTURE</a> 

<dl class="the tcl_hashkeytype structure">
<dd><a href="Hash.htm#M12" name=
"L376"><b>TCL_HASH_KEY_RANDOMIZE_HASH</b></a></dd>

<dd><a href="Hash.htm#M13" name=
"L377"><b>TCL_HASH_KEY_SYSTEM_HASH</b></a></dd>
</dl>
</dd>

<dd><a href="Hash.htm#M14" name="L378">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_InitHashTable, Tcl_InitCustomHashTable, Tcl_InitObjHashTable,
Tcl_DeleteHashTable, Tcl_CreateHashEntry, Tcl_DeleteHashEntry,
Tcl_FindHashEntry, Tcl_GetHashValue, Tcl_SetHashValue,
Tcl_GetHashKey, Tcl_FirstHashEntry, Tcl_NextHashEntry,
Tcl_HashStats - procedures to manage hash tables 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
<b>Tcl_InitHashTable</b>(<i>tablePtr, keyType</i>)<br>
<b>Tcl_InitCustomHashTable</b>(<i>tablePtr, keyType,
typePtr</i>)<br>
<b>Tcl_InitObjHashTable</b>(<i>tablePtr</i>)<br>
<b>Tcl_DeleteHashTable</b>(<i>tablePtr</i>)<br>
Tcl_HashEntry *<br>
<b>Tcl_CreateHashEntry</b>(<i>tablePtr, key, newPtr</i>)<br>
<b>Tcl_DeleteHashEntry</b>(<i>entryPtr</i>)<br>
Tcl_HashEntry *<br>
<b>Tcl_FindHashEntry</b>(<i>tablePtr, key</i>)<br>
ClientData<br>
<b>Tcl_GetHashValue</b>(<i>entryPtr</i>)<br>
<b>Tcl_SetHashValue</b>(<i>entryPtr, value</i>)<br>
char *<br>
<b>Tcl_GetHashKey</b>(<i>tablePtr, entryPtr</i>)<br>
Tcl_HashEntry *<br>
<b>Tcl_FirstHashEntry</b>(<i>tablePtr, searchPtr</i>)<br>
Tcl_HashEntry *<br>
<b>Tcl_NextHashEntry</b>(<i>searchPtr</i>)<br>
char *<br>
<b>Tcl_HashStats</b>(<i>tablePtr</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Tcl_HashTable <b>*tablePtr</b> (in)</dt>

<dd>Address of hash table structure (for all procedures but
<b>Tcl_InitHashTable</b>, this must have been initialized by
previous call to <b>Tcl_InitHashTable</b>).</dd>

<dt>int <b>keyType</b> (in)</dt>

<dd>Kind of keys to use for new hash table. Must be either
<b>TCL_STRING_KEYS</b>, <b>TCL_ONE_WORD_KEYS</b>,
<b>TCL_CUSTOM_TYPE_KEYS</b>, <b>TCL_CUSTOM_PTR_KEYS</b>, or an
integer value greater than 1.</dd>

<dt>Tcl_HashKeyType <b>*typePtr</b> (in)</dt>

<dd>Address of structure which defines the behaviour of the hash
table.</dd>

<dt>const char <b>*key</b> (in)</dt>

<dd>Key to use for probe into table. Exact form depends on
<i>keyType</i> used to create table.</dd>

<dt>int <b>*newPtr</b> (out)</dt>

<dd>The word at <i>*newPtr</i> is set to 1 if a new entry was
created and 0 if there was already an entry for <i>key</i>.</dd>

<dt>Tcl_HashEntry <b>*entryPtr</b> (in)</dt>

<dd>Pointer to hash table entry.</dd>

<dt>ClientData <b>value</b> (in)</dt>

<dd>New value to assign to hash table entry. Need not have type
ClientData, but must fit in same space as ClientData.</dd>

<dt>Tcl_HashSearch <b>*searchPtr</b> (in)</dt>

<dd>Pointer to record to use to keep track of progress in
enumerating all the entries in a hash table.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

A hash table consists of zero or more entries, each consisting of a
key and a value. Given the key for an entry, the hashing routines
can very quickly locate the entry, and hence its value. There may
be at most one entry in a hash table with a particular key, but
many entries may have the same value. Keys can take one of four
forms: strings, one-word values, integer arrays, or custom keys
defined by a Tcl_HashKeyType structure (See section <b>THE
TCL_HASHKEYTYPE STRUCTURE</b> below). All of the keys in a given
table have the same form, which is specified when the table is
initialized. 

<p>The value of a hash table entry can be anything that fits in the
same space as a &ldquo;char *&rdquo; pointer. Values for hash table
entries are managed entirely by clients, not by the hash module
itself. Typically each entry's value is a pointer to a data
structure managed by client code.</p>

<p>Hash tables grow gracefully as the number of entries increases,
so that there are always less than three entries per hash bucket,
on average. This allows for fast lookups regardless of the number
of entries in a table.</p>

<p>The core provides three functions for the initialization of hash
tables, Tcl_InitHashTable, Tcl_InitObjHashTable and
Tcl_InitCustomHashTable.</p>

<p><b>Tcl_InitHashTable</b> initializes a structure that describes
a new hash table. The space for the structure is provided by the
caller, not by the hash module. The value of <i>keyType</i>
indicates what kinds of keys will be used for all entries in the
table. All of the key types described later are allowed, with the
exception of <b>TCL_CUSTOM_TYPE_KEYS</b> and
<b>TCL_CUSTOM_PTR_KEYS</b>.</p>

<p><b>Tcl_InitObjHashTable</b> is a wrapper around
<b>Tcl_InitCustomHashTable</b> and initializes a hash table whose
keys are Tcl_Obj *.</p>

<p><b>Tcl_InitCustomHashTable</b> initializes a structure that
describes a new hash table. The space for the structure is provided
by the caller, not by the hash module. The value of <i>keyType</i>
indicates what kinds of keys will be used for all entries in the
table. <i>KeyType</i> must have one of the following values:</p>

<dl class="description">
<dt><a name="M6"><b>TCL_STRING_KEYS</b></a></dt>

<dd>Keys are null-terminated strings. They are passed to hashing
routines using the address of the first character of the
string.</dd>

<dt><a name="M7"><b>TCL_ONE_WORD_KEYS</b></a></dt>

<dd>Keys are single-word values; they are passed to hashing
routines and stored in hash table entries as &ldquo;char *&rdquo;
values. The pointer value is the key; it need not (and usually does
not) actually point to a string.</dd>

<dt><a name="M8"><b>TCL_CUSTOM_TYPE_KEYS</b></a></dt>

<dd>Keys are of arbitrary type, and are stored in the entry.
Hashing and comparison is determined by <i>typePtr</i>. The
Tcl_HashKeyType structure is described in the section <b>THE
TCL_HASHKEYTYPE STRUCTURE</b> below.</dd>

<dt><a name="M9"><b>TCL_CUSTOM_PTR_KEYS</b></a></dt>

<dd>Keys are pointers to an arbitrary type, and are stored in the
entry. Hashing and comparison is determined by <i>typePtr</i>. The
Tcl_HashKeyType structure is described in the section <b>THE
TCL_HASHKEYTYPE STRUCTURE</b> below.</dd>

<dt><a name="M10"><i>other</i></a></dt>

<dd>If <i>keyType</i> is not one of the above, then it must be an
integer value greater than 1. In this case the keys will be arrays
of &ldquo;int&rdquo; values, where <i>keyType</i> gives the number
of ints in each key. This allows structures to be used as keys. All
keys must have the same size. Array keys are passed into hashing
functions using the address of the first int in the array.</dd>
</dl>

<p><b>Tcl_DeleteHashTable</b> deletes all of the entries in a hash
table and frees up the memory associated with the table's bucket
array and entries. It does not free the actual table structure
(pointed to by <i>tablePtr</i>), since that memory is assumed to be
managed by the client. <b>Tcl_DeleteHashTable</b> also does not
free or otherwise manipulate the values of the hash table entries.
If the entry values point to dynamically-allocated memory, then it
is the client's responsibility to free these structures before
deleting the table.</p>

<p><b>Tcl_CreateHashEntry</b> locates the entry corresponding to a
particular key, creating a new entry in the table if there was not
already one with the given key. If an entry already existed with
the given key then <i>*newPtr</i> is set to zero. If a new entry
was created, then <i>*newPtr</i> is set to a non-zero value and the
value of the new entry will be set to zero. The return value from
<b>Tcl_CreateHashEntry</b> is a pointer to the entry, which may be
used to retrieve and modify the entry's value or to delete the
entry from the table.</p>

<p><b>Tcl_DeleteHashEntry</b> will remove an existing entry from a
table. The memory associated with the entry itself will be freed,
but the client is responsible for any cleanup associated with the
entry's value, such as freeing a structure that it points to.</p>

<p><b>Tcl_FindHashEntry</b> is similar to
<b>Tcl_CreateHashEntry</b> except that it does not create a new
entry if the key doesn't exist; instead, it returns NULL as
result.</p>

<p><b>Tcl_GetHashValue</b> and <b>Tcl_SetHashValue</b> are used to
read and write an entry's value, respectively. Values are stored
and retrieved as type &ldquo;ClientData&rdquo;, which is large
enough to hold a pointer value. On almost all machines this is
large enough to hold an integer value too.</p>

<p><b>Tcl_GetHashKey</b> returns the key for a given hash table
entry, either as a pointer to a string, a one-word (&ldquo;char
*&rdquo;) key, or as a pointer to the first word of an array of
integers, depending on the <i>keyType</i> used to create a hash
table. In all cases <b>Tcl_GetHashKey</b> returns a result with
type &ldquo;char *&rdquo;. When the key is a string or array, the
result of <b>Tcl_GetHashKey</b> points to information in the table
entry; this information will remain valid until the entry is
deleted or its table is deleted.</p>

<p><b>Tcl_FirstHashEntry</b> and <b>Tcl_NextHashEntry</b> may be
used to scan all of the entries in a hash table. A structure of
type &ldquo;Tcl_HashSearch&rdquo;, provided by the client, is used
to keep track of progress through the table.
<b>Tcl_FirstHashEntry</b> initializes the search record and returns
the first entry in the table (or NULL if the table is empty). Each
subsequent call to <b>Tcl_NextHashEntry</b> returns the next entry
in the table or NULL if the end of the table has been reached. A
call to <b>Tcl_FirstHashEntry</b> followed by calls to
<b>Tcl_NextHashEntry</b> will return each of the entries in the
table exactly once, in an arbitrary order. It is inadvisable to
modify the structure of the table, e.g. by creating or deleting
entries, while the search is in progress, with the exception of
deleting the entry returned by <b>Tcl_FirstHashEntry</b> or
<b>Tcl_NextHashEntry</b>.</p>

<p><b>Tcl_HashStats</b> returns a dynamically-allocated string with
overall information about a hash table, such as the number of
entries it contains, the number of buckets in its hash array, and
the utilization of the buckets. It is the caller's responsibility
to free the result string by passing it to <b><a href=
"../TclLib/Alloc.htm">ckfree</a></b>.</p>

<p>The header file <b>tcl.h</b> defines the actual data structures
used to implement hash tables. This is necessary so that clients
can allocate Tcl_HashTable structures and so that macros can be
used to read and write the values of entries. However, users of the
hashing routines should never refer directly to any of the fields
of any of the hash-related data structures; use the procedures and
macros defined here.</p>

<h3><a name="M11">THE TCL_HASHKEYTYPE STRUCTURE</a></h3>

Extension writers can define new hash key types by defining four
procedures, initializing a <b>Tcl_HashKeyType</b> structure to
describe the type, and calling <b>Tcl_InitCustomHashTable</b>. The
<b>Tcl_HashKeyType</b> structure is defined as follows: 

<pre>
typedef struct Tcl_HashKeyType {
    int <i>version</i>;
    int <i>flags</i>;
    Tcl_HashKeyProc *<i>hashKeyProc</i>;
    Tcl_CompareHashKeysProc *<i>compareKeysProc</i>;
    Tcl_AllocHashEntryProc *<i>allocEntryProc</i>;
    Tcl_FreeHashEntryProc *<i>freeEntryProc</i>;
} Tcl_HashKeyType;
</pre>

<p>The <i>version</i> member is the version of the table. If this
structure is extended in future then the version can be used to
distinguish between different structures. It should be set to
<b>TCL_HASH_KEY_TYPE_VERSION</b>.</p>

<p>The <i>flags</i> member is 0 or one or more of the following
values OR'ed together:</p>

<dl class="the tcl_hashkeytype structure">
<dt><a name="M12"><b>TCL_HASH_KEY_RANDOMIZE_HASH</b></a></dt>

<dd>There are some things, pointers for example which do not hash
well because they do not use the lower bits. If this flag is set
then the hash table will attempt to rectify this by randomizing the
bits and then using the upper N bits as the index into the
table.</dd>

<dt><a name="M13"><b>TCL_HASH_KEY_SYSTEM_HASH</b></a></dt>

<dd>This flag forces Tcl to use the memory allocation procedures
provided by the operating system when allocating and freeing memory
used to store the hash table data structures, and not any of Tcl's
own customized memory allocation routines. This is important if the
hash table is to be used in the implementation of a custom set of
allocation routines, or something that a custom set of allocation
routines might depend on, in order to avoid any circular
dependency.</dd>
</dl>

<p>The <i>hashKeyProc</i> member contains the address of a function
called to calculate a hash value for the key.</p>

<pre>
typedef unsigned int (Tcl_HashKeyProc) (
        Tcl_HashTable *<i>tablePtr</i>,
        void *<i>keyPtr</i>);
</pre>

If this is NULL then <i>keyPtr</i> is used and
<b>TCL_HASH_KEY_RANDOMIZE_HASH</b> is assumed. 

<p>The <i>compareKeysProc</i> member contains the address of a
function called to compare two keys.</p>

<pre>
typedef int (Tcl_CompareHashKeysProc) (
        void *<i>keyPtr</i>,
        Tcl_HashEntry *<i>hPtr</i>);
</pre>

If this is NULL then the <i>keyPtr</i> pointers are compared. If
the keys do not match then the function returns 0, otherwise it
returns 1. 

<p>The <i>allocEntryProc</i> member contains the address of a
function called to allocate space for an entry and initialize the
key and clientData.</p>

<pre>
typedef Tcl_HashEntry *(Tcl_AllocHashEntryProc) (
        Tcl_HashTable *<i>tablePtr</i>,
        void *<i>keyPtr</i>);
</pre>

If this is NULL then <a href="../TclLib/Alloc.htm">Tcl_Alloc</a> is
used to allocate enough space for a Tcl_HashEntry, the key pointer
is assigned to key.oneWordValue and the clientData is set to NULL.
String keys and array keys use this function to allocate enough
space for the entry and the key in one block, rather than doing it
in two blocks. This saves space for a pointer to the key from the
entry and another memory allocation. Tcl_Obj* keys use this
function to allocate enough space for an entry and increment the
reference count on the object. 

<p>The <i>freeEntryProc</i> member contains the address of a
function called to free space for an entry.</p>

<pre>
typedef void (Tcl_FreeHashEntryProc) (Tcl_HashEntry *<i>hPtr</i>);
</pre>

If this is NULL then <a href="../TclLib/Alloc.htm">Tcl_Free</a> is
used to free the space for the entry. Tcl_Obj* keys use this
function to decrement the reference count on the object. 

<h3><a name="M14">KEYWORDS</a></h3>

<a href="../Keywords/H.htm#hash table">hash table</a>, <a href=
"../Keywords/K.htm#key">key</a>, <a href=
"../Keywords/L.htm#lookup">lookup</a>, <a href=
"../Keywords/S.htm#search">search</a>, <a href=
"../Keywords/V.htm#value">value</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

