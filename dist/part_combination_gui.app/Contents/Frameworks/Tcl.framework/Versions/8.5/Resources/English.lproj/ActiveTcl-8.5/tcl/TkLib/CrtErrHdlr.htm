<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Library Procedures - Tk_CreateErrorHandler manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> CrtErrHdlr</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tk_CreateErrorHandler, Tk_DeleteErrorHandler - handle X protocol
errors 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
Tk_ErrorHandler<br>
<b>Tk_CreateErrorHandler</b>(<i>display, error, request, minor,
proc, clientData</i>)<br>
<b>Tk_DeleteErrorHandler</b>(<i>handler</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Display <b>*display</b> (in)</dt>

<dd>Display whose errors are to be handled.</dd>

<dt>int <b><a href="../TclCmd/error.htm">error</a></b> (in)</dt>

<dd>Match only error events with this value in the
<i>error_code</i> field. If -1, then match any <i>error_code</i>
value.</dd>

<dt>int <b>request</b> (in)</dt>

<dd>Match only error events with this value in the
<i>request_code</i> field. If -1, then match any
<i>request_code</i> value.</dd>

<dt>int <b>minor</b> (in)</dt>

<dd>Match only error events with this value in the
<i>minor_code</i> field. If -1, then match any <i>minor_code</i>
value.</dd>

<dt>Tk_ErrorProc <b>*proc</b> (in)</dt>

<dd>Procedure to invoke whenever an error event is received for
<i>display</i> and matches <i>error</i>, <i>request</i>, and
<i>minor</i>. NULL means ignore any matching errors.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary one-word value to pass to <i>proc</i>.</dd>

<dt>Tk_ErrorHandler <b>handler</b> (in)</dt>

<dd>Token for error handler to delete (return value from a previous
call to <b>Tk_CreateErrorHandler</b>).</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tk_CreateErrorHandler</b> arranges for a particular procedure
(<i>proc</i>) to be called whenever certain protocol errors occur
on a particular display (<i>display</i>). Protocol errors occur
when the X protocol is used incorrectly, such as attempting to map
a window that does not exist. See the Xlib documentation for
<b>XSetErrorHandler</b> for more information on the kinds of errors
that can occur. For <i>proc</i> to be invoked to handle a
particular error, five things must occur: 

<dl class="description">
<dt>[1]</dt>

<dd>The error must pertain to <i>display</i>.</dd>

<dt>[2]</dt>

<dd>Either the <i>error</i> argument to
<b>Tk_CreateErrorHandler</b> must have been -1, or the <i>error</i>
argument must match the <i>error_code</i> field from the error
event.</dd>

<dt>[3]</dt>

<dd>Either the <i>request</i> argument to
<b>Tk_CreateErrorHandler</b> must have been -1, or the
<i>request</i> argument must match the <i>request_code</i> field
from the error event.</dd>

<dt>[4]</dt>

<dd>Either the <i>minor</i> argument to
<b>Tk_CreateErrorHandler</b> must have been -1, or the <i>minor</i>
argument must match the <i>minor_code</i> field from the error
event.</dd>

<dt>[5]</dt>

<dd>The protocol request to which the error pertains must have been
made when the handler was active (see below for more
information).</dd>
</dl>

<p><i>Proc</i> should have arguments and result that match the
following type:</p>

<pre>
typedef int Tk_ErrorProc(
    ClientData <i>clientData</i>,
    XErrorEvent *<i>errEventPtr</i>);
</pre>

The <i>clientData</i> parameter to <i>proc</i> is a copy of the
<i>clientData</i> argument given to <b>Tcl_CreateErrorHandler</b>
when the callback was created. Typically, <i>clientData</i> points
to a data structure containing application-specific information
that is needed to deal with the error. <i>ErrEventPtr</i> is a
pointer to the X error event. The procedure <i>proc</i> should
return an integer value. If it returns 0 it means that <i>proc</i>
handled the error completely and there is no need to take any other
action for the error. If it returns non-zero it means <i>proc</i>
was unable to handle the error. 

<p>If a value of NULL is specified for <i>proc</i>, all matching
errors will be ignored: this will produce the same result as if a
procedure had been specified that always returns 0.</p>

<p>If more than more than one handler matches a particular error,
then they are invoked in turn. The handlers will be invoked in
reverse order of creation: most recently declared handler first. If
any handler returns 0, then subsequent (older) handlers will not be
invoked. If no handler returns 0, then Tk invokes X's default error
handler, which prints an error message and aborts the program. If
you wish to have a default handler that deals with errors that no
other handler can deal with, then declare it first.</p>

<p>The X documentation states that &ldquo;the error handler should
not call any functions (directly or indirectly) on the display that
will generate protocol requests or that will look for input
events.&rdquo; This restriction applies to handlers declared by
<b>Tk_CreateErrorHandler</b>; disobey it at your own risk.</p>

<p><b>Tk_DeleteErrorHandler</b> may be called to delete a
previously-created error handler. The <i>handler</i> argument
identifies the error handler, and should be a value returned by a
previous call to <b><a href=
"../TkLib/EventHndlr.htm">Tk_CreateEventHandler</a></b>.</p>

<p>A particular error handler applies to errors resulting from
protocol requests generated between the call to
<b>Tk_CreateErrorHandler</b> and the call to
<b>Tk_DeleteErrorHandler</b>. However, the actual callback to
<i>proc</i> may not occur until after the
<b>Tk_DeleteErrorHandler</b> call, due to buffering in the client
and server. If an error event pertains to a protocol request made
just before calling <b>Tk_DeleteErrorHandler</b>, then the error
event may not have been processed before the
<b>Tk_DeleteErrorHandler</b> call. When this situation arises, Tk
will save information about the handler and invoke the handler's
<i>proc</i> later when the error event finally arrives. If an
application wishes to delete an error handler and know for certain
that all relevant errors have been processed, it should first call
<b>Tk_DeleteErrorHandler</b> and then call <b>XSync</b>; this will
flush out any buffered requests and errors, but will result in a
performance penalty because it requires communication to and from
the X server. After the <b>XSync</b> call Tk is guaranteed not to
call any error handlers deleted before the <b>XSync</b> call.</p>

<p>For the Tk error handling mechanism to work properly, it is
essential that application code never calls <b>XSetErrorHandler</b>
directly; applications should use only
<b>Tk_CreateErrorHandler</b>.</p>

<h3><a name="M6">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#callback">callback</a>, <a href=
"../Keywords/E.htm#error">error</a>, <a href=
"../Keywords/E.htm#event">event</a>, <a href=
"../Keywords/H.htm#handler">handler</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1990 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

