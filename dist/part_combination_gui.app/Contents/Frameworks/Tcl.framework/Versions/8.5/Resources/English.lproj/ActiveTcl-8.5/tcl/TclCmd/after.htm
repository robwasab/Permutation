<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - after manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> after</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="after.htm#M2" name="L2">NAME</a> 

<dl>
<dd>after - Execute a command after a time delay</dd>
</dl>
</dd>

<dd><a href="after.htm#M3" name="L3">SYNOPSIS</a> 

<dl>
<dd><b>after</b> <i>ms</i></dd>

<dd><b>after</b> <i>ms</i> ?<i>script script script ...</i>?</dd>

<dd><b>after cancel</b> <i>id</i></dd>

<dd><b>after cancel</b> <i>script script script ...</i></dd>

<dd><b>after idle</b> ?<i>script script script ...</i>?</dd>

<dd><b>after info</b> ?<i>id</i>?</dd>
</dl>
</dd>

<dd><a href="after.htm#M4" name="L4">DESCRIPTION</a> 

<dl class="description">
<dd><a href="after.htm#M5" name="L5"><b>after</b>
<i>ms</i></a></dd>

<dd><a href="after.htm#M6" name="L6"><b>after</b> <i>ms</i>
?<i>script script script ...</i>?</a></dd>

<dd><a href="after.htm#M7" name="L7"><b>after cancel</b>
<i>id</i></a></dd>

<dd><a href="after.htm#M8" name="L8"><b>after cancel</b> <i>script
script ...</i></a></dd>

<dd><a href="after.htm#M9" name="L9"><b>after idle</b>
<i>script</i> ?<i>script script ...</i>?</a></dd>

<dd><a href="after.htm#M10" name="L10"><b>after info</b>
?<i>id</i>?</a></dd>
</dl>
</dd>

<dd><a href="after.htm#M11" name="L11">EXAMPLES</a></dd>

<dd><a href="after.htm#M12" name="L12">SEE ALSO</a></dd>

<dd><a href="after.htm#M13" name="L13">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

after - Execute a command after a time delay 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>after</b> <i>ms</i><br>
<b>after</b> <i>ms</i> ?<i>script script script ...</i>?<br>
<b>after cancel</b> <i>id</i><br>
<b>after cancel</b> <i>script script script ...</i><br>
<b>after idle</b> ?<i>script script script ...</i>?<br>
<b>after info</b> ?<i>id</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

This command is used to delay execution of the program or to
execute a command in background sometime in the future. It has
several forms, depending on the first argument to the command: 

<dl class="description">
<dt><a name="M5"><b>after</b> <i>ms</i></a></dt>

<dd><i>Ms</i> must be an integer giving a time in milliseconds. The
command sleeps for <i>ms</i> milliseconds and then returns. While
the command is sleeping the application does not respond to
events.</dd>

<dt><a name="M6"><b>after</b> <i>ms</i> ?<i>script script script
...</i>?</a></dt>

<dd>In this form the command returns immediately, but it arranges
for a Tcl command to be executed <i>ms</i> milliseconds later as an
event handler. The command will be executed exactly once, at the
given time. The delayed command is formed by concatenating all the
<i>script</i> arguments in the same fashion as the <b><a href=
"../TclCmd/concat.htm">concat</a></b> command. The command will be
executed at global level (outside the context of any Tcl
procedure). If an error occurs while executing the delayed command
then the background error will be reported by the command
registered with <b>interp bgerror</b>. The <b>after</b> command
returns an identifier that can be used to cancel the delayed
command using <b>after cancel</b>.</dd>

<dt><a name="M7"><b>after cancel</b> <i>id</i></a></dt>

<dd>Cancels the execution of a delayed command that was previously
scheduled. <i>Id</i> indicates which command should be canceled; it
must have been the return value from a previous <b>after</b>
command. If the command given by <i>id</i> has already been
executed then the <b>after cancel</b> command has no effect.</dd>

<dt><a name="M8"><b>after cancel</b> <i>script script
...</i></a></dt>

<dd>This command also cancels the execution of a delayed command.
The <i>script</i> arguments are concatenated together with space
separators (just as in the <b><a href=
"../TclCmd/concat.htm">concat</a></b> command). If there is a
pending command that matches the string, it is cancelled and will
never be executed; if no such command is currently pending then the
<b>after cancel</b> command has no effect.</dd>

<dt><a name="M9"><b>after idle</b> <i>script</i> ?<i>script script
...</i>?</a></dt>

<dd>Concatenates the <i>script</i> arguments together with space
separators (just as in the <b><a href=
"../TclCmd/concat.htm">concat</a></b> command), and arranges for
the resulting script to be evaluated later as an idle callback. The
script will be run exactly once, the next time the event loop is
entered and there are no events to process. The command returns an
identifier that can be used to cancel the delayed command using
<b>after cancel</b>. If an error occurs while executing the script
then the background error will be reported by the command
registered with <b>interp bgerror</b>.</dd>

<dt><a name="M10"><b>after info</b> ?<i>id</i>?</a></dt>

<dd>This command returns information about existing event handlers.
If no <i>id</i> argument is supplied, the command returns a list of
the identifiers for all existing event handlers created by the
<b>after</b> command for this interpreter. If <i>id</i> is
supplied, it specifies an existing handler; <i>id</i> must have
been the return value from some previous call to <b>after</b> and
it must not have triggered yet or been cancelled. In this case the
command returns a list with two elements. The first element of the
list is the script associated with <i>id</i>, and the second
element is either <b>idle</b> or <b>timer</b> to indicate what kind
of event handler it is.</dd>
</dl>

<p>The <b>after</b> <i>ms</i> and <b>after idle</b> forms of the
command assume that the application is event driven: the delayed
commands will not be executed unless the application enters the
event loop. In applications that are not normally event-driven,
such as <b><a href="../UserCmd/tclsh.htm">tclsh</a></b>, the event
loop can be entered with the <b><a href=
"../TclCmd/vwait.htm">vwait</a></b> and <b><a href=
"../TclCmd/update.htm">update</a></b> commands.</p>

<h3><a name="M11">EXAMPLES</a></h3>

This defines a command to make Tcl do nothing at all for <i>N</i>
seconds: 

<pre>
proc sleep {N} {
   <b>after</b> [expr {int($N * 1000)}]
}
</pre>

<p>This arranges for the command <i>wake_up</i> to be run in eight
hours (providing the event loop is active at that time):</p>

<pre>
<b>after</b> [expr {1000 * 60 * 60 * 8}] wake_up
</pre>

<p>The following command can be used to do long-running
calculations (as represented here by <i>::my_calc::one_step</i>,
which is assumed to return a boolean indicating whether another
step should be performed) in a step-by-step fashion, though the
calculation itself needs to be arranged so it can work step-wise.
This technique is extra careful to ensure that the event loop is
not starved by the rescheduling of processing steps (arranging for
the next step to be done using an already-triggered timer event
only when the event queue has been drained) and is useful when you
want to ensure that a Tk GUI remains responsive during a slow
task.</p>

<pre>
proc doOneStep {} {
   if {[::my_calc::one_step]} {
      <b>after idle</b> [list <b>after</b> 0 doOneStep]
   }
}
doOneStep
</pre>

<h3><a name="M12">SEE ALSO</a></h3>

<b><a href="../TclCmd/concat.htm">concat</a></b>, <b><a href=
"../TclCmd/interp.htm">interp</a></b>, <b><a href=
"../TclCmd/update.htm">update</a></b>, <b><a href=
"../TclCmd/vwait.htm">vwait</a></b> 

<h3><a name="M13">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#cancel">cancel</a>, <a href=
"../Keywords/D.htm#delay">delay</a>, <a href=
"../Keywords/I.htm#idle callback">idle callback</a>, <a href=
"../Keywords/S.htm#sleep">sleep</a>, <a href=
"../Keywords/T.htm#time">time</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1990-1994 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

