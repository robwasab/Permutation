<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - load manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> load</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="load.htm#M2" name="L847">NAME</a> 

<dl>
<dd>load - Load machine code and initialize new commands</dd>
</dl>
</dd>

<dd><a href="load.htm#M3" name="L848">SYNOPSIS</a> 

<dl>
<dd><b>load</b> <i>fileName</i></dd>

<dd><b>load</b> <i>fileName packageName</i></dd>

<dd><b>load</b> <i>fileName packageName interp</i></dd>
</dl>
</dd>

<dd><a href="load.htm#M4" name="L849">DESCRIPTION</a></dd>

<dd><a href="load.htm#M5" name="L850">PORTABILITY ISSUES</a> 

<dl class="portability issues">
<dd><a href="load.htm#M6" name="L851"><b>Windows</b></a></dd>
</dl>
</dd>

<dd><a href="load.htm#M7" name="L852">BUGS</a></dd>

<dd><a href="load.htm#M8" name="L853">EXAMPLE</a></dd>

<dd><a href="load.htm#M9" name="L854">SEE ALSO</a></dd>

<dd><a href="load.htm#M10" name="L855">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

load - Load machine code and initialize new commands 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>load</b> <i>fileName</i><br>
<b>load</b> <i>fileName packageName</i><br>
<b>load</b> <i>fileName packageName interp</i><br>
<h3><a name="M4">DESCRIPTION</a></h3>

This command loads binary code from a file into the application's
address space and calls an initialization procedure in the package
to incorporate it into an interpreter. <i>fileName</i> is the name
of the file containing the code; its exact form varies from system
to system but on most systems it is a shared library, such as a
<b>.so</b> file under Solaris or a DLL under Windows.
<i>packageName</i> is the name of the package, and is used to
compute the name of an initialization procedure. <i>interp</i> is
the path name of the interpreter into which to load the package
(see the <b><a href="../TclCmd/interp.htm">interp</a></b> manual
entry for details); if <i>interp</i> is omitted, it defaults to the
interpreter in which the <b>load</b> command was invoked. 

<p>Once the file has been loaded into the application's address
space, one of two initialization procedures will be invoked in the
new code. Typically the initialization procedure will add new
commands to a Tcl interpreter. The name of the initialization
procedure is determined by <i>packageName</i> and whether or not
the target interpreter is a safe one. For normal interpreters the
name of the initialization procedure will have the form
<i>pkg</i><b>_Init</b>, where <i>pkg</i> is the same as
<i>packageName</i> except that the first letter is converted to
upper case and all other letters are converted to lower case. For
example, if <i>packageName</i> is <b>foo</b> or <b>FOo</b>, the
initialization procedure's name will be <b>Foo_Init</b>.</p>

<p>If the target interpreter is a safe interpreter, then the name
of the initialization procedure will be <i>pkg</i><b>_SafeInit</b>
instead of <i>pkg</i><b>_Init</b>. The <i>pkg</i><b>_SafeInit</b>
function should be written carefully, so that it initializes the
safe interpreter only with partial functionality provided by the
package that is safe for use by untrusted code. For more
information on Safe-Tcl, see the <b>safe</b> manual entry.</p>

<p>The initialization procedure must match the following
prototype:</p>

<pre>
typedef int Tcl_PackageInitProc(<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>);
</pre>

The <i>interp</i> argument identifies the interpreter in which the
package is to be loaded. The initialization procedure must return
<b>TCL_OK</b> or <b>TCL_ERROR</b> to indicate whether or not it
completed successfully; in the event of an error it should set the
interpreter's result to point to an error message. The result of
the <b>load</b> command will be the result returned by the
initialization procedure. 

<p>The actual loading of a file will only be done once for each
<i>fileName</i> in an application. If a given <i>fileName</i> is
loaded into multiple interpreters, then the first <b>load</b> will
load the code and call the initialization procedure; subsequent
<b>load</b>s will call the initialization procedure without loading
the code again. For Tcl versions lower than 8.5, it is not possible
to unload or reload a package. From version 8.5 however, the <b><a
href="../TclCmd/unload.htm">unload</a></b> command allows the
unloading of libraries loaded with <b>load</b>, for libraries that
are aware of the Tcl's unloading mechanism.</p>

<p>The <b>load</b> command also supports packages that are
statically linked with the application, if those packages have been
registered by calling the <b><a href=
"../TclLib/StaticPkg.htm">Tcl_StaticPackage</a></b> procedure. If
<i>fileName</i> is an empty string, then <i>packageName</i> must be
specified.</p>

<p>If <i>packageName</i> is omitted or specified as an empty
string, Tcl tries to guess the name of the package. This may be
done differently on different platforms. The default guess, which
is used on most UNIX platforms, is to take the last element of
<i>fileName</i>, strip off the first three characters if they are
<b>lib</b>, and use any following alphabetic and underline
characters as the module name. For example, the command <b>load
libxyz4.2.so</b> uses the module name <b>xyz</b> and the command
<b>load bin/last.so {}</b> uses the module name <b>last</b>.</p>

<p>If <i>fileName</i> is an empty string, then <i>packageName</i>
must be specified. The <b>load</b> command first searches for a
statically loaded package (one that has been registered by calling
the <b><a href="../TclLib/StaticPkg.htm">Tcl_StaticPackage</a></b>
procedure) by that name; if one is found, it is used. Otherwise,
the <b>load</b> command searches for a dynamically loaded package
by that name, and uses it if it is found. If several different
files have been <b>load</b>ed with different versions of the
package, Tcl picks the file that was loaded first.</p>

<h3><a name="M5">PORTABILITY ISSUES</a></h3>

<dl class="portability issues">
<dt><a name="M6"><b>Windows</b></a></dt>

<dd>When a load fails with &ldquo;library not found&rdquo; error,
it is also possible that a dependent library was not found. To see
the dependent libraries, type &ldquo;dumpbin -imports
&lt;dllname&gt;&rdquo; in a DOS console to see what the library
must import. When loading a DLL in the current directory, Windows
will ignore &ldquo;./&rdquo; as a path specifier and use a search
heuristic to find the DLL instead. To avoid this, load the DLL
with: 

<pre>
<b>load</b> [file join [pwd] mylib.DLL]
</pre>
</dd>
</dl>

<h3><a name="M7">BUGS</a></h3>

If the same file is <b>load</b>ed by different <i>fileName</i>s, it
will be loaded into the process's address space multiple times. The
behavior of this varies from system to system (some systems may
detect the redundant loads, others may not). 

<h3><a name="M8">EXAMPLE</a></h3>

The following is a minimal extension: 

<pre>
#include &lt;tcl.h&gt;
#include &lt;stdio.h&gt;
static int fooCmd(ClientData clientData,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *interp, int objc, Tcl_Obj *const objv[]) {
    printf("called with %d arguments\n", objc);
    return TCL_OK;
}
int Foo_Init(<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *interp) {
    if (<a href=
"../TclLib/InitStubs.htm">Tcl_InitStubs</a>(interp, "8.1", 0) == NULL) {
    return TCL_ERROR;
    }
    printf("creating foo command");
    <a href=
"../TclLib/CrtObjCmd.htm">Tcl_CreateObjCommand</a>(interp, "foo", fooCmd, NULL, NULL);
    return TCL_OK;
}
</pre>

<p>When built into a shared/dynamic library with a suitable name
(e.g. <b>foo.dll</b> on Windows, <b>libfoo.so</b> on Solaris and
Linux) it can then be loaded into Tcl with the following:</p>

<pre>
# Load the extension
switch $tcl_platform(platform) {
   windows {
      <b>load</b> [file join [pwd] foo.dll]
   }
   unix {
      <b>load</b> [file join [pwd] libfoo[info sharedlibextension]]
   }
}

# Now execute the command defined by the extension
foo
</pre>

<h3><a name="M9">SEE ALSO</a></h3>

<b><a href="../TclCmd/info.htm">info sharedlibextension</a></b>,
<b><a href="../TclLib/StaticPkg.htm">Tcl_StaticPackage</a></b>,
<b>safe</b> 

<h3><a name="M10">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#binary code">binary code</a>, <a href=
"../Keywords/L.htm#loading">loading</a>, <a href=
"../Keywords/S.htm#safe interpreter">safe interpreter</a>, <a href=
"../Keywords/S.htm#shared library">shared library</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1995-1996 Sun Microsystems, Inc.</div>
</body>
</html>

