<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_ConfigureWidget manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> ConfigWidg</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="ConfigWidg.htm#M2" name="L46">NAME</a> 

<dl>
<dd>Tk_ConfigureWidget, Tk_ConfigureInfo, Tk_ConfigureValue,
Tk_FreeOptions - process configuration options for widgets</dd>
</dl>
</dd>

<dd><a href="ConfigWidg.htm#M3" name="L47">SYNOPSIS</a></dd>

<dd><a href="ConfigWidg.htm#M4" name="L48">ARGUMENTS</a></dd>

<dd><a href="ConfigWidg.htm#M5" name="L49">DESCRIPTION</a> 

<dl class="description">
<dd><a href="ConfigWidg.htm#M6" name=
"L50"><b>TK_CONFIG_ACTIVE_CURSOR</b></a></dd>

<dd><a href="ConfigWidg.htm#M7" name=
"L51"><b>TK_CONFIG_ANCHOR</b></a></dd>

<dd><a href="ConfigWidg.htm#M8" name=
"L52"><b>TK_CONFIG_BITMAP</b></a></dd>

<dd><a href="ConfigWidg.htm#M9" name=
"L53"><b>TK_CONFIG_BOOLEAN</b></a></dd>

<dd><a href="ConfigWidg.htm#M10" name=
"L54"><b>TK_CONFIG_BORDER</b></a></dd>

<dd><a href="ConfigWidg.htm#M11" name=
"L55"><b>TK_CONFIG_CAP_STYLE</b></a></dd>

<dd><a href="ConfigWidg.htm#M12" name=
"L56"><b>TK_CONFIG_COLOR</b></a></dd>

<dd><a href="ConfigWidg.htm#M13" name=
"L57"><b>TK_CONFIG_CURSOR</b></a></dd>

<dd><a href="ConfigWidg.htm#M14" name=
"L58"><b>TK_CONFIG_CUSTOM</b></a></dd>

<dd><a href="ConfigWidg.htm#M15" name=
"L59"><b>TK_CONFIG_DOUBLE</b></a></dd>

<dd><a href="ConfigWidg.htm#M16" name=
"L60"><b>TK_CONFIG_END</b></a></dd>

<dd><a href="ConfigWidg.htm#M17" name=
"L61"><b>TK_CONFIG_FONT</b></a></dd>

<dd><a href="ConfigWidg.htm#M18" name=
"L62"><b>TK_CONFIG_INT</b></a></dd>

<dd><a href="ConfigWidg.htm#M19" name=
"L63"><b>TK_CONFIG_JOIN_STYLE</b></a></dd>

<dd><a href="ConfigWidg.htm#M20" name=
"L64"><b>TK_CONFIG_JUSTIFY</b></a></dd>

<dd><a href="ConfigWidg.htm#M21" name=
"L65"><b>TK_CONFIG_MM</b></a></dd>

<dd><a href="ConfigWidg.htm#M22" name=
"L66"><b>TK_CONFIG_PIXELS</b></a></dd>

<dd><a href="ConfigWidg.htm#M23" name=
"L67"><b>TK_CONFIG_RELIEF</b></a></dd>

<dd><a href="ConfigWidg.htm#M24" name=
"L68"><b>TK_CONFIG_STRING</b></a></dd>

<dd><a href="ConfigWidg.htm#M25" name=
"L69"><b>TK_CONFIG_SYNONYM</b></a></dd>

<dd><a href="ConfigWidg.htm#M26" name=
"L70"><b>TK_CONFIG_UID</b></a></dd>

<dd><a href="ConfigWidg.htm#M27" name=
"L71"><b>TK_CONFIG_WINDOW</b></a></dd>
</dl>
</dd>

<dd><a href="ConfigWidg.htm#M28" name="L72">GROUPED
ENTRIES</a></dd>

<dd><a href="ConfigWidg.htm#M29" name="L73">FLAGS</a> 

<dl class="flags">
<dd><a href="ConfigWidg.htm#M30" name=
"L74"><b>TK_CONFIG_COLOR_ONLY</b></a></dd>

<dd><a href="ConfigWidg.htm#M31" name=
"L75"><b>TK_CONFIG_MONO_ONLY</b></a></dd>

<dd><a href="ConfigWidg.htm#M32" name=
"L76"><b>TK_CONFIG_NULL_OK</b></a></dd>

<dd><a href="ConfigWidg.htm#M33" name=
"L77"><b>TK_CONFIG_DONT_SET_DEFAULT</b></a></dd>

<dd><a href="ConfigWidg.htm#M34" name=
"L78"><b>TK_CONFIG_OPTION_SPECIFIED</b></a></dd>
</dl>
</dd>

<dd><a href="ConfigWidg.htm#M35" name="L79">TK_OFFSET</a></dd>

<dd><a href="ConfigWidg.htm#M36" name=
"L80">TK_CONFIGUREINFO</a></dd>

<dd><a href="ConfigWidg.htm#M37" name=
"L81">TK_CONFIGUREVALUE</a></dd>

<dd><a href="ConfigWidg.htm#M38" name="L82">TK_FREEOPTIONS</a></dd>

<dd><a href="ConfigWidg.htm#M39" name="L83">CUSTOM OPTION
TYPES</a></dd>

<dd><a href="ConfigWidg.htm#M40" name="L84">EXAMPLES</a></dd>

<dd><a href="ConfigWidg.htm#M41" name="L85">SEE ALSO</a></dd>

<dd><a href="ConfigWidg.htm#M42" name="L86">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tk_ConfigureWidget, Tk_ConfigureInfo, Tk_ConfigureValue,
Tk_FreeOptions - process configuration options for widgets 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
int<br>
<b>Tk_ConfigureWidget(</b><i>interp, tkwin, specs, argc, argv,
widgRec, flags</i><b>)</b><br>
int<br>
<b>Tk_ConfigureInfo(</b><i>interp, tkwin, specs, widgRec, argvName,
flags</i><b>)</b><br>
int<br>
<b>Tk_ConfigureValue(</b><i>interp, tkwin, specs, widgRec,
argvName, flags</i><b>)</b><br>
<b>Tk_FreeOptions(</b><i>specs, widgRec, display,
flags</i><b>)</b><br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter to use for returning error messages.</dd>

<dt>Tk_Window <b>tkwin</b> (in)</dt>

<dd>Window used to represent widget (needed to set up X
resources).</dd>

<dt>Tk_ConfigSpec <b>*specs</b> (in)</dt>

<dd>Pointer to table specifying legal configuration options for
this widget.</dd>

<dt>int <b>argc</b> (in)</dt>

<dd>Number of arguments in <i>argv</i>.</dd>

<dt>const char <b>**argv</b> (in)</dt>

<dd>Command-line options for configuring widget.</dd>

<dt>char <b>*widgRec</b> (in/out)</dt>

<dd>Points to widget record structure. Fields in this structure get
modified by <b>Tk_ConfigureWidget</b> to hold configuration
information.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>If non-zero, then it specifies an OR-ed combination of flags
that control the processing of configuration information.
<b>TK_CONFIG_ARGV_ONLY</b> causes the option database and defaults
to be ignored, and flag bits <b>TK_CONFIG_USER_BIT</b> and higher
are used to selectively disable entries in <i>specs</i>.</dd>

<dt>type name <b>type</b> (in)</dt>

<dd>The name of the type of a widget record.</dd>

<dt>field name <b>field</b> (in)</dt>

<dd>The name of a field in records of type <i>type</i>.</dd>

<dt>const char <b>*argvName</b> (in)</dt>

<dd>The name used on Tcl command lines to refer to a particular
option (e.g. when creating a widget or invoking the
<b>configure</b> widget command). If non-NULL, then information is
returned only for this option. If NULL, then information is
returned for all available options.</dd>

<dt>Display <b>*display</b> (in)</dt>

<dd>Display containing widget whose record is being freed; needed
in order to free up resources.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

Note: <b>Tk_ConfigureWidget</b> should be replaced with the new
<b>Tcl_Obj</b> based API <b><a href=
"../TkLib/SetOptions.htm">Tk_SetOptions</a></b>. The old interface
is retained for backward compatibility. 

<p><b>Tk_ConfigureWidget</b> is called to configure various aspects
of a widget, such as colors, fonts, border width, etc. It is
intended as a convenience procedure to reduce the amount of code
that must be written in individual widget managers to handle
configuration information. It is typically invoked when widgets are
created, and again when the <b>configure</b> command is invoked for
a widget. Although intended primarily for widgets,
<b>Tk_ConfigureWidget</b> can be used in other situations where
<i>argc-argv</i> information is to be used to fill in a record
structure, such as configuring graphical elements for a canvas
widget or entries of a menu.</p>

<p><b>Tk_ConfigureWidget</b> processes a table specifying the
configuration options that are supported (<i>specs</i>) and a
collection of command-line arguments (<i>argc</i> and <i>argv</i>)
to fill in fields of a record (<i>widgRec</i>). It uses the option
database and defaults specified in <i>specs</i> to fill in fields
of <i>widgRec</i> that are not specified in <i>argv</i>.
<b>Tk_ConfigureWidget</b> normally returns the value <b>TCL_OK</b>;
in this case it does not modify <i>interp</i>. If an error occurs
then <b>TCL_ERROR</b> is returned and <b>Tk_ConfigureWidget</b>
will leave an error message in <i>interp-&gt;result</i> in the
standard Tcl fashion. In the event of an error return, some of the
fields of <i>widgRec</i> could already have been set, if
configuration information for them was successfully processed
before the error occurred. The other fields will be set to
reasonable initial values so that <b>Tk_FreeOptions</b> can be
called for cleanup.</p>

<p>The <i>specs</i> array specifies the kinds of configuration
options expected by the widget. Each of its entries specifies one
configuration option and has the following structure:</p>

<pre>
typedef struct {
    int <i>type</i>;
    char *<i>argvName</i>;
    char *<i>dbName</i>;
    char *<i>dbClass</i>;
    char *<i>defValue</i>;
    int <i>offset</i>;
    int <i>specFlags</i>;
    Tk_CustomOption *<i>customPtr</i>;
} Tk_ConfigSpec;
</pre>

The <i>type</i> field indicates what type of configuration option
this is (e.g. <b>TK_CONFIG_COLOR</b> for a color value, or
<b>TK_CONFIG_INT</b> for an integer value). The <i>type</i> field
indicates how to use the value of the option (more on this below).
The <i>argvName</i> field is a string such as &ldquo;-font&rdquo;
or &ldquo;-bg&rdquo;, which is compared with the values in
<i>argv</i> (if <i>argvName</i> is NULL it means this is a grouped
entry; see <b>GROUPED ENTRIES</b> below). The <i>dbName</i> and
<i>dbClass</i> fields are used to look up a value for this option
in the option database. The <i>defValue</i> field specifies a
default value for this configuration option if no value is
specified in either <i>argv</i> or the option database.
<i>Offset</i> indicates where in <i>widgRec</i> to store
information about this option, and <i>specFlags</i> contains
additional information to control the processing of this
configuration option (see FLAGS below). The last field,
<i>customPtr</i>, is only used if <i>type</i> is
<b>TK_CONFIG_CUSTOM</b>; see CUSTOM OPTION TYPES below. 

<p><b>Tk_ConfigureWidget</b> first processes <i>argv</i> to see
which (if any) configuration options are specified there.
<i>Argv</i> must contain an even number of fields; the first of
each pair of fields must match the <i>argvName</i> of some entry in
<i>specs</i> (unique abbreviations are acceptable), and the second
field of the pair contains the value for that configuration option.
If there are entries in <i>spec</i> for which there were no
matching entries in <i>argv</i>, <b>Tk_ConfigureWidget</b> uses the
<i>dbName</i> and <i>dbClass</i> fields of the <i>specs</i> entry
to probe the option database; if a value is found, then it is used
as the value for the option. Finally, if no entry is found in the
option database, the <i>defValue</i> field of the <i>specs</i>
entry is used as the value for the configuration option. If the
<i>defValue</i> is NULL, or if the
<b>TK_CONFIG_DONT_SET_DEFAULT</b> bit is set in <i>flags</i>, then
there is no default value and this <i>specs</i> entry will be
ignored if no value is specified in <i>argv</i> or the option
database.</p>

<p>Once a string value has been determined for a configuration
option, <b>Tk_ConfigureWidget</b> translates the string value into
a more useful form, such as a color if <i>type</i> is
<b>TK_CONFIG_COLOR</b> or an integer if <i>type</i> is
<b>TK_CONFIG_INT</b>. This value is then stored in the record
pointed to by <i>widgRec</i>. This record is assumed to contain
information relevant to the manager of the widget; its exact type
is unknown to <b>Tk_ConfigureWidget</b>. The <i>offset</i> field of
each <i>specs</i> entry indicates where in <i>widgRec</i> to store
the information about this configuration option. You should use the
<b><a href="../TkLib/SetOptions.htm">Tk_Offset</a></b> macro to
generate <i>offset</i> values (see below for a description of <b><a
href="../TkLib/SetOptions.htm">Tk_Offset</a></b>). The location
indicated by <i>widgRec</i> and <i>offset</i> will be referred to
as the &ldquo;target&rdquo; in the descriptions below.</p>

<p>The <i>type</i> field of each entry in <i>specs</i> determines
what to do with the string value of that configuration option. The
legal values for <i>type</i>, and the corresponding actions,
are:</p>

<dl class="description">
<dt><a name="M6"><b>TK_CONFIG_ACTIVE_CURSOR</b></a></dt>

<dd>The value must be an ASCII string identifying a cursor in a
form suitable for passing to <b><a href=
"../TkLib/GetCursor.htm">Tk_GetCursor</a></b>. The value is
converted to a <b>Tk_Cursor</b> by calling <b><a href=
"../TkLib/GetCursor.htm">Tk_GetCursor</a></b> and the result is
stored in the target. In addition, the resulting cursor is made the
active cursor for <i>tkwin</i> by calling <b>XDefineCursor</b>. If
<b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the
value may be an empty string, in which case the target and
<i>tkwin</i>'s active cursor will be set to <b>None</b>. If the
previous value of the target was not <b>None</b>, then it is freed
by passing it to <b><a href=
"../TkLib/GetCursor.htm">Tk_FreeCursor</a></b>.</dd>

<dt><a name="M7"><b>TK_CONFIG_ANCHOR</b></a></dt>

<dd>The value must be an ASCII string identifying an anchor point
in one of the ways accepted by <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchor</a></b>. The string is
converted to a <b>Tk_Anchor</b> by calling <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchor</a></b> and the result is
stored in the target.</dd>

<dt><a name="M8"><b>TK_CONFIG_BITMAP</b></a></dt>

<dd>The value must be an ASCII string identifying a bitmap in a
form suitable for passing to <b><a href=
"../TkLib/GetBitmap.htm">Tk_GetBitmap</a></b>. The value is
converted to a <b>Pixmap</b> by calling <b><a href=
"../TkLib/GetBitmap.htm">Tk_GetBitmap</a></b> and the result is
stored in the target. If <b>TK_CONFIG_NULL_OK</b> is specified in
<i>specFlags</i> then the value may be an empty string, in which
case the target is set to <b>None</b>. If the previous value of the
target was not <b>None</b>, then it is freed by passing it to <b><a
href="../TkLib/GetBitmap.htm">Tk_FreeBitmap</a></b>.</dd>

<dt><a name="M9"><b>TK_CONFIG_BOOLEAN</b></a></dt>

<dd>The value must be an ASCII string specifying a boolean value.
Any of the values &ldquo;true&rdquo;, &ldquo;yes&rdquo;,
&ldquo;on&rdquo;, or &ldquo;1&rdquo;, or an abbreviation of one of
these values, means true; any of the values &ldquo;false&rdquo;,
&ldquo;no&rdquo;, &ldquo;off&rdquo;, or &ldquo;0&rdquo;, or an
abbreviation of one of these values, means false. The target is
expected to be an integer; for true values it will be set to 1 and
for false values it will be set to 0.</dd>

<dt><a name="M10"><b>TK_CONFIG_BORDER</b></a></dt>

<dd>The value must be an ASCII string identifying a border color in
a form suitable for passing to <b><a href=
"../TkLib/3DBorder.htm">Tk_Get3DBorder</a></b>. The value is
converted to a (<b>Tk_3DBorder *</b>) by calling <b><a href=
"../TkLib/3DBorder.htm">Tk_Get3DBorder</a></b> and the result is
stored in the target. If <b>TK_CONFIG_NULL_OK</b> is specified in
<i>specFlags</i> then the value may be an empty string, in which
case the target will be set to NULL. If the previous value of the
target was not NULL, then it is freed by passing it to <b><a href=
"../TkLib/3DBorder.htm">Tk_Free3DBorder</a></b>.</dd>

<dt><a name="M11"><b>TK_CONFIG_CAP_STYLE</b></a></dt>

<dd>The value must be an ASCII string identifying a cap style in
one of the ways accepted by <b><a href=
"../TkLib/GetCapStyl.htm">Tk_GetCapStyle</a></b>. The string is
converted to an integer value corresponding to the cap style by
calling <b><a href="../TkLib/GetCapStyl.htm">Tk_GetCapStyle</a></b>
and the result is stored in the target.</dd>

<dt><a name="M12"><b>TK_CONFIG_COLOR</b></a></dt>

<dd>The value must be an ASCII string identifying a color in a form
suitable for passing to <b><a href=
"../TkLib/GetColor.htm">Tk_GetColor</a></b>. The value is converted
to an (<b>XColor *</b>) by calling <b><a href=
"../TkLib/GetColor.htm">Tk_GetColor</a></b> and the result is
stored in the target. If <b>TK_CONFIG_NULL_OK</b> is specified in
<i>specFlags</i> then the value may be an empty string, in which
case the target will be set to <b>None</b>. If the previous value
of the target was not NULL, then it is freed by passing it to <b><a
href="../TkLib/GetColor.htm">Tk_FreeColor</a></b>.</dd>

<dt><a name="M13"><b>TK_CONFIG_CURSOR</b></a></dt>

<dd>This option is identical to <b>TK_CONFIG_ACTIVE_CURSOR</b>
except that the new cursor is not made the active one for
<i>tkwin</i>.</dd>

<dt><a name="M14"><b>TK_CONFIG_CUSTOM</b></a></dt>

<dd>This option allows applications to define new option types. The
<i>customPtr</i> field of the entry points to a structure defining
the new option type. See the section <b>CUSTOM OPTION TYPES</b>
below for details.</dd>

<dt><a name="M15"><b>TK_CONFIG_DOUBLE</b></a></dt>

<dd>The value must be an ASCII floating-point number in the format
accepted by <b>strtol</b>. The string is converted to a
<b>double</b> value, and the value is stored in the target.</dd>

<dt><a name="M16"><b>TK_CONFIG_END</b></a></dt>

<dd>Marks the end of the table. The last entry in <i>specs</i> must
have this type; all of its other fields are ignored and it will
never match any arguments.</dd>

<dt><a name="M17"><b>TK_CONFIG_FONT</b></a></dt>

<dd>The value must be an ASCII string identifying a font in a form
suitable for passing to <b><a href=
"../TkLib/GetFont.htm">Tk_GetFont</a></b>. The value is converted
to a <b>Tk_Font</b> by calling <b><a href=
"../TkLib/GetFont.htm">Tk_GetFont</a></b> and the result is stored
in the target. If <b>TK_CONFIG_NULL_OK</b> is specified in
<i>specFlags</i> then the value may be an empty string, in which
case the target will be set to NULL. If the previous value of the
target was not NULL, then it is freed by passing it to <b><a href=
"../TkLib/GetFont.htm">Tk_FreeFont</a></b>.</dd>

<dt><a name="M18"><b>TK_CONFIG_INT</b></a></dt>

<dd>The value must be an ASCII integer string in the format
accepted by <b>strtol</b> (e.g. &ldquo;0&rdquo; and
&ldquo;0x&rdquo; prefixes may be used to specify octal or
hexadecimal numbers, respectively). The string is converted to an
integer value and the integer is stored in the target.</dd>

<dt><a name="M19"><b>TK_CONFIG_JOIN_STYLE</b></a></dt>

<dd>The value must be an ASCII string identifying a join style in
one of the ways accepted by <b><a href=
"../TkLib/GetJoinStl.htm">Tk_GetJoinStyle</a></b>. The string is
converted to an integer value corresponding to the join style by
calling <b><a href=
"../TkLib/GetJoinStl.htm">Tk_GetJoinStyle</a></b> and the result is
stored in the target.</dd>

<dt><a name="M20"><b>TK_CONFIG_JUSTIFY</b></a></dt>

<dd>The value must be an ASCII string identifying a justification
method in one of the ways accepted by <b><a href=
"../TkLib/GetJustify.htm">Tk_GetJustify</a></b>. The string is
converted to a <b>Tk_Justify</b> by calling <b><a href=
"../TkLib/GetJustify.htm">Tk_GetJustify</a></b> and the result is
stored in the target.</dd>

<dt><a name="M21"><b>TK_CONFIG_MM</b></a></dt>

<dd>The value must specify a screen distance in one of the forms
acceptable to <b><a href=
"../TkLib/GetPixels.htm">Tk_GetScreenMM</a></b>. The string is
converted to double-precision floating-point distance in
millimeters and the value is stored in the target.</dd>

<dt><a name="M22"><b>TK_CONFIG_PIXELS</b></a></dt>

<dd>The value must specify screen units in one of the forms
acceptable to <b><a href=
"../TkLib/GetPixels.htm">Tk_GetPixels</a></b>. The string is
converted to an integer distance in pixels and the value is stored
in the target.</dd>

<dt><a name="M23"><b>TK_CONFIG_RELIEF</b></a></dt>

<dd>The value must be an ASCII string identifying a relief in a
form suitable for passing to <b><a href=
"../TkLib/GetRelief.htm">Tk_GetRelief</a></b>. The value is
converted to an integer relief value by calling <b><a href=
"../TkLib/GetRelief.htm">Tk_GetRelief</a></b> and the result is
stored in the target.</dd>

<dt><a name="M24"><b>TK_CONFIG_STRING</b></a></dt>

<dd>A copy of the value is made by allocating memory space with
<b><a href="../TclLib/Alloc.htm">Tcl_Alloc</a></b> and copying the
value into the dynamically-allocated space. A pointer to the new
string is stored in the target. If <b>TK_CONFIG_NULL_OK</b> is
specified in <i>specFlags</i> then the value may be an empty
string, in which case the target will be set to NULL. If the
previous value of the target was not NULL, then it is freed by
passing it to <b><a href=
"../TclLib/Alloc.htm">Tcl_Free</a></b>.</dd>

<dt><a name="M25"><b>TK_CONFIG_SYNONYM</b></a></dt>

<dd>This <i>type</i> value identifies special entries in
<i>specs</i> that are synonyms for other entries. If an <i>argv</i>
value matches the <i>argvName</i> of a <b>TK_CONFIG_SYNONYM</b>
entry, the entry is not used directly. Instead,
<b>Tk_ConfigureWidget</b> searches <i>specs</i> for another entry
whose <i>argvName</i> is the same as the <i>dbName</i> field in the
<b>TK_CONFIG_SYNONYM</b> entry; this new entry is used just as if
its <i>argvName</i> had matched the <i>argv</i> value. The synonym
mechanism allows multiple <i>argv</i> values to be used for a
single configuration option, such as &ldquo;-background&rdquo; and
&ldquo;-bg&rdquo;.</dd>

<dt><a name="M26"><b>TK_CONFIG_UID</b></a></dt>

<dd>The value is translated to a <b><a href=
"../TkLib/GetUid.htm">Tk_Uid</a></b> (by passing it to <b><a href=
"../TkLib/GetUid.htm">Tk_GetUid</a></b>). The resulting value is
stored in the target. If <b>TK_CONFIG_NULL_OK</b> is specified in
<i>specFlags</i> and the value is an empty string then the target
will be set to NULL.</dd>

<dt><a name="M27"><b>TK_CONFIG_WINDOW</b></a></dt>

<dd>The value must be a window path name. It is translated to a
<b>Tk_Window</b> token and the token is stored in the target.</dd>
</dl>

<h3><a name="M28">GROUPED ENTRIES</a></h3>

In some cases it is useful to generate multiple resources from a
single configuration value. For example, a color name might be used
both to generate the background color for a widget (using
<b>TK_CONFIG_COLOR</b>) and to generate a 3-D border to draw around
the widget (using <b>TK_CONFIG_BORDER</b>). In cases like this it
is possible to specify that several consecutive entries in
<i>specs</i> are to be treated as a group. The first entry is used
to determine a value (using its <i>argvName</i>, <i>dbName</i>,
<i>dbClass</i>, and <i>defValue</i> fields). The value will be
processed several times (one for each entry in the group),
generating multiple different resources and modifying multiple
targets within <i>widgRec</i>. Each of the entries after the first
must have a NULL value in its <i>argvName</i> field; this indicates
that the entry is to be grouped with the entry that precedes it.
Only the <i>type</i> and <i>offset</i> fields are used from these
follow-on entries. 

<h3><a name="M29">FLAGS</a></h3>

The <i>flags</i> argument passed to <b>Tk_ConfigureWidget</b> is
used in conjunction with the <i>specFlags</i> fields in the entries
of <i>specs</i> to provide additional control over the processing
of configuration options. These values are used in three different
ways as described below. 

<p>First, if the <i>flags</i> argument to <b>Tk_ConfigureWidget</b>
has the <b>TK_CONFIG_ARGV_ONLY</b> bit set (i.e., <i>flags</i> |
<b>TK_CONFIG_ARGV_ONLY</b> != 0), then the option database and
<i>defValue</i> fields are not used. In this case, if an entry in
<i>specs</i> does not match a field in <i>argv</i> then nothing
happens: the corresponding target is not modified. This feature is
useful when the goal is to modify certain configuration options
while leaving others in their current state, such as when a
<b>configure</b> widget command is being processed.</p>

<p>Second, the <i>specFlags</i> field of an entry in <i>specs</i>
may be used to control the processing of that entry. Each
<i>specFlags</i> field may consists of an OR-ed combination of the
following values:</p>

<dl class="flags">
<dt><a name="M30"><b>TK_CONFIG_COLOR_ONLY</b></a></dt>

<dd>If this bit is set then the entry will only be considered if
the display for <i>tkwin</i> has more than one bit plane. If the
display is monochromatic then this <i>specs</i> entry will be
ignored.</dd>

<dt><a name="M31"><b>TK_CONFIG_MONO_ONLY</b></a></dt>

<dd>If this bit is set then the entry will only be considered if
the display for <i>tkwin</i> has exactly one bit plane. If the
display is not monochromatic then this <i>specs</i> entry will be
ignored.</dd>

<dt><a name="M32"><b>TK_CONFIG_NULL_OK</b></a></dt>

<dd>This bit is only relevant for some types of entries (see the
descriptions of the various entry types above). If this bit is set,
it indicates that an empty string value for the field is acceptable
and if it occurs then the target should be set to NULL or
<b>None</b>, depending on the type of the target. This flag is
typically used to allow a feature to be turned off entirely, e.g.
set a cursor value to <b>None</b> so that a window simply inherits
its parent's cursor. If this bit is not set then empty strings are
processed as strings, which generally results in an error.</dd>

<dt><a name="M33"><b>TK_CONFIG_DONT_SET_DEFAULT</b></a></dt>

<dd>If this bit is one, it means that the <i>defValue</i> field of
the entry should only be used for returning the default value in
<b>Tk_ConfigureInfo</b>. In calls to <b>Tk_ConfigureWidget</b> no
default will be supplied for entries with this flag set; it is
assumed that the caller has already supplied a default value in the
target location. This flag provides a performance optimization
where it is expensive to process the default string: the client can
compute the default once, save the value, and provide it before
calling <b>Tk_ConfigureWidget</b>.</dd>

<dt><a name="M34"><b>TK_CONFIG_OPTION_SPECIFIED</b></a></dt>

<dd>This bit is deprecated. It used to be set and cleared by
<b>Tk_ConfigureWidget</b> so that callers could detect what entries
were specified in <i>argv</i>, but it was removed because it was
inherently thread-unsafe. Code that wishes to detect what options
were specified should use <b><a href=
"../TkLib/SetOptions.htm">Tk_SetOptions</a></b> instead.</dd>
</dl>

<p>The <b>TK_CONFIG_MONO_ONLY</b> and <b>TK_CONFIG_COLOR_ONLY</b>
flags are typically used to specify different default values for
monochrome and color displays. This is done by creating two entries
in <i>specs</i> that are identical except for their <i>defValue</i>
and <i>specFlags</i> fields. One entry should have the value
<b>TK_CONFIG_MONO_ONLY</b> in its <i>specFlags</i> and the default
value for monochrome displays in its <i>defValue</i>; the other
entry should have the value <b>TK_CONFIG_COLOR_ONLY</b> in its
<i>specFlags</i> and the appropriate <i>defValue</i> for color
displays.</p>

<p>Third, it is possible to use <i>flags</i> and <i>specFlags</i>
together to selectively disable some entries. This feature is not
needed very often. It is useful in cases where several similar
kinds of widgets are implemented in one place. It allows a single
<i>specs</i> table to be created with all the configuration options
for all the widget types. When processing a particular widget type,
only entries relevant to that type will be used. This effect is
achieved by setting the high-order bits (those in positions equal
to or greater than <b>TK_CONFIG_USER_BIT</b>) in <i>specFlags</i>
values or in <i>flags</i>. In order for a particular entry in
<i>specs</i> to be used, its high-order bits must match exactly the
high-order bits of the <i>flags</i> value passed to
<b>Tk_ConfigureWidget</b>. If a <i>specs</i> table is being used
for N different widget types, then N of the high-order bits will be
used. Each <i>specs</i> entry will have one of more of those bits
set in its <i>specFlags</i> field to indicate the widget types for
which this entry is valid. When calling <b>Tk_ConfigureWidget</b>,
<i>flags</i> will have a single one of these bits set to select the
entries for the desired widget type. For a working example of this
feature, see the code in tkButton.c.</p>

<h3><a name="M35">TK_OFFSET</a></h3>

The <b><a href="../TkLib/SetOptions.htm">Tk_Offset</a></b> macro is
provided as a safe way of generating the <i>offset</i> values for
entries in Tk_ConfigSpec structures. It takes two arguments: the
name of a type of record, and the name of a field in that record.
It returns the byte offset of the named field in records of the
given type. 

<h3><a name="M36">TK_CONFIGUREINFO</a></h3>

The <b>Tk_ConfigureInfo</b> procedure may be used to obtain
information about one or all of the options for a given widget.
Given a token for a window (<i>tkwin</i>), a table describing the
configuration options for a class of widgets (<i>specs</i>), a
pointer to a widget record containing the current information for a
widget (<i>widgRec</i>), and a NULL <i>argvName</i> argument,
<b>Tk_ConfigureInfo</b> generates a string describing all of the
configuration options for the window. The string is placed in
<i>interp-&gt;result</i>. Under normal circumstances it returns
<b>TCL_OK</b>; if an error occurs then it returns <b>TCL_ERROR</b>
and <i>interp-&gt;result</i> contains an error message. 

<p>If <i>argvName</i> is NULL, then the value left in
<i>interp-&gt;result</i> by <b>Tk_ConfigureInfo</b> consists of a
list of one or more entries, each of which describes one
configuration option (i.e. one entry in <i>specs</i>). Each entry
in the list will contain either two or five values. If the
corresponding entry in <i>specs</i> has type
<b>TK_CONFIG_SYNONYM</b>, then the list will contain two values:
the <i>argvName</i> for the entry and the <i>dbName</i> (synonym
name). Otherwise the list will contain five values:
<i>argvName</i>, <i>dbName</i>, <i>dbClass</i>, <i>defValue</i>,
and current value. The current value is computed from the
appropriate field of <i>widgRec</i> by calling procedures like
<b><a href="../TkLib/GetColor.htm">Tk_NameOfColor</a></b>.</p>

<p>If the <i>argvName</i> argument to <b>Tk_ConfigureInfo</b> is
non-NULL, then it indicates a single option, and information is
returned only for that option. The string placed in
<i>interp-&gt;result</i> will be a list containing two or five
values as described above; this will be identical to the
corresponding sublist that would have been returned if
<i>argvName</i> had been NULL.</p>

<p>The <i>flags</i> argument to <b>Tk_ConfigureInfo</b> is used to
restrict the <i>specs</i> entries to consider, just as for
<b>Tk_ConfigureWidget</b>.</p>

<h3><a name="M37">TK_CONFIGUREVALUE</a></h3>

<b>Tk_ConfigureValue</b> takes arguments similar to
<b>Tk_ConfigureInfo</b>; instead of returning a list of values, it
just returns the current value of the option given by
<i>argvName</i> (<i>argvName</i> must not be NULL). The value is
returned in <i>interp-&gt;result</i> and <b>TCL_OK</b> is normally
returned as the procedure's result. If an error occurs in
<b>Tk_ConfigureValue</b> (e.g., <i>argvName</i> is not a valid
option name), <b>TCL_ERROR</b> is returned and an error message is
left in <i>interp-&gt;result</i>. This procedure is typically
called to implement <b>cget</b> widget commands. 

<h3><a name="M38">TK_FREEOPTIONS</a></h3>

The <b>Tk_FreeOptions</b> procedure may be invoked during widget
cleanup to release all of the resources associated with
configuration options. It scans through <i>specs</i> and for each
entry corresponding to a resource that must be explicitly freed
(e.g. those with type <b>TK_CONFIG_COLOR</b>), it frees the
resource in the widget record. If the field in the widget record
does not refer to a resource (e.g. it contains a null pointer) then
no resource is freed for that entry. After freeing a resource,
<b>Tk_FreeOptions</b> sets the corresponding field of the widget
record to null. 

<h3><a name="M39">CUSTOM OPTION TYPES</a></h3>

Applications can extend the built-in configuration types with
additional configuration types by writing procedures to parse and
print options of the a type and creating a structure pointing to
those procedures: 

<pre>
typedef struct Tk_CustomOption {
    Tk_OptionParseProc *<i>parseProc</i>;
    Tk_OptionPrintProc *<i>printProc</i>;
    ClientData <i>clientData</i>;
} Tk_CustomOption;

typedef int Tk_OptionParseProc(
    ClientData <i>clientData</i>,
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>value</i>,
    char *<i>widgRec</i>,
    int <i>offset</i>);

typedef char *Tk_OptionPrintProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>widgRec</i>,
    int <i>offset</i>,
    Tcl_FreeProc **<i>freeProcPtr</i>);
</pre>

The Tk_CustomOption structure contains three fields, which are
pointers to the two procedures and a <i>clientData</i> value to be
passed to those procedures when they are invoked. The
<i>clientData</i> value typically points to a structure containing
information that is needed by the procedures when they are parsing
and printing options. 

<p>The <i>parseProc</i> procedure is invoked by
<b>Tk_ConfigureWidget</b> to parse a string and store the resulting
value in the widget record. The <i>clientData</i> argument is a
copy of the <i>clientData</i> field in the Tk_CustomOption
structure. The <i>interp</i> argument points to a Tcl interpreter
used for error reporting. <i>Tkwin</i> is a copy of the
<i>tkwin</i> argument to <b>Tk_ConfigureWidget</b>. The
<i>value</i> argument is a string describing the value for the
option; it could have been specified explicitly in the call to
<b>Tk_ConfigureWidget</b> or it could come from the option database
or a default. <i>Value</i> will never be a null pointer but it may
point to an empty string. <i>RecordPtr</i> is the same as the
<i>widgRec</i> argument to <b>Tk_ConfigureWidget</b>; it points to
the start of the widget record to modify. The last argument,
<i>offset</i>, gives the offset in bytes from the start of the
widget record to the location where the option value is to be
placed. The procedure should translate the string to whatever form
is appropriate for the option and store the value in the widget
record. It should normally return <b>TCL_OK</b>, but if an error
occurs in translating the string to a value then it should return
<b>TCL_ERROR</b> and store an error message in
<i>interp-&gt;result</i>.</p>

<p>The <i>printProc</i> procedure is called by
<b>Tk_ConfigureInfo</b> to produce a string value describing an
existing option. Its <i>clientData</i>, <i>tkwin</i>,
<i>widgRec</i>, and <i>offset</i> arguments all have the same
meaning as for Tk_OptionParseProc procedures. The <i>printProc</i>
procedure should examine the option whose value is stored at
<i>offset</i> in <i>widgRec</i>, produce a string describing that
option, and return a pointer to the string. If the string is stored
in dynamically-allocated memory, then the procedure must set
<i>*freeProcPtr</i> to the address of a procedure to call to free
the string's memory; <b>Tk_ConfigureInfo</b> will call this
procedure when it is finished with the string. If the result string
is stored in static memory then <i>printProc</i> need not do
anything with the <i>freeProcPtr</i> argument.</p>

<p>Once <i>parseProc</i> and <i>printProc</i> have been defined and
a Tk_CustomOption structure has been created for them, options of
this new type may be manipulated with Tk_ConfigSpec entries whose
<i>type</i> fields are <b>TK_CONFIG_CUSTOM</b> and whose
<i>customPtr</i> fields point to the Tk_CustomOption structure.</p>

<h3><a name="M40">EXAMPLES</a></h3>

Although the explanation of <b>Tk_ConfigureWidget</b> is fairly
complicated, its actual use is pretty straightforward. The easiest
way to get started is to copy the code from an existing widget. The
library implementation of frames (tkFrame.c) has a simple
configuration table, and the library implementation of buttons
(tkButton.c) has a much more complex table that uses many of the
fancy <i>specFlags</i> mechanisms. 

<h3><a name="M41">SEE ALSO</a></h3>

<b><a href="../TkLib/SetOptions.htm">Tk_SetOptions</a></b> 

<h3><a name="M42">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#anchor">anchor</a>, <a href=
"../Keywords/B.htm#bitmap">bitmap</a>, <a href=
"../Keywords/B.htm#boolean">boolean</a>, <a href=
"../Keywords/B.htm#border">border</a>, <a href=
"../Keywords/C.htm#cap style">cap style</a>, <a href=
"../Keywords/C.htm#color">color</a>, <a href=
"../Keywords/C.htm#configuration options">configuration
options</a>, <a href="../Keywords/C.htm#cursor">cursor</a>, <a
href="../Keywords/C.htm#custom">custom</a>, <a href=
"../Keywords/D.htm#double">double</a>, <a href=
"../Keywords/F.htm#font">font</a>, <a href=
"../Keywords/I.htm#integer">integer</a>, <a href=
"../Keywords/J.htm#join style">join style</a>, <a href=
"../Keywords/J.htm#justify">justify</a>, <a href=
"../Keywords/M.htm#millimeters">millimeters</a>, <a href=
"../Keywords/P.htm#pixels">pixels</a>, <a href=
"../Keywords/R.htm#relief">relief</a>, <a href=
"../Keywords/S.htm#synonym">synonym</a>, <a href=
"../Keywords/U.htm#uid">uid</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1990-1994 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

