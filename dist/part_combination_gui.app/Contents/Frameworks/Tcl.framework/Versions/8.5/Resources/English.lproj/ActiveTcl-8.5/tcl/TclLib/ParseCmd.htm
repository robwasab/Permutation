<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_ParseCommand manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> ParseCmd</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="ParseCmd.htm#M2" name="L527">NAME</a> 

<dl>
<dd>Tcl_ParseCommand, Tcl_ParseExpr, Tcl_ParseBraces,
Tcl_ParseQuotedString, Tcl_ParseVarName, Tcl_ParseVar,
Tcl_FreeParse, Tcl_EvalTokens, Tcl_EvalTokensStandard - parse Tcl
scripts and expressions</dd>
</dl>
</dd>

<dd><a href="ParseCmd.htm#M3" name="L528">SYNOPSIS</a></dd>

<dd><a href="ParseCmd.htm#M4" name="L529">ARGUMENTS</a></dd>

<dd><a href="ParseCmd.htm#M5" name="L530">DESCRIPTION</a></dd>

<dd><a href="ParseCmd.htm#M6" name="L531">TCL_PARSE STRUCTURE</a> 

<dl class="tcl_parse structure">
<dd><a href="ParseCmd.htm#M7" name=
"L532"><b>TCL_TOKEN_WORD</b></a></dd>

<dd><a href="ParseCmd.htm#M8" name=
"L533"><b>TCL_TOKEN_SIMPLE_WORD</b></a></dd>

<dd><a href="ParseCmd.htm#M9" name=
"L534"><b>TCL_TOKEN_EXPAND_WORD</b></a></dd>

<dd><a href="ParseCmd.htm#M10" name=
"L535"><b>TCL_TOKEN_TEXT</b></a></dd>

<dd><a href="ParseCmd.htm#M11" name=
"L536"><b>TCL_TOKEN_BS</b></a></dd>

<dd><a href="ParseCmd.htm#M12" name=
"L537"><b>TCL_TOKEN_COMMAND</b></a></dd>

<dd><a href="ParseCmd.htm#M13" name=
"L538"><b>TCL_TOKEN_VARIABLE</b></a></dd>

<dd><a href="ParseCmd.htm#M14" name=
"L539"><b>TCL_TOKEN_SUB_EXPR</b></a></dd>

<dd><a href="ParseCmd.htm#M15" name=
"L540"><b>TCL_TOKEN_OPERATOR</b></a></dd>
</dl>
</dd>

<dd><a href="ParseCmd.htm#M16" name="L541">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_ParseCommand, Tcl_ParseExpr, Tcl_ParseBraces,
Tcl_ParseQuotedString, Tcl_ParseVarName, Tcl_ParseVar,
Tcl_FreeParse, Tcl_EvalTokens, Tcl_EvalTokensStandard - parse Tcl
scripts and expressions 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
int<br>
<b>Tcl_ParseCommand</b>(<i>interp, start, numBytes, nested,
parsePtr</i>)<br>
int<br>
<b>Tcl_ParseExpr</b>(<i>interp, start, numBytes, parsePtr</i>)<br>
int<br>
<b>Tcl_ParseBraces</b>(<i>interp, start, numBytes, parsePtr,
append, termPtr</i>)<br>
int<br>
<b>Tcl_ParseQuotedString</b>(<i>interp, start, numBytes, parsePtr,
append, termPtr</i>)<br>
int<br>
<b>Tcl_ParseVarName</b>(<i>interp, start, numBytes, parsePtr,
append</i>)<br>
const char *<br>
<b>Tcl_ParseVar</b>(<i>interp, start, termPtr</i>)<br>
<b>Tcl_FreeParse</b>(<i>usedParsePtr</i>)<br>
Tcl_Obj *<br>
<b>Tcl_EvalTokens</b>(<i>interp, tokenPtr, numTokens</i>)<br>
int<br>
<b>Tcl_EvalTokensStandard</b>(<i>interp, tokenPtr,
numTokens</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(out)</dt>

<dd>For procedures other than <b>Tcl_FreeParse</b>,
<b>Tcl_EvalTokens</b> and <b>Tcl_EvalTokensStandard</b>, used only
for error reporting; if NULL, then no error messages are left after
errors. For <b>Tcl_EvalTokens</b> and
<b>Tcl_EvalTokensStandard</b>, determines the context for
evaluating the script and also is used for error reporting; must
not be NULL.</dd>

<dt>const char <b>*start</b> (in)</dt>

<dd>Pointer to first character in string to parse.</dd>

<dt>int <b>numBytes</b> (in)</dt>

<dd>Number of bytes in string to parse, not including any
terminating null character. If less than 0 then the script consists
of all characters following <i>start</i> up to the first null
character.</dd>

<dt>int <b>nested</b> (in)</dt>

<dd>Non-zero means that the script is part of a command
substitution so an unquoted close bracket should be treated as a
command terminator. If zero, close brackets have no special
meaning.</dd>

<dt>int <b><a href="../TclCmd/append.htm">append</a></b> (in)</dt>

<dd>Non-zero means that <i>*parsePtr</i> already contains valid
tokens; the new tokens should be appended to those already present.
Zero means that <i>*parsePtr</i> is uninitialized; any information
in it is ignored. This argument is normally 0.</dd>

<dt>Tcl_Parse <b>*parsePtr</b> (out)</dt>

<dd>Points to structure to fill in with information about the
parsed command, expression, variable name, etc. Any previous
information in this structure is ignored, unless <i>append</i> is
non-zero in a call to <b>Tcl_ParseBraces</b>,
<b>Tcl_ParseQuotedString</b>, or <b>Tcl_ParseVarName</b>.</dd>

<dt>const char <b>**termPtr</b> (out)</dt>

<dd>If not NULL, points to a location where <b>Tcl_ParseBraces</b>,
<b>Tcl_ParseQuotedString</b>, and <b>Tcl_ParseVar</b> will store a
pointer to the character just after the terminating character (the
close-brace, the last character of the variable name, or the
close-quote (respectively)) if the parse was successful.</dd>

<dt>Tcl_Parse <b>*usedParsePtr</b> (in)</dt>

<dd>Points to structure that was filled in by a previous call to
<b>Tcl_ParseCommand</b>, <b>Tcl_ParseExpr</b>,
<b>Tcl_ParseVarName</b>, etc.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These procedures parse Tcl commands or portions of Tcl commands
such as expressions or references to variables. Each procedure
takes a pointer to a script (or portion thereof) and fills in the
structure pointed to by <i>parsePtr</i> with a collection of tokens
describing the information that was parsed. The procedures normally
return <b>TCL_OK</b>. However, if an error occurs then they return
<b>TCL_ERROR</b>, leave an error message in <i>interp</i>'s result
(if <i>interp</i> is not NULL), and leave nothing in
<i>parsePtr</i>. 

<p><b>Tcl_ParseCommand</b> is a procedure that parses Tcl scripts.
Given a pointer to a script, it parses the first command from the
script. If the command was parsed successfully,
<b>Tcl_ParseCommand</b> returns <b>TCL_OK</b> and fills in the
structure pointed to by <i>parsePtr</i> with information about the
structure of the command (see below for details). If an error
occurred in parsing the command then <b>TCL_ERROR</b> is returned,
an error message is left in <i>interp</i>'s result, and no
information is left at <i>*parsePtr</i>.</p>

<p><b>Tcl_ParseExpr</b> parses Tcl expressions. Given a pointer to
a script containing an expression, <b>Tcl_ParseExpr</b> parses the
expression. If the expression was parsed successfully,
<b>Tcl_ParseExpr</b> returns <b>TCL_OK</b> and fills in the
structure pointed to by <i>parsePtr</i> with information about the
structure of the expression (see below for details). If an error
occurred in parsing the command then <b>TCL_ERROR</b> is returned,
an error message is left in <i>interp</i>'s result, and no
information is left at <i>*parsePtr</i>.</p>

<p><b>Tcl_ParseBraces</b> parses a string or command argument
enclosed in braces such as <b>{hello}</b> or <b>{string \t with \t
tabs}</b> from the beginning of its argument <i>start</i>. The
first character of <i>start</i> must be <b>{</b>. If the braced
string was parsed successfully, <b>Tcl_ParseBraces</b> returns
<b>TCL_OK</b>, fills in the structure pointed to by <i>parsePtr</i>
with information about the structure of the string (see below for
details), and stores a pointer to the character just after the
terminating <b>}</b> in the location given by <i>*termPtr</i>. If
an error occurs while parsing the string then <b>TCL_ERROR</b> is
returned, an error message is left in <i>interp</i>'s result, and
no information is left at <i>*parsePtr</i> or <i>*termPtr</i>.</p>

<p><b>Tcl_ParseQuotedString</b> parses a double-quoted string such
as <b>"sum is [expr {$a+$b}]"</b> from the beginning of the
argument <i>start</i>. The first character of <i>start</i> must be
<b>"</b>. If the double-quoted string was parsed successfully,
<b>Tcl_ParseQuotedString</b> returns <b>TCL_OK</b>, fills in the
structure pointed to by <i>parsePtr</i> with information about the
structure of the string (see below for details), and stores a
pointer to the character just after the terminating <b>"</b> in the
location given by <i>*termPtr</i>. If an error occurs while parsing
the string then <b>TCL_ERROR</b> is returned, an error message is
left in <i>interp</i>'s result, and no information is left at
<i>*parsePtr</i> or <i>*termPtr</i>.</p>

<p><b>Tcl_ParseVarName</b> parses a Tcl variable reference such as
<b>$abc</b> or <b>$x([expr {$index + 1}])</b> from the beginning of
its <i>start</i> argument. The first character of <i>start</i> must
be <b>$</b>. If a variable name was parsed successfully,
<b>Tcl_ParseVarName</b> returns <b>TCL_OK</b> and fills in the
structure pointed to by <i>parsePtr</i> with information about the
structure of the variable name (see below for details). If an error
occurs while parsing the command then <b>TCL_ERROR</b> is returned,
an error message is left in <i>interp</i>'s result (if
<i>interp</i> is not NULL), and no information is left at
<i>*parsePtr</i>.</p>

<p><b>Tcl_ParseVar</b> parse a Tcl variable reference such as
<b>$abc</b> or <b>$x([expr {$index + 1}])</b> from the beginning of
its <i>start</i> argument. The first character of <i>start</i> must
be <b>$</b>. If the variable name is parsed successfully,
<b>Tcl_ParseVar</b> returns a pointer to the string value of the
variable. If an error occurs while parsing, then NULL is returned
and an error message is left in <i>interp</i>'s result.</p>

<p>The information left at <i>*parsePtr</i> by
<b>Tcl_ParseCommand</b>, <b>Tcl_ParseExpr</b>,
<b>Tcl_ParseBraces</b>, <b>Tcl_ParseQuotedString</b>, and
<b>Tcl_ParseVarName</b> may include dynamically allocated memory.
If these five parsing procedures return <b>TCL_OK</b> then the
caller must invoke <b>Tcl_FreeParse</b> to release the storage at
<i>*parsePtr</i>. These procedures ignore any existing information
in <i>*parsePtr</i> (unless <i>append</i> is non-zero), so if
repeated calls are being made to any of them then
<b>Tcl_FreeParse</b> must be invoked once after each call.</p>

<p><b>Tcl_EvalTokensStandard</b> evaluates a sequence of parse
tokens from a Tcl_Parse structure. The tokens typically consist of
all the tokens in a word or all the tokens that make up the index
for a reference to an array variable. <b>Tcl_EvalTokensStandard</b>
performs the substitutions requested by the tokens and concatenates
the resulting values. The return value from
<b>Tcl_EvalTokensStandard</b> is a Tcl completion code with one of
the values <b>TCL_OK</b>, <b>TCL_ERROR</b>, <b>TCL_RETURN</b>,
<b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>, or possibly some other
integer value originating in an extension. In addition, a result
value or error message is left in <i>interp</i>'s result; it can be
retrieved using <b><a href=
"../TclLib/SetResult.htm">Tcl_GetObjResult</a></b>.</p>

<p><b>Tcl_EvalTokens</b> differs from <b>Tcl_EvalTokensStandard</b>
only in the return convention used: it returns the result in a new
Tcl_Obj. The reference count of the object returned as result has
been incremented, so the caller must invoke <b><a href=
"../TclLib/Object.htm">Tcl_DecrRefCount</a></b> when it is finished
with the object. If an error or other exception occurs while
evaluating the tokens (such as a reference to a non-existent
variable) then the return value is NULL and an error message is
left in <i>interp</i>'s result. The use of <b>Tcl_EvalTokens</b> is
deprecated.</p>

<h3><a name="M6">TCL_PARSE STRUCTURE</a></h3>

<b>Tcl_ParseCommand</b>, <b>Tcl_ParseExpr</b>,
<b>Tcl_ParseBraces</b>, <b>Tcl_ParseQuotedString</b>, and
<b>Tcl_ParseVarName</b> return parse information in two data
structures, Tcl_Parse and Tcl_Token: 

<pre>
typedef struct Tcl_Parse {
        const char *<i>commentStart</i>;
        int <i>commentSize</i>;
        const char *<i>commandStart</i>;
        int <i>commandSize</i>;
        int <i>numWords</i>;
        Tcl_Token *<i>tokenPtr</i>;
        int <i>numTokens</i>;
        ...
} Tcl_Parse;

typedef struct Tcl_Token {
        int <i>type</i>;
        const char *<i>start</i>;
        int <i>size</i>;
        int <i>numComponents</i>;
} Tcl_Token;
</pre>

<p>The first five fields of a Tcl_Parse structure are filled in
only by <b>Tcl_ParseCommand</b>. These fields are not used by the
other parsing procedures.</p>

<p><b>Tcl_ParseCommand</b> fills in a Tcl_Parse structure with
information that describes one Tcl command and any comments that
precede the command. If there are comments, the <i>commentStart</i>
field points to the <b>#</b> character that begins the first
comment and <i>commentSize</i> indicates the number of bytes in all
of the comments preceding the command, including the newline
character that terminates the last comment. If the command is not
preceded by any comments, <i>commentSize</i> is 0.
<b>Tcl_ParseCommand</b> also sets the <i>commandStart</i> field to
point to the first character of the first word in the command
(skipping any comments and leading space) and <i>commandSize</i>
gives the total number of bytes in the command, including the
character pointed to by <i>commandStart</i> up to and including the
newline, close bracket, or semicolon character that terminates the
command. The <i>numWords</i> field gives the total number of words
in the command.</p>

<p>All parsing procedures set the remaining fields, <i>tokenPtr</i>
and <i>numTokens</i>. The <i>tokenPtr</i> field points to the first
in an array of Tcl_Token structures that describe the components of
the entity being parsed. The <i>numTokens</i> field gives the total
number of tokens present in the array. Each token contains four
fields. The <i>type</i> field selects one of several token types
that are described below. The <i>start</i> field points to the
first character in the token and the <i>size</i> field gives the
total number of characters in the token. Some token types, such as
<b>TCL_TOKEN_WORD</b> and <b>TCL_TOKEN_VARIABLE</b>, consist of
several component tokens, which immediately follow the parent
token; the <i>numComponents</i> field describes how many of these
there are. The <i>type</i> field has one of the following
values:</p>

<dl class="tcl_parse structure">
<dt><a name="M7"><b>TCL_TOKEN_WORD</b></a></dt>

<dd>This token ordinarily describes one word of a command but it
may also describe a quoted or braced string in an expression. The
token describes a component of the script that is the result of
concatenating together a sequence of subcomponents, each described
by a separate subtoken. The token starts with the first non-blank
character of the component (which may be a double-quote or open
brace) and includes all characters in the component up to but not
including the space, semicolon, close bracket, close quote, or
close brace that terminates the component. The <i>numComponents</i>
field counts the total number of sub-tokens that make up the word,
including sub-tokens of <b>TCL_TOKEN_VARIABLE</b> and
<b>TCL_TOKEN_BS</b> tokens.</dd>

<dt><a name="M8"><b>TCL_TOKEN_SIMPLE_WORD</b></a></dt>

<dd>This token has the same meaning as <b>TCL_TOKEN_WORD</b>,
except that the word is guaranteed to consist of a single
<b>TCL_TOKEN_TEXT</b> sub-token. The <i>numComponents</i> field is
always 1.</dd>

<dt><a name="M9"><b>TCL_TOKEN_EXPAND_WORD</b></a></dt>

<dd>This token has the same meaning as <b>TCL_TOKEN_WORD</b>,
except that the command parser notes this word began with the
expansion prefix <b>{*}</b>, indicating that after substitution,
the list value of this word should be expanded to form multiple
arguments in command evaluation. This token type can only be
created by Tcl_ParseCommand.</dd>

<dt><a name="M10"><b>TCL_TOKEN_TEXT</b></a></dt>

<dd>The token describes a range of literal text that is part of a
word. The <i>numComponents</i> field is always 0.</dd>

<dt><a name="M11"><b>TCL_TOKEN_BS</b></a></dt>

<dd>The token describes a backslash sequence such as <b>\n</b> or
<b>\0xa3</b>. The <i>numComponents</i> field is always 0.</dd>

<dt><a name="M12"><b>TCL_TOKEN_COMMAND</b></a></dt>

<dd>The token describes a command whose result must be substituted
into the word. The token includes the square brackets that surround
the command. The <i>numComponents</i> field is always 0 (the nested
command is not parsed; call <b>Tcl_ParseCommand</b> recursively if
you want to see its tokens).</dd>

<dt><a name="M13"><b>TCL_TOKEN_VARIABLE</b></a></dt>

<dd>The token describes a variable substitution, including the
<b>$</b>, variable name, and array index (if there is one) up
through the close parenthesis that terminates the index. This token
is followed by one or more additional tokens that describe the
variable name and array index. If <i>numComponents</i> is 1 then
the variable is a scalar and the next token is a
<b>TCL_TOKEN_TEXT</b> token that gives the variable name. If
<i>numComponents</i> is greater than 1 then the variable is an
array: the first sub-token is a <b>TCL_TOKEN_TEXT</b> token giving
the array name and the remaining sub-tokens are
<b>TCL_TOKEN_TEXT</b>, <b>TCL_TOKEN_BS</b>,
<b>TCL_TOKEN_COMMAND</b>, and <b>TCL_TOKEN_VARIABLE</b> tokens that
must be concatenated to produce the array index. The
<i>numComponents</i> field includes nested sub-tokens that are part
of <b>TCL_TOKEN_VARIABLE</b> tokens in the array index.</dd>

<dt><a name="M14"><b>TCL_TOKEN_SUB_EXPR</b></a></dt>

<dd>The token describes one subexpression of an expression (or an
entire expression). A subexpression may consist of a value such as
an integer literal, variable substitution, or parenthesized
subexpression; it may also consist of an operator and its operands.
The token starts with the first non-blank character of the
subexpression up to but not including the space, brace,
close-paren, or bracket that terminates the subexpression. This
token is followed by one or more additional tokens that describe
the subexpression. If the first sub-token after the
<b>TCL_TOKEN_SUB_EXPR</b> token is a <b>TCL_TOKEN_OPERATOR</b>
token, the subexpression consists of an operator and its token
operands. If the operator has no operands, the subexpression
consists of just the <b>TCL_TOKEN_OPERATOR</b> token. Each operand
is described by a <b>TCL_TOKEN_SUB_EXPR</b> token. Otherwise, the
subexpression is a value described by one of the token types
<b>TCL_TOKEN_WORD</b>, <b>TCL_TOKEN_TEXT</b>, <b>TCL_TOKEN_BS</b>,
<b>TCL_TOKEN_COMMAND</b>, <b>TCL_TOKEN_VARIABLE</b>, and
<b>TCL_TOKEN_SUB_EXPR</b>. The <i>numComponents</i> field counts
the total number of sub-tokens that make up the subexpression; this
includes the sub-tokens for any nested <b>TCL_TOKEN_SUB_EXPR</b>
tokens.</dd>

<dt><a name="M15"><b>TCL_TOKEN_OPERATOR</b></a></dt>

<dd>The token describes one operator of an expression such as
<b>&amp;&amp;</b> or <b>hypot</b>. A <b>TCL_TOKEN_OPERATOR</b>
token is always preceded by a <b>TCL_TOKEN_SUB_EXPR</b> token that
describes the operator and its operands; the
<b>TCL_TOKEN_SUB_EXPR</b> token's <i>numComponents</i> field can be
used to determine the number of operands. A binary operator such as
<b>*</b> is followed by two <b>TCL_TOKEN_SUB_EXPR</b> tokens that
describe its operands. A unary operator like <b>-</b> is followed
by a single <b>TCL_TOKEN_SUB_EXPR</b> token for its operand. If the
operator is a math function such as <b>log10</b>, the
<b>TCL_TOKEN_OPERATOR</b> token will give its name and the
following <b>TCL_TOKEN_SUB_EXPR</b> tokens will describe its
operands; if there are no operands (as with <b>rand</b>), no
<b>TCL_TOKEN_SUB_EXPR</b> tokens follow. There is one trinary
operator, <b>?</b>, that appears in if-then-else subexpressions
such as <i>x</i><b>?</b><i>y</i><b>:</b><i>z</i>; in this case, the
<b>?</b> <b>TCL_TOKEN_OPERATOR</b> token is followed by three
<b>TCL_TOKEN_SUB_EXPR</b> tokens for the operands <i>x</i>,
<i>y</i>, and <i>z</i>. The <i>numComponents</i> field for a
<b>TCL_TOKEN_OPERATOR</b> token is always 0.</dd>
</dl>

<p>After <b>Tcl_ParseCommand</b> returns, the first token pointed
to by the <i>tokenPtr</i> field of the Tcl_Parse structure always
has type <b>TCL_TOKEN_WORD</b> or <b>TCL_TOKEN_SIMPLE_WORD</b> or
<b>TCL_TOKEN_EXPAND_WORD</b>. It is followed by the sub-tokens that
must be concatenated to produce the value of that word. The next
token is the <b>TCL_TOKEN_WORD</b> or <b>TCL_TOKEN_SIMPLE_WORD</b>
of <b>TCL_TOKEN_EXPAND_WORD</b> token for the second word, followed
by sub-tokens for that word, and so on until all <i>numWords</i>
have been accounted for.</p>

<p>After <b>Tcl_ParseExpr</b> returns, the first token pointed to
by the <i>tokenPtr</i> field of the Tcl_Parse structure always has
type <b>TCL_TOKEN_SUB_EXPR</b>. It is followed by the sub-tokens
that must be evaluated to produce the value of the expression. Only
the token information in the Tcl_Parse structure is modified: the
<i>commentStart</i>, <i>commentSize</i>, <i>commandStart</i>, and
<i>commandSize</i> fields are not modified by
<b>Tcl_ParseExpr</b>.</p>

<p>After <b>Tcl_ParseBraces</b> returns, the array of tokens
pointed to by the <i>tokenPtr</i> field of the Tcl_Parse structure
will contain a single <b>TCL_TOKEN_TEXT</b> token if the braced
string does not contain any backslash-newlines. If the string does
contain backslash-newlines, the array of tokens will contain one or
more <b>TCL_TOKEN_TEXT</b> or <b>TCL_TOKEN_BS</b> sub-tokens that
must be concatenated to produce the value of the string. If the
braced string was just <b>{}</b> (that is, the string was empty),
the single <b>TCL_TOKEN_TEXT</b> token will have a <i>size</i>
field containing zero; this ensures that at least one token appears
to describe the braced string. Only the token information in the
Tcl_Parse structure is modified: the <i>commentStart</i>,
<i>commentSize</i>, <i>commandStart</i>, and <i>commandSize</i>
fields are not modified by <b>Tcl_ParseBraces</b>.</p>

<p>After <b>Tcl_ParseQuotedString</b> returns, the array of tokens
pointed to by the <i>tokenPtr</i> field of the Tcl_Parse structure
depends on the contents of the quoted string. It will consist of
one or more <b>TCL_TOKEN_TEXT</b>, <b>TCL_TOKEN_BS</b>,
<b>TCL_TOKEN_COMMAND</b>, and <b>TCL_TOKEN_VARIABLE</b> sub-tokens.
The array always contains at least one token; for example, if the
argument <i>start</i> is empty, the array returned consists of a
single <b>TCL_TOKEN_TEXT</b> token with a zero <i>size</i> field.
Only the token information in the Tcl_Parse structure is modified:
the <i>commentStart</i>, <i>commentSize</i>, <i>commandStart</i>,
and <i>commandSize</i> fields are not modified.</p>

<p>After <b>Tcl_ParseVarName</b> returns, the first token pointed
to by the <i>tokenPtr</i> field of the Tcl_Parse structure always
has type <b>TCL_TOKEN_VARIABLE</b>. It is followed by the
sub-tokens that make up the variable name as described above. The
total length of the variable name is contained in the <i>size</i>
field of the first token. As in <b>Tcl_ParseExpr</b>, only the
token information in the Tcl_Parse structure is modified by
<b>Tcl_ParseVarName</b>: the <i>commentStart</i>,
<i>commentSize</i>, <i>commandStart</i>, and <i>commandSize</i>
fields are not modified.</p>

<p>All of the character pointers in the Tcl_Parse and Tcl_Token
structures refer to characters in the <i>start</i> argument passed
to <b>Tcl_ParseCommand</b>, <b>Tcl_ParseExpr</b>,
<b>Tcl_ParseBraces</b>, <b>Tcl_ParseQuotedString</b>, and
<b>Tcl_ParseVarName</b>.</p>

<p>There are additional fields in the Tcl_Parse structure after the
<i>numTokens</i> field, but these are for the private use of
<b>Tcl_ParseCommand</b>, <b>Tcl_ParseExpr</b>,
<b>Tcl_ParseBraces</b>, <b>Tcl_ParseQuotedString</b>, and
<b>Tcl_ParseVarName</b>; they should not be referenced by code
outside of these procedures.</p>

<h3><a name="M16">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#backslash substitution">backslash
substitution</a>, <a href="../Keywords/B.htm#braces">braces</a>, <a
href="../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/E.htm#expression">expression</a>, <a href=
"../Keywords/P.htm#parse">parse</a>, <a href=
"../Keywords/T.htm#token">token</a>, <a href=
"../Keywords/V.htm#variable substitution">variable substitution</a>


<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1997 Sun Microsystems, Inc.</div>
</body>
</html>

