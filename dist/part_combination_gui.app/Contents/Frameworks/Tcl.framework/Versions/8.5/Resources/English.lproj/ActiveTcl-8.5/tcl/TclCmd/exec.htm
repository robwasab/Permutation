<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - exec manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> exec</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="exec.htm#M2" name="L345">NAME</a> 

<dl>
<dd>exec - Invoke subprocesses</dd>
</dl>
</dd>

<dd><a href="exec.htm#M3" name="L346">SYNOPSIS</a> 

<dl>
<dd><b>exec</b> ?<i>switches</i>? <i>arg</i> ?<i>arg ...</i>?</dd>
</dl>
</dd>

<dd><a href="exec.htm#M4" name="L347">DESCRIPTION</a> 

<dl class="description">
<dd><a href="exec.htm#M5" name="L348"><b>-ignorestderr</b></a></dd>

<dd><a href="exec.htm#M6" name="L349"><b>-keepnewline</b></a></dd>

<dd><a href="exec.htm#M7" name="L350"><b>--</b></a></dd>
</dl>

<dl class="description">
<dd><a href="exec.htm#M8" name="L351"><b>|</b></a></dd>

<dd><a href="exec.htm#M9" name="L352"><b>|&amp;</b></a></dd>

<dd><a href="exec.htm#M10" name="L353"><b>&lt;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M11" name="L354"><b>&lt;@</b>
<i>fileId</i></a></dd>

<dd><a href="exec.htm#M12" name="L355"><b>&lt;&lt;</b>
<i>value</i></a></dd>

<dd><a href="exec.htm#M13" name="L356"><b>&gt;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M14" name="L357"><b>2&gt;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M15" name="L358"><b>&gt;&amp;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M16" name="L359"><b>&gt;&gt;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M17" name="L360"><b>2&gt;&gt;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M18" name="L361"><b>&gt;&gt;&amp;</b>
<i>fileName</i></a></dd>

<dd><a href="exec.htm#M19" name="L362"><b>&gt;@</b>
<i>fileId</i></a></dd>

<dd><a href="exec.htm#M20" name="L363"><b>2&gt;@</b>
<i>fileId</i></a></dd>

<dd><a href="exec.htm#M21" name="L364"><b>2&gt;@1</b></a></dd>

<dd><a href="exec.htm#M22" name="L365"><b>&gt;&amp;@</b>
<i>fileId</i></a></dd>
</dl>
</dd>

<dd><a href="exec.htm#M23" name="L366">PORTABILITY ISSUES</a> 

<dl class="portability issues">
<dd><a href="exec.htm#M24" name="L367"><b>Windows</b> (all
versions)</a></dd>

<dd><a href="exec.htm#M25" name="L368"><b>Windows NT</b></a></dd>

<dd><a href="exec.htm#M26" name="L369"><b>Windows 9x</b></a></dd>

<dd><a href="exec.htm#M27" name="L370"><b>Unix</b></a></dd>
</dl>
</dd>

<dd><a href="exec.htm#M28" name="L371">UNIX EXAMPLES</a></dd>

<dd><a href="exec.htm#M29" name="L372">WINDOWS EXAMPLES</a></dd>

<dd><a href="exec.htm#M30" name="L373">SEE ALSO</a></dd>

<dd><a href="exec.htm#M31" name="L374">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

exec - Invoke subprocesses 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>exec</b> ?<i>switches</i>? <i>arg</i> ?<i>arg ...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

This command treats its arguments as the specification of one or
more subprocesses to execute. The arguments take the form of a
standard shell pipeline where each <i>arg</i> becomes one word of a
command, and each distinct command becomes a subprocess. 

<p>If the initial arguments to <b>exec</b> start with <b>-</b> then
they are treated as command-line switches and are not part of the
pipeline specification. The following switches are currently
supported:</p>

<dl class="description">
<dt><a name="M5"><b>-ignorestderr</b></a></dt>

<dd>Stops the <b>exec</b> command from treating the output of
messages to the pipeline's standard error channel as an error
case.</dd>

<dt><a name="M6"><b>-keepnewline</b></a></dt>

<dd>Retains a trailing newline in the pipeline's output. Normally a
trailing newline will be deleted.</dd>

<dt><a name="M7"><b>--</b></a></dt>

<dd>Marks the end of switches. The argument following this one will
be treated as the first <i>arg</i> even if it starts with a
<b>-</b>.</dd>
</dl>

<p>If an <i>arg</i> (or pair of <i>arg</i>s) has one of the forms
described below then it is used by <b>exec</b> to control the flow
of input and output among the subprocess(es). Such arguments will
not be passed to the subprocess(es). In forms such as
&ldquo;<b>&lt;</b> <i>fileName</i>&rdquo;, <i>fileName</i> may
either be in a separate argument from &ldquo;<b>&lt;</b>&rdquo; or
in the same argument with no intervening space (i.e.
&ldquo;<b>&lt;</b><i>fileName</i>&rdquo;).</p>

<dl class="description">
<dt><a name="M8"><b>|</b></a></dt>

<dd>Separates distinct commands in the pipeline. The standard
output of the preceding command will be piped into the standard
input of the next command.</dd>

<dt><a name="M9"><b>|&amp;</b></a></dt>

<dd>Separates distinct commands in the pipeline. Both standard
output and standard error of the preceding command will be piped
into the standard input of the next command. This form of
redirection overrides forms such as 2&gt; and &gt;&amp;.</dd>

<dt><a name="M10"><b>&lt;</b> <i>fileName</i></a></dt>

<dd>The file named by <i>fileName</i> is opened and used as the
standard input for the first command in the pipeline.</dd>

<dt><a name="M11"><b>&lt;@</b> <i>fileId</i></a></dt>

<dd><i>FileId</i> must be the identifier for an open file, such as
the return value from a previous call to <b><a href=
"../TclCmd/open.htm">open</a></b>. It is used as the standard input
for the first command in the pipeline. <i>FileId</i> must have been
opened for reading.</dd>

<dt><a name="M12"><b>&lt;&lt;</b> <i>value</i></a></dt>

<dd><i>Value</i> is passed to the first command as its standard
input.</dd>

<dt><a name="M13"><b>&gt;</b> <i>fileName</i></a></dt>

<dd>Standard output from the last command is redirected to the file
named <i>fileName</i>, overwriting its previous contents.</dd>

<dt><a name="M14"><b>2&gt;</b> <i>fileName</i></a></dt>

<dd>Standard error from all commands in the pipeline is redirected
to the file named <i>fileName</i>, overwriting its previous
contents.</dd>

<dt><a name="M15"><b>&gt;&amp;</b> <i>fileName</i></a></dt>

<dd>Both standard output from the last command and standard error
from all commands are redirected to the file named <i>fileName</i>,
overwriting its previous contents.</dd>

<dt><a name="M16"><b>&gt;&gt;</b> <i>fileName</i></a></dt>

<dd>Standard output from the last command is redirected to the file
named <i>fileName</i>, appending to it rather than overwriting
it.</dd>

<dt><a name="M17"><b>2&gt;&gt;</b> <i>fileName</i></a></dt>

<dd>Standard error from all commands in the pipeline is redirected
to the file named <i>fileName</i>, appending to it rather than
overwriting it.</dd>

<dt><a name="M18"><b>&gt;&gt;&amp;</b> <i>fileName</i></a></dt>

<dd>Both standard output from the last command and standard error
from all commands are redirected to the file named <i>fileName</i>,
appending to it rather than overwriting it.</dd>

<dt><a name="M19"><b>&gt;@</b> <i>fileId</i></a></dt>

<dd><i>FileId</i> must be the identifier for an open file, such as
the return value from a previous call to <b><a href=
"../TclCmd/open.htm">open</a></b>. Standard output from the last
command is redirected to <i>fileId</i>'s file, which must have been
opened for writing.</dd>

<dt><a name="M20"><b>2&gt;@</b> <i>fileId</i></a></dt>

<dd><i>FileId</i> must be the identifier for an open file, such as
the return value from a previous call to <b><a href=
"../TclCmd/open.htm">open</a></b>. Standard error from all commands
in the pipeline is redirected to <i>fileId</i>'s file. The file
must have been opened for writing.</dd>

<dt><a name="M21"><b>2&gt;@1</b></a></dt>

<dd>Standard error from all commands in the pipeline is redirected
to the command result. This operator is only valid at the end of
the command pipeline.</dd>

<dt><a name="M22"><b>&gt;&amp;@</b> <i>fileId</i></a></dt>

<dd><i>FileId</i> must be the identifier for an open file, such as
the return value from a previous call to <b><a href=
"../TclCmd/open.htm">open</a></b>. Both standard output from the
last command and standard error from all commands are redirected to
<i>fileId</i>'s file. The file must have been opened for
writing.</dd>
</dl>

<p>If standard output has not been redirected then the <b>exec</b>
command returns the standard output from the last command in the
pipeline, unless &ldquo;2&gt;@1&rdquo; was specified, in which case
standard error is included as well. If any of the commands in the
pipeline exit abnormally or are killed or suspended, then
<b>exec</b> will return an error and the error message will include
the pipeline's output followed by error messages describing the
abnormal terminations; the <b>-errorcode</b> return option will
contain additional information about the last abnormal termination
encountered. If any of the commands writes to its standard error
file and that standard error is not redirected and
<b>-ignorestderr</b> is not specified, then <b>exec</b> will return
an error; the error message will include the pipeline's standard
output, followed by messages about abnormal terminations (if any),
followed by the standard error output.</p>

<p>If the last character of the result or error message is a
newline then that character is normally deleted from the result or
error message. This is consistent with other Tcl return values,
which do not normally end with newlines. However, if
<b>-keepnewline</b> is specified then the trailing newline is
retained.</p>

<p>If standard input is not redirected with &ldquo;&lt;&rdquo;,
&ldquo;&lt;&lt;&rdquo; or &ldquo;&lt;@&rdquo; then the standard
input for the first command in the pipeline is taken from the
application's current standard input.</p>

<p>If the last <i>arg</i> is &ldquo;&amp;&rdquo; then the pipeline
will be executed in background. In this case the <b>exec</b>
command will return a list whose elements are the process
identifiers for all of the subprocesses in the pipeline. The
standard output from the last command in the pipeline will go to
the application's standard output if it has not been redirected,
and error output from all of the commands in the pipeline will go
to the application's standard error file unless redirected.</p>

<p>The first word in each command is taken as the command name;
tilde-substitution is performed on it, and if the result contains
no slashes then the directories in the PATH environment variable
are searched for an executable by the given name. If the name
contains a slash then it must refer to an executable reachable from
the current directory. No &ldquo;glob&rdquo; expansion or other
shell-like substitutions are performed on the arguments to
commands.</p>

<h3><a name="M23">PORTABILITY ISSUES</a></h3>

<dl class="portability issues">
<dt><a name="M24"><b>Windows</b> (all versions)</a></dt>

<dd>Reading from or writing to a socket, using the &ldquo;<b>@</b>
<i>fileId</i>&rdquo; notation, does not work. When reading from a
socket, a 16-bit DOS application will hang and a 32-bit application
will return immediately with end-of-file. When either type of
application writes to a socket, the information is instead sent to
the console, if one is present, or is discarded. 

<p>The Tk console text widget does not provide real standard IO
capabilities. Under Tk, when redirecting from standard input, all
applications will see an immediate end-of-file; information
redirected to standard output or standard error will be
discarded.</p>

<p>Either forward or backward slashes are accepted as path
separators for arguments to Tcl commands. When executing an
application, the path name specified for the application may also
contain forward or backward slashes as path separators. Bear in
mind, however, that most Windows applications accept arguments with
forward slashes only as option delimiters and backslashes only in
paths. Any arguments to an application that specify a path name
with forward slashes will not automatically be converted to use the
backslash character. If an argument contains forward slashes as the
path separator, it may or may not be recognized as a path name,
depending on the program.</p>

<p>Additionally, when calling a 16-bit DOS or Windows 3.X
application, all path names must use the short, cryptic, path
format (e.g., using &ldquo;applba~1.def&rdquo; instead of
&ldquo;applbakery.default&rdquo;), which can be obtained with the
&ldquo;<b>file attributes</b> <i>fileName</i>
<b>-shortname</b>&rdquo; command.</p>

<p>Two or more forward or backward slashes in a row in a path refer
to a network path. For example, a simple concatenation of the root
directory <b>c:/</b> with a subdirectory <b>/windows/system</b>
will yield <b>c://windows/system</b> (two slashes together), which
refers to the mount point called <b>system</b> on the machine
called <b>windows</b> (and the <b>c:/</b> is ignored), and is not
equivalent to <b>c:/windows/system</b>, which describes a directory
on the current computer. The <b><a href="../TclCmd/file.htm">file
join</a></b> command should be used to concatenate path
components.</p>

<p>Note that there are two general types of Win32 console
applications:</p>

<dl class="portability issues">
<dt>[1]</dt>

<dd>CLI &mdash; CommandLine Interface, simple stdio exchange.
<b>netstat.exe</b> for example.</dd>

<dt>[2]</dt>

<dd>TUI &mdash; Textmode User Interface, any application that
accesses the console API for doing such things as cursor movement,
setting text color, detecting key presses and mouse movement, etc.
An example would be <b>telnet.exe</b> from Windows 2000. These
types of applications are not common in a windows environment, but
do exist.</dd>
</dl>

<p><b>exec</b> will not work well with TUI applications when a
console is not present, as is done when launching applications
under wish. It is desirable to have console applications hidden and
detached. This is a designed-in limitation as <b>exec</b> wants to
communicate over pipes. The Expect extension addresses this issue
when communicating with a TUI application.</p>
</dd>

<dt><a name="M25"><b>Windows NT</b></a></dt>

<dd>When attempting to execute an application, <b>exec</b> first
searches for the name as it was specified. Then, in order,
<b>.com</b>, <b>.exe</b>, and <b>.bat</b> are appended to the end
of the specified name and it searches for the longer name. If a
directory name was not specified as part of the application name,
the following directories are automatically searched in order when
attempting to locate the application: 

<dl class="portability issues">
<dd>&bull;&nbsp; The directory from which the Tcl executable was
loaded.</dd>

<dd>&bull;&nbsp; The current directory.</dd>

<dd>&bull;&nbsp; The Windows NT 32-bit system directory.</dd>

<dd>&bull;&nbsp; The Windows NT 16-bit system directory.</dd>

<dd>&bull;&nbsp; The Windows NT home directory.</dd>

<dd>&bull;&nbsp; The directories listed in the path.</dd>
</dl>

<dl>
<dd>
<p>In order to execute shell built-in commands like <b>dir</b> and
<b>copy</b>, the caller must prepend the desired command with
&ldquo;<b>cmd.exe /c</b> &rdquo; because built-in commands are not
implemented using executables.</p>
</dd>
</dl>
</dd>

<dt><a name="M26"><b>Windows 9x</b></a></dt>

<dd>When attempting to execute an application, <b>exec</b> first
searches for the name as it was specified. Then, in order,
<b>.com</b>, <b>.exe</b>, and <b>.bat</b> are appended to the end
of the specified name and it searches for the longer name. If a
directory name was not specified as part of the application name,
the following directories are automatically searched in order when
attempting to locate the application: 

<dl class="portability issues">
<dd>&bull;&nbsp; The directory from which the Tcl executable was
loaded.</dd>

<dd>&bull;&nbsp; The current directory.</dd>

<dd>&bull;&nbsp; The Windows 9x system directory.</dd>

<dd>&bull;&nbsp; The Windows 9x home directory.</dd>

<dd>&bull;&nbsp; The directories listed in the path.</dd>
</dl>

<p>In order to execute shell built-in commands like <b>dir</b> and
<b>copy</b>, the caller must prepend the desired command with
&ldquo;<b>command.com /c</b> &rdquo; because built-in commands are
not implemented using executables.</p>

<p>Once a 16-bit DOS application has read standard input from a
console and then quit, all subsequently run 16-bit DOS applications
will see the standard input as already closed. 32-bit applications
do not have this problem and will run correctly, even after a
16-bit DOS application thinks that standard input is closed. There
is no known workaround for this bug at this time.</p>

<p>Redirection between the <b>NUL:</b> device and a 16-bit
application does not always work. When redirecting from
<b>NUL:</b>, some applications may hang, others will get an
infinite stream of &ldquo;0x01&rdquo; bytes, and some will actually
correctly get an immediate end-of-file; the behavior seems to
depend upon something compiled into the application itself. When
redirecting greater than 4K or so to <b>NUL:</b>, some applications
will hang. The above problems do not happen with 32-bit
applications.</p>

<p>All DOS 16-bit applications are run synchronously. All standard
input from a pipe to a 16-bit DOS application is collected into a
temporary file; the other end of the pipe must be closed before the
16-bit DOS application begins executing. All standard output or
error from a 16-bit DOS application to a pipe is collected into
temporary files; the application must terminate before the
temporary files are redirected to the next stage of the pipeline.
This is due to a workaround for a Windows 95 bug in the
implementation of pipes, and is how the standard Windows 95 DOS
shell handles pipes itself.</p>

<p>Certain applications, such as <b>command.com</b>, should not be
executed interactively. Applications which directly access the
console window, rather than reading from their standard input and
writing to their standard output may fail, hang Tcl, or even hang
the system if their own private console window is not available to
them.</p>
</dd>

<dt><a name="M27"><b>Unix</b></a></dt>

<dd>The <b>exec</b> command is fully functional and works as
described.</dd>
</dl>

<h3><a name="M28">UNIX EXAMPLES</a></h3>

Here are some examples of the use of the <b>exec</b> command on
Unix. 

<p>To execute a simple program and get its result:</p>

<pre>
<b>exec</b> uname -a
</pre>

<p>To execute a program that can return a non-zero result, you
should wrap the call to <b>exec</b> in <b><a href=
"../TclCmd/catch.htm">catch</a></b> and check the contents of the
<b>-errorcode</b> return option if you have an error:</p>

<pre>
set status 0
if {[catch {<b>exec</b> grep foo bar.txt} results options]} {
   set details [dict get $options -errorcode]
   if {[lindex $details 0] eq "CHILDSTATUS"} {
      set status [lindex $details 2]
   } else {
      # Some kind of unexpected failure
   }
}
</pre>

<p>When translating a command from a Unix shell invocation, care
should be taken over the fact that single quote characters have no
special significance to Tcl. Thus:</p>

<pre>
awk '{sum += $1} END {print sum}' numbers.list
</pre>

would be translated into something like: 

<pre>
<b>exec</b> awk {{sum += $1} END {print sum}} numbers.list
</pre>

<p>If you are converting invocations involving shell globbing, you
should remember that Tcl does not handle globbing or expand things
into multiple arguments by default. Instead you should write things
like this:</p>

<pre>
<b>exec</b> ls -l {*}[glob *.tcl]
</pre>

<h3><a name="M29">WINDOWS EXAMPLES</a></h3>

Here are some examples of the use of the <b>exec</b> command on
Windows. 

<p>To start an instance of <i>notepad</i> editing a file without
waiting for the user to finish editing the file:</p>

<pre>
<b>exec</b> notepad myfile.txt &amp;
</pre>

<p>To print a text file using <i>notepad</i>:</p>

<pre>
<b>exec</b> notepad /p myfile.txt
</pre>

<p>If a program calls other programs, such as is common with
compilers, then you may need to resort to batch files to hide the
console windows that sometimes pop up:</p>

<pre>
<b>exec</b> cmp.bat somefile.c -o somefile
</pre>

With the file <i>cmp.bat</i> looking something like: 

<pre>
@gcc %1 %2 %3 %4 %5 %6 %7 %8 %9
</pre>

<p>Sometimes you need to be careful, as different programs may have
the same name and be in the path. It can then happen that typing a
command at the DOS prompt finds <i>a different program</i> than the
same command run via <b>exec</b>. This is because of the
(documented) differences in behaviour between <b>exec</b> and DOS
batch files.</p>

<p>When in doubt, use the command <b><a href=
"../TclCmd/library.htm">auto_execok</a></b>: it will return the
complete path to the program as seen by the <b>exec</b> command.
This applies especially when you want to run &ldquo;internal&rdquo;
commands like <i>dir</i> from a Tcl script (if you just want to
list filenames, use the <b><a href=
"../TclCmd/glob.htm">glob</a></b> command.) To do that, use
this:</p>

<pre>
<b>exec</b> {*}[auto_execok dir] *.tcl
</pre>

<h3><a name="M30">SEE ALSO</a></h3>

<b><a href="../TclCmd/error.htm">error</a></b>, <b><a href=
"../TclCmd/open.htm">open</a></b> 

<h3><a name="M31">KEYWORDS</a></h3>

<a href="../Keywords/E.htm#execute">execute</a>, <a href=
"../Keywords/P.htm#pipeline">pipeline</a>, <a href=
"../Keywords/R.htm#redirection">redirection</a>, <a href=
"../Keywords/S.htm#subprocess">subprocess</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc. Copyright &copy;
2006 Donal K. Fellows.</div>
</body>
</html>

