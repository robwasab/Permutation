<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Applications - wish manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">UserCmd</a>
<small>&gt;</small> wish</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="wish.htm#M2" name="L15">NAME</a> 

<dl>
<dd>wish - Simple windowing shell</dd>
</dl>
</dd>

<dd><a href="wish.htm#M3" name="L16">SYNOPSIS</a> 

<dl>
<dd><b>wish</b> ?<b>-encoding</b> <i>name</i>? ?<i>fileName arg arg
...</i>?</dd>
</dl>
</dd>

<dd><a href="wish.htm#M4" name="L17">OPTIONS</a> 

<dl class="options">
<dd><a href="wish.htm#M5" name="L18"><b>-encoding</b>
<i>name</i></a></dd>

<dd><a href="wish.htm#M6" name="L19"><b>-colormap</b>
<i>new</i></a></dd>

<dd><a href="wish.htm#M7" name="L20"><b>-display</b>
<i>display</i></a></dd>

<dd><a href="wish.htm#M8" name="L21"><b>-geometry</b>
<i>geometry</i></a></dd>

<dd><a href="wish.htm#M9" name="L22"><b>-name</b>
<i>name</i></a></dd>

<dd><a href="wish.htm#M10" name="L23"><b>-sync</b></a></dd>

<dd><a href="wish.htm#M11" name="L24"><b>-use</b>
<i>id</i></a></dd>

<dd><a href="wish.htm#M12" name="L25"><b>-visual</b>
<i>visual</i></a></dd>

<dd><a href="wish.htm#M13" name="L26"><b>--</b></a></dd>
</dl>
</dd>

<dd><a href="wish.htm#M14" name="L27">DESCRIPTION</a></dd>

<dd><a href="wish.htm#M15" name="L28">OPTION PROCESSING</a></dd>

<dd><a href="wish.htm#M16" name="L29">APPLICATION NAME AND
CLASS</a></dd>

<dd><a href="wish.htm#M17" name="L30">VARIABLES</a> 

<dl class="variables">
<dd><a href="wish.htm#M18" name="L31"><b>argc</b></a></dd>

<dd><a href="wish.htm#M19" name="L32"><b>argv</b></a></dd>

<dd><a href="wish.htm#M20" name="L33"><b>argv0</b></a></dd>

<dd><a href="wish.htm#M21" name="L34"><b>geometry</b></a></dd>

<dd><a href="wish.htm#M22" name=
"L35"><b>tcl_interactive</b></a></dd>
</dl>
</dd>

<dd><a href="wish.htm#M23" name="L36">SCRIPT FILES</a></dd>

<dd><a href="wish.htm#M24" name="L37">PROMPTS</a></dd>

<dd><a href="wish.htm#M25" name="L38">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

wish - Simple windowing shell 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>wish</b> ?<b>-encoding</b> <i>name</i>? ?<i>fileName arg arg
...</i>?<br>
<h3><a name="M4">OPTIONS</a></h3>

<dl class="options">
<dt><a name="M5"><b>-encoding</b> <i>name</i></a></dt>

<dd>Specifies the encoding of the text stored in <i>fileName</i>.
This option is only recognized prior to the <i>fileName</i>
argument.</dd>

<dt><a name="M6"><b>-colormap</b> <i>new</i></a></dt>

<dd>Specifies that the window should have a new private colormap
instead of using the default colormap for the screen.</dd>

<dt><a name="M7"><b>-display</b> <i>display</i></a></dt>

<dd>Display (and screen) on which to display window.</dd>

<dt><a name="M8"><b>-geometry</b> <i>geometry</i></a></dt>

<dd>Initial geometry to use for window. If this option is
specified, its value is stored in the <b>geometry</b> global
variable of the application's Tcl interpreter.</dd>

<dt><a name="M9"><b>-name</b> <i>name</i></a></dt>

<dd>Use <i>name</i> as the title to be displayed in the window, and
as the name of the interpreter for <b><a href=
"../TkCmd/send.htm">send</a></b> commands.</dd>

<dt><a name="M10"><b>-sync</b></a></dt>

<dd>Execute all X server commands synchronously, so that errors are
reported immediately. This will result in much slower execution,
but it is useful for debugging.</dd>

<dt><a name="M11"><b>-use</b> <i>id</i></a></dt>

<dd>Specifies that the main window for the application is to be
embedded in the window whose identifier is <i>id</i>, instead of
being created as an independent toplevel window. <i>Id</i> must be
specified in the same way as the value for the <b>-use</b> option
for toplevel widgets (i.e. it has a form like that returned by the
<b><a href="../TkCmd/winfo.htm">winfo id</a></b> command). 

<dl>
<dd>Note that on some platforms this will only work correctly if
<i>id</i> refers to a Tk <b><a href=
"../TkCmd/frame.htm">frame</a></b> or <b><a href=
"../TkCmd/toplevel.htm">toplevel</a></b> that has its
<b>-container</b> option enabled.</dd>
</dl>
</dd>

<dt><a name="M12"><b>-visual</b> <i>visual</i></a></dt>

<dd>Specifies the visual to use for the window. <i>Visual</i> may
have any of the forms supported by the <b><a href=
"../TkLib/GetVisual.htm">Tk_GetVisual</a></b> procedure.</dd>

<dt><a name="M13"><b>--</b></a></dt>

<dd>Pass all remaining arguments through to the script's
<b>argv</b> variable without interpreting them. This provides a
mechanism for passing arguments such as <b>-name</b> to a script
instead of having <b>wish</b> interpret them.</dd>
</dl>

<h3><a name="M14">DESCRIPTION</a></h3>

<b>Wish</b> is a simple program consisting of the Tcl command
language, the Tk toolkit, and a main program that reads commands
from standard input or from a file. It creates a main window and
then processes Tcl commands. If <b>wish</b> is invoked with
arguments, then the first few arguments, ?<b>-encoding</b>
<i>name</i>? ?<i>fileName</i>? specify the name of a script file,
and, optionally, the encoding of the text data stored in that
script file. A value for <i>fileName</i> is recognized if the
appropriate argument does not start with &ldquo;-&rdquo;. 

<p>If there are no arguments, or the arguments do not specify a
<i>fileName</i>, then wish reads Tcl commands interactively from
standard input. It will continue processing commands until all
windows have been deleted or until end-of-file is reached on
standard input. If there exists a file &ldquo;<b>.wishrc</b>&rdquo;
in the home directory of the user, <b>wish</b> evaluates the file
as a Tcl script just before reading the first command from standard
input.</p>

<p>If arguments to <b>wish</b> do specify a <i>fileName</i>, then
<i>fileName</i> is treated as the name of a script file.
<b>Wish</b> will evaluate the script in <i>fileName</i> (which
presumably creates a user interface), then it will respond to
events until all windows have been deleted. Commands will not be
read from standard input. There is no automatic evaluation of
&ldquo;<b>.wishrc</b>&rdquo; when the name of a script file is
presented on the <b>wish</b> command line, but the script file can
always <b><a href="../TclCmd/source.htm">source</a></b> it if
desired.</p>

<p>Note that on Windows, the <b>wish</b><i>version</i><b>.exe</b>
program varies from the <b><a href=
"../UserCmd/tclsh.htm">tclsh</a></b><i>version</i><b>.exe</b>
program in an additional important way: it does not connect to a
standard Windows console and is instead a windowed program. Because
of this, it additionally provides access to its own <b><a href=
"../TkCmd/console.htm">console</a></b> command.</p>

<h3><a name="M15">OPTION PROCESSING</a></h3>

<b>Wish</b> automatically processes all of the command-line options
described in the <b><a href="../TkCmd/options.htm">OPTIONS</a></b>
summary above. Any other command-line arguments besides these are
passed through to the application using the <b>argc</b> and
<b>argv</b> variables described later. 

<h3><a name="M16">APPLICATION NAME AND CLASS</a></h3>

The name of the application, which is used for purposes such as
<b><a href="../TkCmd/send.htm">send</a></b> commands, is taken from
the <b>-name</b> option, if it is specified; otherwise it is taken
from <i>fileName</i>, if it is specified, or from the command name
by which <b>wish</b> was invoked. In the last two cases, if the
name contains a &ldquo;/&rdquo; character, then only the characters
after the last slash are used as the application name. 

<p>The class of the application, which is used for purposes such as
specifying options with a <b>RESOURCE_MANAGER</b> property or
.Xdefaults file, is the same as its name except that the first
letter is capitalized.</p>

<h3><a name="M17">VARIABLES</a></h3>

<b>Wish</b> sets the following Tcl variables: 

<dl class="variables">
<dt><a name="M18"><b>argc</b></a></dt>

<dd>Contains a count of the number of <i>arg</i> arguments (0 if
none), not including the options described above.</dd>

<dt><a name="M19"><b>argv</b></a></dt>

<dd>Contains a Tcl list whose elements are the <i>arg</i> arguments
that follow a <b>--</b> option or do not match any of the options
described in <b><a href="../TkCmd/options.htm">OPTIONS</a></b>
above, in order, or an empty string if there are no such
arguments.</dd>

<dt><a name="M20"><b>argv0</b></a></dt>

<dd>Contains <i>fileName</i> if it was specified. Otherwise,
contains the name by which <b>wish</b> was invoked.</dd>

<dt><a name="M21"><b>geometry</b></a></dt>

<dd>If the <b>-geometry</b> option is specified, <b>wish</b> copies
its value into this variable. If the variable still exists after
<i>fileName</i> has been evaluated, <b>wish</b> uses the value of
the variable in a <b><a href="../TkCmd/wm.htm">wm geometry</a></b>
command to set the main window's geometry.</dd>

<dt><a name="M22"><b>tcl_interactive</b></a></dt>

<dd>Contains 1 if <b>wish</b> is reading commands interactively
(<i>fileName</i> was not specified and standard input is a
terminal-like device), 0 otherwise.</dd>
</dl>

<h3><a name="M23">SCRIPT FILES</a></h3>

If you create a Tcl script in a file whose first line is 

<pre>
<b>#!/usr/local/bin/wish</b>
</pre>

then you can invoke the script file directly from your shell if you
mark it as executable. This assumes that <b>wish</b> has been
installed in the default location in /usr/local/bin; if it is
installed somewhere else then you will have to modify the above
line to match. Many UNIX systems do not allow the <b>#!</b> line to
exceed about 30 characters in length, so be sure that the
<b>wish</b> executable can be accessed with a short file name. 

<p>An even better approach is to start your script files with the
following three lines:</p>

<pre>
<b>#!/bin/sh
# the next line restarts using wish \
exec wish "$0" ${1+"$@"}</b>
</pre>

This approach has three advantages over the approach in the
previous paragraph. First, the location of the <b>wish</b> binary
does not have to be hard-wired into the script: it can be anywhere
in your shell search path. Second, it gets around the 30-character
file name limit in the previous approach. Third, this approach will
work even if <b>wish</b> is itself a shell script (this is done on
some systems in order to handle multiple architectures or operating
systems: the <b>wish</b> script selects one of several binaries to
run). The three lines cause both <b>sh</b> and <b>wish</b> to
process the script, but the <b><a href=
"../TclCmd/exec.htm">exec</a></b> is only executed by <b>sh</b>.
<b>sh</b> processes the script first; it treats the second line as
a comment and executes the third line. The <b><a href=
"../TclCmd/exec.htm">exec</a></b> statement cause the shell to stop
processing and instead to start up <b>wish</b> to reprocess the
entire script. When <b>wish</b> starts up, it treats all three
lines as comments, since the backslash at the end of the second
line causes the third line to be treated as part of the comment on
the second line. 

<p>The end of a script file may be marked either by the physical
end of the medium, or by the character, &ldquo;\032&rdquo;
(&ldquo;\u001a&rdquo;, control-Z). If this character is present in
the file, the <b>wish</b> application will read text up to but not
including the character. An application that requires this
character in the file may encode it as &ldquo;\032&rdquo;,
&ldquo;\x1a&rdquo;, or &ldquo;\u001a&rdquo;; or may generate it by
use of commands such as <b><a href=
"../TclCmd/format.htm">format</a></b> or <b><a href=
"../TclCmd/binary.htm">binary</a></b>.</p>

<h3><a name="M24">PROMPTS</a></h3>

When <b>wish</b> is invoked interactively it normally prompts for
each command with &ldquo;<b>%</b> &rdquo;. You can change the
prompt by setting the variables <b>tcl_prompt1</b> and
<b>tcl_prompt2</b>. If variable <b>tcl_prompt1</b> exists then it
must consist of a Tcl script to output a prompt; instead of
outputting a prompt <b>wish</b> will evaluate the script in
<b>tcl_prompt1</b>. The variable <b>tcl_prompt2</b> is used in a
similar way when a newline is typed but the current command is not
yet complete; if <b>tcl_prompt2</b> is not set then no prompt is
output for incomplete commands. 

<h3><a name="M25">KEYWORDS</a></h3>

<a href="../Keywords/S.htm#shell">shell</a>, <a href=
"../Keywords/T.htm#toolkit">toolkit</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1991-1994 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

