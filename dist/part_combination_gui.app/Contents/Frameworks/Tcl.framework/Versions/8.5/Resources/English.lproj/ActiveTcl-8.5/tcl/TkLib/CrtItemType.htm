<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_CreateItemType manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> CrtItemType</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="CrtItemType.htm#M2" name="L134">NAME</a> 

<dl>
<dd>Tk_CreateItemType, Tk_GetItemTypes - define new kind of canvas
item</dd>
</dl>
</dd>

<dd><a href="CrtItemType.htm#M3" name="L135">SYNOPSIS</a></dd>

<dd><a href="CrtItemType.htm#M4" name="L136">ARGUMENTS</a></dd>

<dd><a href="CrtItemType.htm#M5" name="L137">INTRODUCTION</a></dd>

<dd><a href="CrtItemType.htm#M6" name="L138">DATA
STRUCTURES</a></dd>

<dd><a href="CrtItemType.htm#M7" name="L139">NAME</a></dd>

<dd><a href="CrtItemType.htm#M8" name="L140">ITEMSIZE</a></dd>

<dd><a href="CrtItemType.htm#M9" name="L141">CREATEPROC</a></dd>

<dd><a href="CrtItemType.htm#M10" name="L142">CONFIGSPECS</a></dd>

<dd><a href="CrtItemType.htm#M11" name="L143">CONFIGPROC</a></dd>

<dd><a href="CrtItemType.htm#M12" name="L144">COORDPROC</a></dd>

<dd><a href="CrtItemType.htm#M13" name="L145">DELETEPROC</a></dd>

<dd><a href="CrtItemType.htm#M14" name="L146">DISPLAYPROC AND
ALWAYSREDRAW</a></dd>

<dd><a href="CrtItemType.htm#M15" name="L147">POINTPROC</a></dd>

<dd><a href="CrtItemType.htm#M16" name="L148">AREAPROC</a></dd>

<dd><a href="CrtItemType.htm#M17" name=
"L149">POSTSCRIPTPROC</a></dd>

<dd><a href="CrtItemType.htm#M18" name="L150">SCALEPROC</a></dd>

<dd><a href="CrtItemType.htm#M19" name=
"L151">TRANSLATEPROC</a></dd>

<dd><a href="CrtItemType.htm#M20" name="L152">INDEXPROC</a></dd>

<dd><a href="CrtItemType.htm#M21" name="L153">ICURSORPROC</a></dd>

<dd><a href="CrtItemType.htm#M22" name=
"L154">SELECTIONPROC</a></dd>

<dd><a href="CrtItemType.htm#M23" name="L155">INSERTPROC</a></dd>

<dd><a href="CrtItemType.htm#M24" name="L156">DCHARSPROC</a></dd>

<dd><a href="CrtItemType.htm#M25" name="L157">SEE ALSO</a></dd>

<dd><a href="CrtItemType.htm#M26" name="L158">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tk_CreateItemType, Tk_GetItemTypes - define new kind of canvas item


<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
<b>Tk_CreateItemType</b>(<i>typePtr</i>)<br>
Tk_ItemType *<br>
<b>Tk_GetItemTypes</b>()<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Tk_ItemType <b>*typePtr</b> (in)</dt>

<dd>Structure that defines the new type of canvas item.</dd>
</dl>

<h3><a name="M5">INTRODUCTION</a></h3>

<b>Tk_CreateItemType</b> is invoked to define a new kind of canvas
item described by the <i>typePtr</i> argument. An item type
corresponds to a particular value of the <i>type</i> argument to
the <b>create</b> widget command for canvases, and the code that
implements a canvas item type is called a <i>type manager</i>. Tk
defines several built-in item types, such as <b>rectangle</b> and
<b><a href="../TkCmd/text.htm">text</a></b> and <b><a href=
"../TkCmd/image.htm">image</a></b>, but <b>Tk_CreateItemType</b>
allows additional item types to be defined. Once
<b>Tk_CreateItemType</b> returns, the new item type may be used in
new or existing canvas widgets just like the built-in item types. 

<p><b>Tk_GetItemTypes</b> returns a pointer to the first in the
list of all item types currently defined for canvases. The entries
in the list are linked together through their <i>nextPtr</i>
fields, with the end of the list marked by a NULL
<i>nextPtr</i>.</p>

<p>You may find it easier to understand the rest of this manual
entry by looking at the code for an existing canvas item type such
as bitmap (file tkCanvBmap.c) or text (tkCanvText.c). The easiest
way to create a new type manager is to copy the code for an
existing type and modify it for the new type.</p>

<p>Tk provides a number of utility procedures for the use of canvas
type managers, such as <b>Tk_CanvasCoords</b> and <b><a href=
"../TkLib/CanvPsY.htm">Tk_CanvasPsColor</a></b>; these are
described in separate manual entries.</p>

<h3><a name="M6">DATA STRUCTURES</a></h3>

A type manager consists of a collection of procedures that provide
a standard set of operations on items of that type. The type
manager deals with three kinds of data structures. The first data
structure is a Tk_ItemType; it contains information such as the
name of the type and pointers to the standard procedures
implemented by the type manager: 

<pre>
typedef struct Tk_ItemType {
    char *<i>name</i>;
    int <i>itemSize</i>;
    Tk_ItemCreateProc *<i>createProc</i>;
    Tk_ConfigSpec *<i>configSpecs</i>;
    Tk_ItemConfigureProc *<i>configProc</i>;
    Tk_ItemCoordProc *<i>coordProc</i>;
    Tk_ItemDeleteProc *<i>deleteProc</i>;
    Tk_ItemDisplayProc *<i>displayProc</i>;
    int <i>alwaysRedraw</i>;
    Tk_ItemPointProc *<i>pointProc</i>;
    Tk_ItemAreaProc *<i>areaProc</i>;
    Tk_ItemPostscriptProc *<i>postscriptProc</i>;
    Tk_ItemScaleProc *<i>scaleProc</i>;
    Tk_ItemTranslateProc *<i>translateProc</i>;
    Tk_ItemIndexProc *<i>indexProc</i>;
    Tk_ItemCursorProc *<i>icursorProc</i>;
    Tk_ItemSelectionProc *<i>selectionProc</i>;
    Tk_ItemInsertProc *<i>insertProc</i>;
    Tk_ItemDCharsProc *<i>dCharsProc</i>;
    Tk_ItemType *<i>nextPtr</i>;
} Tk_ItemType;
</pre>

<p>The fields of a Tk_ItemType structure are described in more
detail later in this manual entry. When <b>Tk_CreateItemType</b> is
called, its <i>typePtr</i> argument must point to a structure with
all of the fields initialized except <i>nextPtr</i>, which Tk sets
to link all the types together into a list. The structure must be
in permanent memory (either statically allocated or dynamically
allocated but never freed); Tk retains a pointer to this
structure.</p>

<p>The second data structure manipulated by a type manager is an
<i>item record</i>. For each item in a canvas there exists one item
record. All of the items of a given type generally have item
records with the same structure, but different types usually have
different formats for their item records. The first part of each
item record is a header with a standard structure defined by Tk via
the type Tk_Item; the rest of the item record is defined by the
type manager. A type manager must define its item records with a
Tk_Item as the first field. For example, the item record for bitmap
items is defined as follows:</p>

<pre>
typedef struct BitmapItem {
    Tk_Item <i>header</i>;
    double <i>x</i>, <i>y</i>;
    Tk_Anchor <i>anchor</i>;
    Pixmap <i>bitmap</i>;
    XColor *<i>fgColor</i>;
    XColor *<i>bgColor</i>;
    GC <i>gc</i>;
} BitmapItem;
</pre>

The <i>header</i> substructure contains information used by Tk to
manage the item, such as its identifier, its tags, its type, and
its bounding box. The fields starting with <i>x</i> belong to the
type manager: Tk will never read or write them. The type manager
should not need to read or write any of the fields in the header
except for four fields whose names are <i>x1</i>, <i>y1</i>,
<i>x2</i>, and <i>y2</i>. These fields give a bounding box for the
items using integer canvas coordinates: the item should not cover
any pixels with x-coordinate lower than <i>x1</i> or y-coordinate
lower than <i>y1</i>, nor should it cover any pixels with
x-coordinate greater than or equal to <i>x2</i> or y-coordinate
greater than or equal to <i>y2</i>. It is up to the type manager to
keep the bounding box up to date as the item is moved and
reconfigured. 

<p>Whenever Tk calls a procedure in a type manager it passes in a
pointer to an item record. The argument is always passed as a
pointer to a Tk_Item; the type manager will typically cast this
into a pointer to its own specific type, such as BitmapItem.</p>

<p>The third data structure used by type managers has type
Tk_Canvas; it serves as an opaque handle for the canvas widget as a
whole. Type managers need not know anything about the contents of
this structure. A Tk_Canvas handle is typically passed in to the
procedures of a type manager, and the type manager can pass the
handle back to library procedures such as <a href=
"../TkLib/CanvTkwin.htm">Tk_CanvasTkwin</a> to fetch information
about the canvas.</p>

<h4><a name="M7">NAME</a></h4>

<p>This section and the ones that follow describe each of the
fields in a Tk_ItemType structure in detail. The <i>name</i> field
provides a string name for the item type. Once <b><a href=
"../TkLib/CrtImgType.htm">Tk_CreateImageType</a></b> returns, this
name may be used in <b>create</b> widget commands to create items
of the new type. If there already existed an item type by this name
then the new item type replaces the old one.</p>

<h4><a name="M8">ITEMSIZE</a></h4>

<i>typePtr-&gt;itemSize</i> gives the size in bytes of item records
of this type, including the Tk_Item header. Tk uses this size to
allocate memory space for items of the type. All of the item
records for a given type must have the same size. If variable
length fields are needed for an item (such as a list of points for
a polygon), the type manager can allocate a separate object of
variable length and keep a pointer to it in the item record. 

<h4><a name="M9">CREATEPROC</a></h4>

<i>typePtr-&gt;createProc</i> points to a procedure for Tk to call
whenever a new item of this type is created.
<i>typePtr-&gt;createProc</i> must match the following prototype: 

<pre>
typedef int Tk_ItemCreateProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>objc</i>,
    Tcl_Obj* const <i>objv</i>[]);
</pre>

The <i>interp</i> argument is the interpreter in which the canvas's
<b>create</b> widget command was invoked, and <i>canvas</i> is a
handle for the canvas widget. <i>itemPtr</i> is a pointer to a
newly-allocated item of size <i>typePtr-&gt;itemSize</i>. Tk has
already initialized the item's header (the first
<b>sizeof(Tk_ItemType)</b> bytes). The <i>objc</i> and <i>objv</i>
arguments describe all of the arguments to the <b>create</b>
command after the <i>type</i> argument. For example, in the widget
command 

<pre>
<b>  .c create rectangle 10 20 50 50 -fill black</b>
</pre>

<i>objc</i> will be <b>6</b> and <i>objv</i>[0] will contain the
integer object <b>10</b>. 

<p><i>createProc</i> should use <i>objc</i> and <i>objv</i> to
initialize the type-specific parts of the item record and set an
initial value for the bounding box in the item's header. It should
return a standard Tcl completion code and leave an error message in
<i>interp-&gt;result</i> if an error occurs. If an error occurs Tk
will free the item record, so <i>createProc</i> must be sure to
leave the item record in a clean state if it returns an error
(e.g., it must free any additional memory that it allocated for the
item).</p>

<h4><a name="M10">CONFIGSPECS</a></h4>

Each type manager must provide a standard table describing its
configuration options, in a form suitable for use with <b><a href=
"../TkLib/ConfigWidg.htm">Tk_ConfigureWidget</a></b>. This table
will normally be used by <i>typePtr-&gt;createProc</i> and
<i>typePtr-&gt;configProc</i>, but Tk also uses it directly to
retrieve option information in the <b>itemcget</b> and
<b>itemconfigure</b> widget commands.
<i>typePtr-&gt;configSpecs</i> must point to the configuration
table for this type. Note: Tk provides a custom option type
<b>tk_CanvasTagsOption</b> for implementing the <b>-tags</b>
option; see an existing type manager for an example of how to use
it in <i>configSpecs</i>. 

<h4><a name="M11">CONFIGPROC</a></h4>

<i>typePtr-&gt;configProc</i> is called by Tk whenever the
<b>itemconfigure</b> widget command is invoked to change the
configuration options for a canvas item. This procedure must match
the following prototype: 

<pre>
typedef int Tk_ItemConfigureProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>objc</i>,
    Tcl_Obj* const <i>objv</i>[],
    int <i>flags</i>);
</pre>

The <i>interp</i> objument identifies the interpreter in which the
widget command was invoked, <i>canvas</i> is a handle for the
canvas widget, and <i>itemPtr</i> is a pointer to the item being
configured. <i>objc</i> and <i>objv</i> contain the configuration
options. For example, if the following command is invoked: 

<pre>
<b>  .c itemconfigure 2 -fill red -outline black</b>
</pre>

<i>objc</i> is <b>4</b> and <i>objv</i> contains the string objects
<b>-fill</b> through <b>black</b>. <i>objc</i> will always be an
even value. The <i>flags</i> argument contains flags to pass to
<b><a href="../TkLib/ConfigWidg.htm">Tk_ConfigureWidget</a></b>;
currently this value is always <b>TK_CONFIG_ARGV_ONLY</b> when Tk
invokes <i>typePtr-&gt;configProc</i>, but the type manager's
<i>createProc</i> procedure will usually invoke <i>configProc</i>
with different flag values. 

<p><i>typePtr-&gt;configProc</i> returns a standard Tcl completion
code and leaves an error message in <i>interp-&gt;result</i> if an
error occurs. It must update the item's bounding box to reflect the
new configuration options.</p>

<h4><a name="M12">COORDPROC</a></h4>

<i>typePtr-&gt;coordProc</i> is invoked by Tk to implement the
<b>coords</b> widget command for an item. It must match the
following prototype: 

<pre>
typedef int Tk_ItemCoordProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>objc</i>,
    Tcl_Obj* const <i>objv</i>[]);
</pre>

The arguments <i>interp</i>, <i>canvas</i>, and <i>itemPtr</i> all
have the standard meanings, and <i>objc</i> and <i>objv</i>
describe the coordinate arguments. For example, if the following
widget command is invoked: 

<pre>
<b>  .c coords 2 30 90</b>
</pre>

<i>objc</i> will be <b>2</b> and <b>objv</b> will contain the
integer objects <b>30</b> and <b>90</b>. 

<p>The <i>coordProc</i> procedure should process the new
coordinates, update the item appropriately (e.g., it must reset the
bounding box in the item's header), and return a standard Tcl
completion code. If an error occurs, <i>coordProc</i> must leave an
error message in <i>interp-&gt;result</i>.</p>

<h4><a name="M13">DELETEPROC</a></h4>

<i>typePtr-&gt;deleteProc</i> is invoked by Tk to delete an item
and free any resources allocated to it. It must match the following
prototype: 

<pre>
typedef void Tk_ItemDeleteProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    Display *<i>display</i>);
</pre>

The <i>canvas</i> and <i>itemPtr</i> arguments have the usual
interpretations, and <i>display</i> identifies the X display
containing the canvas. <i>deleteProc</i> must free up any resources
allocated for the item, so that Tk can free the item record.
<i>deleteProc</i> should not actually free the item record; this
will be done by Tk when <i>deleteProc</i> returns. 

<h4><a name="M14">DISPLAYPROC AND ALWAYSREDRAW</a></h4>

<i>typePtr-&gt;displayProc</i> is invoked by Tk to redraw an item
on the screen. It must match the following prototype: 

<pre>
typedef void Tk_ItemDisplayProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    Display *<i>display</i>,
    Drawable <i>dst</i>,
    int <i>x</i>,
    int <i>y</i>,
    int <i>width</i>,
    int <i>height</i>);
</pre>

The <i>canvas</i> and <i>itemPtr</i> arguments have the usual
meaning. <i>display</i> identifies the display containing the
canvas, and <i>dst</i> specifies a drawable in which the item
should be rendered; typically this is an off-screen pixmap, which
Tk will copy into the canvas's window once all relevant items have
been drawn. <i>x</i>, <i>y</i>, <i>width</i>, and <i>height</i>
specify a rectangular region in canvas coordinates, which is the
area to be redrawn; only information that overlaps this area needs
to be redrawn. Tk will not call <i>displayProc</i> unless the
item's bounding box overlaps the redraw area, but the type manager
may wish to use the redraw area to optimize the redisplay of the
item. 

<p>Because of scrolling and the use of off-screen pixmaps for
double-buffered redisplay, the item's coordinates in <i>dst</i>
will not necessarily be the same as those in the canvas.
<i>displayProc</i> should call <b><a href=
"../TkLib/CanvTkwin.htm">Tk_CanvasDrawableCoords</a></b> to
transform coordinates from those of the canvas to those of
<i>dst</i>.</p>

<p>Normally an item's <i>displayProc</i> is only invoked if the
item overlaps the area being displayed. However, if
<i>typePtr-&gt;alwaysRedraw</i> has a non-zero value, then
<i>displayProc</i> is invoked during every redisplay operation,
even if the item does not overlap the area of redisplay.
<i>alwaysRedraw</i> should normally be set to 0; it is only set to
1 in special cases such as window items that need to be unmapped
when they are off-screen.</p>

<h4><a name="M15">POINTPROC</a></h4>

<i>typePtr-&gt;pointProc</i> is invoked by Tk to find out how close
a given point is to a canvas item. Tk uses this procedure for
purposes such as locating the item under the mouse or finding the
closest item to a given point. The procedure must match the
following prototype: 

<pre>
typedef double Tk_ItemPointProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double *<i>pointPtr</i>);
</pre>

<i>canvas</i> and <i>itemPtr</i> have the usual meaning.
<i>pointPtr</i> points to an array of two numbers giving the x and
y coordinates of a point. <i>pointProc</i> must return a real value
giving the distance from the point to the item, or 0 if the point
lies inside the item. 

<h4><a name="M16">AREAPROC</a></h4>

<i>typePtr-&gt;areaProc</i> is invoked by Tk to find out the
relationship between an item and a rectangular area. It must match
the following prototype: 

<pre>
typedef int Tk_ItemAreaProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double *<i>rectPtr</i>);
</pre>

<i>canvas</i> and <i>itemPtr</i> have the usual meaning.
<i>rectPtr</i> points to an array of four real numbers; the first
two give the x and y coordinates of the upper left corner of a
rectangle, and the second two give the x and y coordinates of the
lower right corner. <i>areaProc</i> must return -1 if the item lies
entirely outside the given area, 0 if it lies partially inside and
partially outside the area, and 1 if it lies entirely inside the
area. 

<h4><a name="M17">POSTSCRIPTPROC</a></h4>

<i>typePtr-&gt;postscriptProc</i> is invoked by Tk to generate
Postscript for an item during the <b>postscript</b> widget command.
If the type manager is not capable of generating Postscript then
<i>typePtr-&gt;postscriptProc</i> should be NULL. The procedure
must match the following prototype: 

<pre>
typedef int Tk_ItemPostscriptProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>prepass</i>);
</pre>

The <i>interp</i>, <i>canvas</i>, and <i>itemPtr</i> arguments all
have standard meanings; <i>prepass</i> will be described below. If
<i>postscriptProc</i> completes successfully, it should append
Postscript for the item to the information in
<i>interp-&gt;result</i> (e.g. by calling <b><a href=
"../TclLib/SetResult.htm">Tcl_AppendResult</a></b>, not <b><a href=
"../TclLib/SetResult.htm">Tcl_SetResult</a></b>) and return
<b>TCL_OK</b>. If an error occurs, <i>postscriptProc</i> should
clear the result and replace its contents with an error message;
then it should return <b>TCL_ERROR</b>. 

<p>Tk provides a collection of utility procedures to simplify
<i>postscriptProc</i>. For example, <b><a href=
"../TkLib/CanvPsY.htm">Tk_CanvasPsColor</a></b> will generate
Postscript to set the current color to a given Tk color and <b><a
href="../TkLib/CanvPsY.htm">Tk_CanvasPsFont</a></b> will set up
font information. When generating Postscript, the type manager is
free to change the graphics state of the Postscript interpreter,
since Tk places <b>gsave</b> and <b>grestore</b> commands around
the Postscript for the item. The type manager can use canvas x
coordinates directly in its Postscript, but it must call <b><a
href="../TkLib/CanvPsY.htm">Tk_CanvasPsY</a></b> to convert y
coordinates from the space of the canvas (where the origin is at
the upper left) to the space of Postscript (where the origin is at
the lower left).</p>

<p>In order to generate Postscript that complies with the Adobe
Document Structuring Conventions, Tk actually generates Postscript
in two passes. It calls each item's <i>postscriptProc</i> in each
pass. The only purpose of the first pass is to collect font
information (which is done by <b><a href=
"../TkLib/CanvPsY.htm">Tk_CanvasPsFont</a></b>); the actual
Postscript is discarded. Tk sets the <i>prepass</i> argument to
<i>postscriptProc</i> to 1 during the first pass; the type manager
can use <i>prepass</i> to skip all Postscript generation except for
calls to <b><a href="../TkLib/CanvPsY.htm">Tk_CanvasPsFont</a></b>.
During the second pass <i>prepass</i> will be 0, so the type
manager must generate complete Postscript.</p>

<h4><a name="M18">SCALEPROC</a></h4>

<i>typePtr-&gt;scaleProc</i> is invoked by Tk to rescale a canvas
item during the <b><a href="../TkCmd/scale.htm">scale</a></b>
widget command. The procedure must match the following prototype: 

<pre>
typedef void Tk_ItemScaleProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double <i>originX</i>,
    double <i>originY</i>,
    double <i>scaleX</i>,
    double <i>scaleY</i>);
</pre>

The <i>canvas</i> and <i>itemPtr</i> arguments have the usual
meaning. <i>originX</i> and <i>originY</i> specify an origin
relative to which the item is to be scaled, and <i>scaleX</i> and
<i>scaleY</i> give the x and y scale factors. The item should
adjust its coordinates so that a point in the item that used to
have coordinates <i>x</i> and <i>y</i> will have new coordinates
<i>x&prime;</i> and <i>y&prime;</i>, where 

<pre>
<i>x&prime; = originX  + scaleX*(x-originX)
y&prime; = originY + scaleY*(y-originY)</i>
</pre>

<i>scaleProc</i> must also update the bounding box in the item's
header. 

<h4><a name="M19">TRANSLATEPROC</a></h4>

<i>typePtr-&gt;translateProc</i> is invoked by Tk to translate a
canvas item during the <b>move</b> widget command. The procedure
must match the following prototype: 

<pre>
typedef void Tk_ItemTranslateProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double <i>deltaX</i>,
    double <i>deltaY</i>);
</pre>

The <i>canvas</i> and <i>itemPtr</i> arguments have the usual
meaning, and <i>deltaX</i> and <i>deltaY</i> give the amounts that
should be added to each x and y coordinate within the item. The
type manager should adjust the item's coordinates and update the
bounding box in the item's header. 

<h4><a name="M20">INDEXPROC</a></h4>

<i>typePtr-&gt;indexProc</i> is invoked by Tk to translate a string
index specification into a numerical index, for example during the
<b>index</b> widget command. It is only relevant for item types
that support indexable text; <i>typePtr-&gt;indexProc</i> may be
specified as NULL for non-textual item types. The procedure must
match the following prototype: 

<pre>
typedef int Tk_ItemIndexProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    char <i>indexString</i>,
    int *<i>indexPtr</i>);
</pre>

The <i>interp</i>, <i>canvas</i>, and <i>itemPtr</i> arguments all
have the usual meaning. <i>indexString</i> contains a textual
description of an index, and <i>indexPtr</i> points to an integer
value that should be filled in with a numerical index. It is up to
the type manager to decide what forms of index are supported (e.g.,
numbers, <b>insert</b>, <b>sel.first</b>, <b>end</b>, etc.).
<i>indexProc</i> should return a Tcl completion code and set
<i>interp-&gt;result</i> in the event of an error. 

<h4><a name="M21">ICURSORPROC</a></h4>

<i>typePtr-&gt;icursorProc</i> is invoked by Tk during the
<b>icursor</b> widget command to set the position of the insertion
cursor in a textual item. It is only relevant for item types that
support an insertion cursor; <i>typePtr-&gt;icursorProc</i> may be
specified as NULL for item types that do not support an insertion
cursor. The procedure must match the following prototype: 

<pre>
typedef void Tk_ItemCursorProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>index</i>);
</pre>

<i>canvas</i> and <i>itemPtr</i> have the usual meanings, and
<i>index</i> is an index into the item's text, as returned by a
previous call to <i>typePtr-&gt;insertProc</i>. The type manager
should position the insertion cursor in the item just before the
character given by <i>index</i>. Whether or not to actually display
the insertion cursor is determined by other information provided by
<b>Tk_CanvasGetTextInfo</b>. 

<h4><a name="M22">SELECTIONPROC</a></h4>

<i>typePtr-&gt;selectionProc</i> is invoked by Tk during selection
retrievals; it must return part or all of the selected text in the
item (if any). It is only relevant for item types that support
text; <i>typePtr-&gt;selectionProc</i> may be specified as NULL for
non-textual item types. The procedure must match the following
prototype: 

<pre>
typedef int Tk_ItemSelectionProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>offset</i>,
    char *<i>buffer</i>,
    int <i>maxBytes</i>);
</pre>

<i>canvas</i> and <i>itemPtr</i> have the usual meanings.
<i>offset</i> is an offset in bytes into the selection where 0
refers to the first byte of the selection; it identifies the first
character that is to be returned in this call. <i>buffer</i> points
to an area of memory in which to store the requested bytes, and
<i>maxBytes</i> specifies the maximum number of bytes to return.
<i>selectionProc</i> should extract up to <i>maxBytes</i>
characters from the selection and copy them to <i>maxBytes</i>; it
should return a count of the number of bytes actually copied, which
may be less than <i>maxBytes</i> if there are not
<i>offset+maxBytes</i> bytes in the selection. 

<h4><a name="M23">INSERTPROC</a></h4>

<i>typePtr-&gt;insertProc</i> is invoked by Tk during the
<b>insert</b> widget command to insert new text into a canvas item.
It is only relevant for item types that support text;
<i>typePtr-&gt;insertProc</i> may be specified as NULL for
non-textual item types. The procedure must match the following
prototype: 

<pre>
typedef void Tk_ItemInsertProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>index</i>,
    char *<i>string</i>);
</pre>

<i>canvas</i> and <i>itemPtr</i> have the usual meanings.
<i>index</i> is an index into the item's text, as returned by a
previous call to <i>typePtr-&gt;insertProc</i>, and <i>string</i>
contains new text to insert just before the character given by
<i>index</i>. The type manager should insert the text and recompute
the bounding box in the item's header. 

<h4><a name="M24">DCHARSPROC</a></h4>

<i>typePtr-&gt;dCharsProc</i> is invoked by Tk during the
<b>dchars</b> widget command to delete a range of text from a
canvas item. It is only relevant for item types that support text;
<i>typePtr-&gt;dCharsProc</i> may be specified as NULL for
non-textual item types. The procedure must match the following
prototype: 

<pre>
typedef void Tk_ItemDCharsProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>first</i>,
    int <i>last</i>);
</pre>

<i>canvas</i> and <i>itemPtr</i> have the usual meanings.
<i>first</i> and <i>last</i> give the indices of the first and last
bytes to be deleted, as returned by previous calls to
<i>typePtr-&gt;indexProc</i>. The type manager should delete the
specified characters and update the bounding box in the item's
header. 

<h3><a name="M25">SEE ALSO</a></h3>

<b><a href="../TkLib/CanvPsY.htm">Tk_CanvasPsY</a></b>, <b><a href=
"../TkLib/CanvTxtInfo.htm">Tk_CanvasTextInfo</a></b>, <b><a href=
"../TkLib/CanvTkwin.htm">Tk_CanvasTkwin</a></b> 

<h3><a name="M26">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#canvas">canvas</a>, <a href=
"../Keywords/F.htm#focus">focus</a>, <a href=
"../Keywords/I.htm#item type">item type</a>, <a href=
"../Keywords/S.htm#selection">selection</a>, <a href=
"../Keywords/T.htm#type manager">type manager</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1994-1995 Sun Microsystems, Inc.</div>
</body>
</html>

