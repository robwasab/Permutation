<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Bundled Packages - tcltest manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> tcltest</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="tcltest.htm#M2" name="L1634">NAME</a> 

<dl>
<dd>tcltest - Test harness support code and utilities</dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M3" name="L1635">SYNOPSIS</a> 

<dl>
<dd><b>package require tcltest ?2.3?</b></dd>

<dd><b>tcltest::test</b> <i>name description ?option value
...?</i></dd>

<dd><b>tcltest::test</b> <i>name description ?constraints? body
result</i></dd>

<dd><b>tcltest::loadTestedCommands</b></dd>

<dd><b>tcltest::makeDirectory</b> <i>name ?directory?</i></dd>

<dd><b>tcltest::removeDirectory</b> <i>name ?directory?</i></dd>

<dd><b>tcltest::makeFile</b> <i>contents name ?directory?</i></dd>

<dd><b>tcltest::removeFile</b> <i>name ?directory?</i></dd>

<dd><b>tcltest::viewFile</b> <i>name ?directory?</i></dd>

<dd><b>tcltest::cleanupTests</b> <i>?runningMultipleTests?</i></dd>

<dd><b>tcltest::runAllTests</b></dd>

<dd><b>tcltest::configure</b></dd>

<dd><b>tcltest::configure</b> <i>option</i></dd>

<dd><b>tcltest::configure</b> <i>option value ?option value
...?</i></dd>

<dd><b>tcltest::customMatch</b> <i>mode command</i></dd>

<dd><b>tcltest::testConstraint</b> <i>constraint ?value?</i></dd>

<dd><b>tcltest::outputChannel</b> <i>?channelID?</i></dd>

<dd><b>tcltest::errorChannel</b> <i>?channelID?</i></dd>

<dd><b>tcltest::interpreter</b> <i>?interp?</i></dd>

<dd><b>tcltest::debug</b> <i>?level?</i></dd>

<dd><b>tcltest::errorFile</b> <i>?filename?</i></dd>

<dd><b>tcltest::limitConstraints</b> <i>?boolean?</i></dd>

<dd><b>tcltest::loadFile</b> <i>?filename?</i></dd>

<dd><b>tcltest::loadScript</b> <i>?script?</i></dd>

<dd><b>tcltest::match</b> <i>?patternList?</i></dd>

<dd><b>tcltest::matchDirectories</b> <i>?patternList?</i></dd>

<dd><b>tcltest::matchFiles</b> <i>?patternList?</i></dd>

<dd><b>tcltest::outputFile</b> <i>?filename?</i></dd>

<dd><b>tcltest::preserveCore</b> <i>?level?</i></dd>

<dd><b>tcltest::singleProcess</b> <i>?boolean?</i></dd>

<dd><b>tcltest::skip</b> <i>?patternList?</i></dd>

<dd><b>tcltest::skipDirectories</b> <i>?patternList?</i></dd>

<dd><b>tcltest::skipFiles</b> <i>?patternList?</i></dd>

<dd><b>tcltest::temporaryDirectory</b> <i>?directory?</i></dd>

<dd><b>tcltest::testsDirectory</b> <i>?directory?</i></dd>

<dd><b>tcltest::verbose</b> <i>?level?</i></dd>

<dd><b>tcltest::test</b> <i>name description optionList</i></dd>

<dd><b>tcltest::bytestring</b> <i>string</i></dd>

<dd><b>tcltest::normalizeMsg</b> <i>msg</i></dd>

<dd><b>tcltest::normalizePath</b> <i>pathVar</i></dd>

<dd><b>tcltest::workingDirectory</b> <i>?dir?</i></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M4" name="L1636">DESCRIPTION</a></dd>

<dd><a href="tcltest.htm#M5" name="L1637">COMMANDS</a> 

<dl class="commands">
<dd><a href="tcltest.htm#M6" name="L1638"><b>test</b> <i>name
description ?option value ...?</i></a></dd>

<dd><a href="tcltest.htm#M7" name="L1639"><b>test</b> <i>name
description ?constraints? body result</i></a></dd>

<dd><a href="tcltest.htm#M8" name=
"L1640"><b>loadTestedCommands</b></a></dd>

<dd><a href="tcltest.htm#M9" name="L1641"><b>makeFile</b>
<i>contents name ?directory?</i></a></dd>

<dd><a href="tcltest.htm#M10" name="L1642"><b>removeFile</b>
<i>name ?directory?</i></a></dd>

<dd><a href="tcltest.htm#M11" name="L1643"><b>makeDirectory</b>
<i>name ?directory?</i></a></dd>

<dd><a href="tcltest.htm#M12" name="L1644"><b>removeDirectory</b>
<i>name ?directory?</i></a></dd>

<dd><a href="tcltest.htm#M13" name="L1645"><b>viewFile</b> <i>file
?directory?</i></a></dd>

<dd><a href="tcltest.htm#M14" name=
"L1646"><b>cleanupTests</b></a></dd>

<dd><a href="tcltest.htm#M15" name=
"L1647"><b>runAllTests</b></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M16" name="L1648">CONFIGURATION
COMMANDS</a> 

<dl class="configuration commands">
<dd><a href="tcltest.htm#M17" name=
"L1649"><b>configure</b></a></dd>

<dd><a href="tcltest.htm#M18" name="L1650"><b>configure</b>
<i>option</i></a></dd>

<dd><a href="tcltest.htm#M19" name="L1651"><b>configure</b>
<i>option value ?option value ...?</i></a></dd>

<dd><a href="tcltest.htm#M20" name="L1652"><b>customMatch</b>
<i>mode script</i></a></dd>

<dd><a href="tcltest.htm#M21" name="L1653"><b>testConstraint</b>
<i>constraint ?boolean?</i></a></dd>

<dd><a href="tcltest.htm#M22" name="L1654"><b>interpreter</b>
<i>?executableName?</i></a></dd>

<dd><a href="tcltest.htm#M23" name="L1655"><b>outputChannel</b>
<i>?channelID?</i></a></dd>

<dd><a href="tcltest.htm#M24" name="L1656"><b>errorChannel</b>
<i>?channelID?</i></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M25" name="L1657">SHORTCUT COMMANDS</a> 

<dl class="shortcut commands">
<dd><a href="tcltest.htm#M26" name="L1658"><b>debug</b>
<i>?level?</i></a></dd>

<dd><a href="tcltest.htm#M27" name="L1659"><b>errorFile</b>
<i>?filename?</i></a></dd>

<dd><a href="tcltest.htm#M28" name="L1660"><b>limitConstraints</b>
<i>?boolean?</i></a></dd>

<dd><a href="tcltest.htm#M29" name="L1661"><b>loadFile</b>
<i>?filename?</i></a></dd>

<dd><a href="tcltest.htm#M30" name="L1662"><b>loadScript</b>
<i>?script?</i></a></dd>

<dd><a href="tcltest.htm#M31" name="L1663"><b>match</b>
<i>?patternList?</i></a></dd>

<dd><a href="tcltest.htm#M32" name="L1664"><b>matchDirectories</b>
<i>?patternList?</i></a></dd>

<dd><a href="tcltest.htm#M33" name="L1665"><b>matchFiles</b>
<i>?patternList?</i></a></dd>

<dd><a href="tcltest.htm#M34" name="L1666"><b>outputFile</b>
<i>?filename?</i></a></dd>

<dd><a href="tcltest.htm#M35" name="L1667"><b>preserveCore</b>
<i>?level?</i></a></dd>

<dd><a href="tcltest.htm#M36" name="L1668"><b>singleProcess</b>
<i>?boolean?</i></a></dd>

<dd><a href="tcltest.htm#M37" name="L1669"><b>skip</b>
<i>?patternList?</i></a></dd>

<dd><a href="tcltest.htm#M38" name="L1670"><b>skipDirectories</b>
<i>?patternList?</i></a></dd>

<dd><a href="tcltest.htm#M39" name="L1671"><b>skipFiles</b>
<i>?patternList?</i></a></dd>

<dd><a href="tcltest.htm#M40" name=
"L1672"><b>temporaryDirectory</b> <i>?directory?</i></a></dd>

<dd><a href="tcltest.htm#M41" name="L1673"><b>testsDirectory</b>
<i>?directory?</i></a></dd>

<dd><a href="tcltest.htm#M42" name="L1674"><b>verbose</b>
<i>?level?</i></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M43" name="L1675">OTHER COMMANDS</a> 

<dl class="other commands">
<dd><a href="tcltest.htm#M44" name="L1676"><b>test</b> <i>name
description optionList</i></a></dd>

<dd><a href="tcltest.htm#M45" name="L1677"><b>workingDirectory</b>
<i>?directoryName?</i></a></dd>

<dd><a href="tcltest.htm#M46" name="L1678"><b>normalizeMsg</b>
<i>msg</i></a></dd>

<dd><a href="tcltest.htm#M47" name="L1679"><b>normalizePath</b>
<i>pathVar</i></a></dd>

<dd><a href="tcltest.htm#M48" name="L1680"><b>bytestring</b>
<i>string</i></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M49" name="L1681">TESTS</a> 

<dl class="tests">
<dd><a href="tcltest.htm#M50" name="L1682"><b>-constraints</b>
<i>keywordList|expression</i></a></dd>

<dd><a href="tcltest.htm#M51" name="L1683"><b>-setup</b>
<i>script</i></a></dd>

<dd><a href="tcltest.htm#M52" name="L1684"><b>-body</b>
<i>script</i></a></dd>

<dd><a href="tcltest.htm#M53" name="L1685"><b>-cleanup</b>
<i>script</i></a></dd>

<dd><a href="tcltest.htm#M54" name="L1686"><b>-match</b>
<i>mode</i></a></dd>

<dd><a href="tcltest.htm#M55" name="L1687"><b>-result</b>
<i>expectedValue</i></a></dd>

<dd><a href="tcltest.htm#M56" name="L1688"><b>-output</b>
<i>expectedValue</i></a></dd>

<dd><a href="tcltest.htm#M57" name="L1689"><b>-errorOutput</b>
<i>expectedValue</i></a></dd>

<dd><a href="tcltest.htm#M58" name="L1690"><b>-returnCodes</b>
<i>expectedCodeList</i></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M59" name="L1691">TEST CONSTRAINTS</a> 

<dl class="test constraints">
<dd><a href="tcltest.htm#M60" name=
"L1692"><i>singleTestInterp</i></a></dd>

<dd><a href="tcltest.htm#M61" name="L1693"><i>unix</i></a></dd>

<dd><a href="tcltest.htm#M62" name="L1694"><i>win</i></a></dd>

<dd><a href="tcltest.htm#M63" name="L1695"><i>nt</i></a></dd>

<dd><a href="tcltest.htm#M64" name="L1696"><i>95</i></a></dd>

<dd><a href="tcltest.htm#M65" name="L1697"><i>98</i></a></dd>

<dd><a href="tcltest.htm#M66" name="L1698"><i>mac</i></a></dd>

<dd><a href="tcltest.htm#M67" name=
"L1699"><i>unixOrWin</i></a></dd>

<dd><a href="tcltest.htm#M68" name="L1700"><i>macOrWin</i></a></dd>

<dd><a href="tcltest.htm#M69" name=
"L1701"><i>macOrUnix</i></a></dd>

<dd><a href="tcltest.htm#M70" name=
"L1702"><i>tempNotWin</i></a></dd>

<dd><a href="tcltest.htm#M71" name=
"L1703"><i>tempNotMac</i></a></dd>

<dd><a href="tcltest.htm#M72" name=
"L1704"><i>unixCrash</i></a></dd>

<dd><a href="tcltest.htm#M73" name="L1705"><i>winCrash</i></a></dd>

<dd><a href="tcltest.htm#M74" name="L1706"><i>macCrash</i></a></dd>

<dd><a href="tcltest.htm#M75" name=
"L1707"><i>emptyTest</i></a></dd>

<dd><a href="tcltest.htm#M76" name="L1708"><i>knownBug</i></a></dd>

<dd><a href="tcltest.htm#M77" name=
"L1709"><i>nonPortable</i></a></dd>

<dd><a href="tcltest.htm#M78" name=
"L1710"><i>userInteraction</i></a></dd>

<dd><a href="tcltest.htm#M79" name=
"L1711"><i>interactive</i></a></dd>

<dd><a href="tcltest.htm#M80" name=
"L1712"><i>nonBlockFiles</i></a></dd>

<dd><a href="tcltest.htm#M81" name=
"L1713"><i>asyncPipeClose</i></a></dd>

<dd><a href="tcltest.htm#M82" name=
"L1714"><i>unixExecs</i></a></dd>

<dd><a href="tcltest.htm#M83" name=
"L1715"><i>hasIsoLocale</i></a></dd>

<dd><a href="tcltest.htm#M84" name="L1716"><i>root</i></a></dd>

<dd><a href="tcltest.htm#M85" name="L1717"><i>notRoot</i></a></dd>

<dd><a href="tcltest.htm#M86" name="L1718"><i>eformat</i></a></dd>

<dd><a href="tcltest.htm#M87" name="L1719"><i>stdio</i></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M88" name="L1720">RUNNING ALL
TESTS</a></dd>

<dd><a href="tcltest.htm#M89" name="L1721">CONFIGURABLE OPTIONS</a>


<dl class="configurable options">
<dd><a href="tcltest.htm#M90" name="L1722"><b>-singleproc</b>
<i>boolean</i></a></dd>

<dd><a href="tcltest.htm#M91" name="L1723"><b>-debug</b>
<i>level</i></a> 

<dl class="configurable options">
<dd><a href="tcltest.htm#M92" name="L1724">0</a></dd>

<dd><a href="tcltest.htm#M93" name="L1725">1</a></dd>

<dd><a href="tcltest.htm#M94" name="L1726">2</a></dd>

<dd><a href="tcltest.htm#M95" name="L1727">3</a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M96" name="L1728"><b>-verbose</b>
<i>level</i></a> 

<dl class="configurable options">
<dd><a href="tcltest.htm#M97" name="L1729">body (b)</a></dd>

<dd><a href="tcltest.htm#M98" name="L1730">pass (p)</a></dd>

<dd><a href="tcltest.htm#M99" name="L1731">skip (s)</a></dd>

<dd><a href="tcltest.htm#M100" name="L1732">start (t)</a></dd>

<dd><a href="tcltest.htm#M101" name="L1733">error (e)</a></dd>

<dd><a href="tcltest.htm#M102" name="L1734">line (l)</a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M103" name="L1735"><b>-preservecore</b>
<i>level</i></a> 

<dl class="configurable options">
<dd><a href="tcltest.htm#M104" name="L1736">0</a></dd>

<dd><a href="tcltest.htm#M105" name="L1737">1</a></dd>

<dd><a href="tcltest.htm#M106" name="L1738">2</a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M107" name=
"L1739"><b>-limitconstraints</b> <i>boolean</i></a></dd>

<dd><a href="tcltest.htm#M108" name="L1740"><b>-constraints</b>
<i>list</i></a></dd>

<dd><a href="tcltest.htm#M109" name="L1741"><b>-tmpdir</b>
<i>directory</i></a></dd>

<dd><a href="tcltest.htm#M110" name="L1742"><b>-testdir</b>
<i>directory</i></a></dd>

<dd><a href="tcltest.htm#M111" name="L1743"><b>-file</b>
<i>patternList</i></a></dd>

<dd><a href="tcltest.htm#M112" name="L1744"><b>-notfile</b>
<i>patternList</i></a></dd>

<dd><a href="tcltest.htm#M113" name="L1745"><b>-relateddir</b>
<i>patternList</i></a></dd>

<dd><a href="tcltest.htm#M114" name="L1746"><b>-asidefromdir</b>
<i>patternList</i></a></dd>

<dd><a href="tcltest.htm#M115" name="L1747"><b>-match</b>
<i>patternList</i></a></dd>

<dd><a href="tcltest.htm#M116" name="L1748"><b>-skip</b>
<i>patternList</i></a></dd>

<dd><a href="tcltest.htm#M117" name="L1749"><b>-load</b>
<i>script</i></a></dd>

<dd><a href="tcltest.htm#M118" name="L1750"><b>-loadfile</b>
<i>filename</i></a></dd>

<dd><a href="tcltest.htm#M119" name="L1751"><b>-outfile</b>
<i>filename</i></a></dd>

<dd><a href="tcltest.htm#M120" name="L1752"><b>-errfile</b>
<i>filename</i></a></dd>
</dl>
</dd>

<dd><a href="tcltest.htm#M121" name="L1753">CREATING TEST SUITES
WITH TCLTEST</a></dd>

<dd><a href="tcltest.htm#M122" name="L1754">COMPATIBILITY</a></dd>

<dd><a href="tcltest.htm#M123" name="L1755">KNOWN ISSUES</a></dd>

<dd><a href="tcltest.htm#M124" name="L1756">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

tcltest - Test harness support code and utilities 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>package require tcltest ?2.3?</b><br>
<b>tcltest::test</b> <i>name description ?option value ...?</i><br>
<b>tcltest::test</b> <i>name description ?constraints? body
result</i><br>
<b>tcltest::loadTestedCommands</b><br>
<b>tcltest::makeDirectory</b> <i>name ?directory?</i><br>
<b>tcltest::removeDirectory</b> <i>name ?directory?</i><br>
<b>tcltest::makeFile</b> <i>contents name ?directory?</i><br>
<b>tcltest::removeFile</b> <i>name ?directory?</i><br>
<b>tcltest::viewFile</b> <i>name ?directory?</i><br>
<b>tcltest::cleanupTests</b> <i>?runningMultipleTests?</i><br>
<b>tcltest::runAllTests</b><br>
<b>tcltest::configure</b><br>
<b>tcltest::configure</b> <i>option</i><br>
<b>tcltest::configure</b> <i>option value ?option value
...?</i><br>
<b>tcltest::customMatch</b> <i>mode command</i><br>
<b>tcltest::testConstraint</b> <i>constraint ?value?</i><br>
<b>tcltest::outputChannel</b> <i>?channelID?</i><br>
<b>tcltest::errorChannel</b> <i>?channelID?</i><br>
<b>tcltest::interpreter</b> <i>?interp?</i><br>
<b>tcltest::debug</b> <i>?level?</i><br>
<b>tcltest::errorFile</b> <i>?filename?</i><br>
<b>tcltest::limitConstraints</b> <i>?boolean?</i><br>
<b>tcltest::loadFile</b> <i>?filename?</i><br>
<b>tcltest::loadScript</b> <i>?script?</i><br>
<b>tcltest::match</b> <i>?patternList?</i><br>
<b>tcltest::matchDirectories</b> <i>?patternList?</i><br>
<b>tcltest::matchFiles</b> <i>?patternList?</i><br>
<b>tcltest::outputFile</b> <i>?filename?</i><br>
<b>tcltest::preserveCore</b> <i>?level?</i><br>
<b>tcltest::singleProcess</b> <i>?boolean?</i><br>
<b>tcltest::skip</b> <i>?patternList?</i><br>
<b>tcltest::skipDirectories</b> <i>?patternList?</i><br>
<b>tcltest::skipFiles</b> <i>?patternList?</i><br>
<b>tcltest::temporaryDirectory</b> <i>?directory?</i><br>
<b>tcltest::testsDirectory</b> <i>?directory?</i><br>
<b>tcltest::verbose</b> <i>?level?</i><br>
<b>tcltest::test</b> <i>name description optionList</i><br>
<b>tcltest::bytestring</b> <i>string</i><br>
<b>tcltest::normalizeMsg</b> <i>msg</i><br>
<b>tcltest::normalizePath</b> <i>pathVar</i><br>
<b>tcltest::workingDirectory</b> <i>?dir?</i><br>
<h3><a name="M4">DESCRIPTION</a></h3>

The <b>tcltest</b> package provides several utility commands useful
in the construction of test suites for code instrumented to be run
by evaluation of Tcl commands. Notably the built-in commands of the
Tcl library itself are tested by a test suite using the tcltest
package. 

<p>All the commands provided by the <b>tcltest</b> package are
defined in and exported from the <b>::tcltest</b> namespace, as
indicated in the <b>SYNOPSIS</b> above. In the following sections,
all commands will be described by their simple names, in the
interest of brevity.</p>

<p>The central command of <b>tcltest</b> is <b>test</b> that
defines and runs a test. Testing with <b>test</b> involves
evaluation of a Tcl script and comparing the result to an expected
result, as configured and controlled by a number of options.
Several other commands provided by <b>tcltest</b> govern the
configuration of <b>test</b> and the collection of many <b>test</b>
commands into test suites.</p>

<p>See <b>CREATING TEST SUITES WITH TCLTEST</b> below for an
extended example of how to use the commands of <b>tcltest</b> to
produce test suites for your Tcl-enabled code.</p>

<h3><a name="M5">COMMANDS</a></h3>

<dl class="commands">
<dt><a name="M6"><b>test</b> <i>name description ?option value
...?</i></a></dt>

<dd>Defines and possibly runs a test with the name <i>name</i> and
description <i>description</i>. The name and description of a test
are used in messages reported by <b>test</b> during the test, as
configured by the options of <b>tcltest</b>. The remaining
<i>option value</i> arguments to <b>test</b> define the test,
including the scripts to run, the conditions under which to run
them, the expected result, and the means by which the expected and
actual results should be compared. See <b>TESTS</b> below for a
complete description of the valid options and how they define a
test. The <b>test</b> command returns an empty string.</dd>

<dt><a name="M7"><b>test</b> <i>name description ?constraints? body
result</i></a></dt>

<dd>This form of <b>test</b> is provided to support test suites
written for version 1 of the <b>tcltest</b> package, and also a
simpler interface for a common usage. It is the same as
&ldquo;<b>test</b> <i>name description</i> <b>-constraints</b>
<i>constraints</i> <b>-body</b> <i>body</i> <b>-result</b>
<i>result</i>&rdquo;. All other options to <b>test</b> take their
default values. When <i>constraints</i> is omitted, this form of
<b>test</b> can be distinguished from the first because all
<i>option</i>s begin with &ldquo;-&rdquo;.</dd>

<dt><a name="M8"><b>loadTestedCommands</b></a></dt>

<dd>Evaluates in the caller's context the script specified by
<b>configure -load</b> or <b>configure -loadfile</b>. Returns the
result of that script evaluation, including any error raised by the
script. Use this command and the related configuration options to
provide the commands to be tested to the interpreter running the
test suite.</dd>

<dt><a name="M9"><b>makeFile</b> <i>contents name
?directory?</i></a></dt>

<dd>Creates a file named <i>name</i> relative to directory
<i>directory</i> and write <i>contents</i> to that file using the
encoding <b>encoding system</b>. If <i>contents</i> does not end
with a newline, a newline will be appended so that the file named
<i>name</i> does end with a newline. Because the system encoding is
used, this command is only suitable for making text files. The file
will be removed by the next evaluation of <b>cleanupTests</b>,
unless it is removed by <b>removeFile</b> first. The default value
of <i>directory</i> is the directory <b>configure -tmpdir</b>.
Returns the full path of the file created. Use this command to
create any text file required by a test with contents as
needed.</dd>

<dt><a name="M10"><b>removeFile</b> <i>name
?directory?</i></a></dt>

<dd>Forces the file referenced by <i>name</i> to be removed. This
file name should be relative to <i>directory</i>. The default value
of <i>directory</i> is the directory <b>configure -tmpdir</b>.
Returns an empty string. Use this command to delete files created
by <b>makeFile</b>.</dd>

<dt><a name="M11"><b>makeDirectory</b> <i>name
?directory?</i></a></dt>

<dd>Creates a directory named <i>name</i> relative to directory
<i>directory</i>. The directory will be removed by the next
evaluation of <b>cleanupTests</b>, unless it is removed by
<b>removeDirectory</b> first. The default value of <i>directory</i>
is the directory <b>configure -tmpdir</b>. Returns the full path of
the directory created. Use this command to create any directories
that are required to exist by a test.</dd>

<dt><a name="M12"><b>removeDirectory</b> <i>name
?directory?</i></a></dt>

<dd>Forces the directory referenced by <i>name</i> to be removed.
This directory should be relative to <i>directory</i>. The default
value of <i>directory</i> is the directory <b>configure
-tmpdir</b>. Returns an empty string. Use this command to delete
any directories created by <b>makeDirectory</b>.</dd>

<dt><a name="M13"><b>viewFile</b> <i>file ?directory?</i></a></dt>

<dd>Returns the contents of <i>file</i>, except for any final
newline, just as <b>read -nonewline</b> would return. This file
name should be relative to <i>directory</i>. The default value of
<i>directory</i> is the directory <b>configure -tmpdir</b>. Use
this command as a convenient way to turn the contents of a file
generated by a test into the result of that test for matching
against an expected result. The contents of the file are read using
the system encoding, so its usefulness is limited to text
files.</dd>

<dt><a name="M14"><b>cleanupTests</b></a></dt>

<dd>Intended to clean up and summarize after several tests have
been run. Typically called once per test file, at the end of the
file after all tests have been completed. For best effectiveness,
be sure that the <b>cleanupTests</b> is evaluated even if an error
occurs earlier in the test file evaluation. 

<p>Prints statistics about the tests run and removes files that
were created by <b>makeDirectory</b> and <b>makeFile</b> since the
last <b>cleanupTests</b>. Names of files and directories in the
directory <b>configure -tmpdir</b> created since the last
<b>cleanupTests</b>, but not created by <b>makeFile</b> or
<b>makeDirectory</b> are printed to <b>outputChannel</b>. This
command also restores the original shell environment, as described
by the <b>::env</b> array. Returns an empty string.</p>
</dd>

<dt><a name="M15"><b>runAllTests</b></a></dt>

<dd>This is a master command meant to run an entire suite of tests,
spanning multiple files and/or directories, as governed by the
configurable options of <b>tcltest</b>. See <b>RUNNING ALL
TESTS</b> below for a complete description of the many variations
possible with <b>runAllTests</b>.</dd>
</dl>

<h3><a name="M16">CONFIGURATION COMMANDS</a></h3>

<dl class="configuration commands">
<dt><a name="M17"><b>configure</b></a></dt>

<dd>Returns the list of configurable options supported by
<b>tcltest</b>. See <b>CONFIGURABLE OPTIONS</b> below for the full
list of options, their valid values, and their effect on
<b>tcltest</b> operations.</dd>

<dt><a name="M18"><b>configure</b> <i>option</i></a></dt>

<dd>Returns the current value of the supported configurable option
<i>option</i>. Raises an error if <i>option</i> is not a supported
configurable option.</dd>

<dt><a name="M19"><b>configure</b> <i>option value ?option value
...?</i></a></dt>

<dd>Sets the value of each configurable option <i>option</i> to the
corresponding value <i>value</i>, in order. Raises an error if an
<i>option</i> is not a supported configurable option, or if
<i>value</i> is not a valid value for the corresponding
<i>option</i>, or if a <i>value</i> is not provided. When an error
is raised, the operation of <b>configure</b> is halted, and
subsequent <i>option value</i> arguments are not processed. 

<p>If the environment variable <b>::env(TCLTEST_OPTIONS)</b> exists
when the <b>tcltest</b> package is loaded (by <b>package require
tcltest</b>) then its value is taken as a list of arguments to pass
to <b>configure</b>. This allows the default values of the
configuration options to be set by the environment.</p>
</dd>

<dt><a name="M20"><b>customMatch</b> <i>mode script</i></a></dt>

<dd>Registers <i>mode</i> as a new legal value of the <b>-match</b>
option to <b>test</b>. When the <b>-match</b> <i>mode</i> option is
passed to <b>test</b>, the script <i>script</i> will be evaluated
to compare the actual result of evaluating the body of the test to
the expected result. To perform the match, the <i>script</i> is
completed with two additional words, the expected result, and the
actual result, and the completed script is evaluated in the global
namespace. The completed script is expected to return a boolean
value indicating whether or not the results match. The built-in
matching modes of <b>test</b> are <b>exact</b>, <b><a href=
"../TclCmd/glob.htm">glob</a></b>, and <b><a href=
"../TclCmd/regexp.htm">regexp</a></b>.</dd>

<dt><a name="M21"><b>testConstraint</b> <i>constraint
?boolean?</i></a></dt>

<dd>Sets or returns the boolean value associated with the named
<i>constraint</i>. See <b>TEST CONSTRAINTS</b> below for more
information.</dd>

<dt><a name="M22"><b>interpreter</b>
<i>?executableName?</i></a></dt>

<dd>Sets or returns the name of the executable to be <b><a href=
"../TclCmd/exec.htm">exec</a></b>ed by <b>runAllTests</b> to run
each test file when <b>configure -singleproc</b> is false. The
default value for <b>interpreter</b> is the name of the currently
running program as returned by <b><a href="../TclCmd/info.htm">info
nameofexecutable</a></b>.</dd>

<dt><a name="M23"><b>outputChannel</b> <i>?channelID?</i></a></dt>

<dd>Sets or returns the output channel ID. This defaults to stdout.
Any test that prints test related output should send that output to
<b>outputChannel</b> rather than letting that output default to
stdout.</dd>

<dt><a name="M24"><b>errorChannel</b> <i>?channelID?</i></a></dt>

<dd>Sets or returns the error channel ID. This defaults to stderr.
Any test that prints error messages should send that output to
<b>errorChannel</b> rather than printing directly to stderr.</dd>
</dl>

<h3><a name="M25">SHORTCUT COMMANDS</a></h3>

<dl class="shortcut commands">
<dt><a name="M26"><b>debug</b> <i>?level?</i></a></dt>

<dd>Same as <b>configure -debug</b> <i>?level?</i>.</dd>

<dt><a name="M27"><b>errorFile</b> <i>?filename?</i></a></dt>

<dd>Same as <b>configure -errfile</b> <i>?filename?</i>.</dd>

<dt><a name="M28"><b>limitConstraints</b> <i>?boolean?</i></a></dt>

<dd>Same as <b>configure -limitconstraints</b>
<i>?boolean?</i>.</dd>

<dt><a name="M29"><b>loadFile</b> <i>?filename?</i></a></dt>

<dd>Same as <b>configure -loadfile</b> <i>?filename?</i>.</dd>

<dt><a name="M30"><b>loadScript</b> <i>?script?</i></a></dt>

<dd>Same as <b>configure -load</b> <i>?script?</i>.</dd>

<dt><a name="M31"><b>match</b> <i>?patternList?</i></a></dt>

<dd>Same as <b>configure -match</b> <i>?patternList?</i>.</dd>

<dt><a name="M32"><b>matchDirectories</b>
<i>?patternList?</i></a></dt>

<dd>Same as <b>configure -relateddir</b> <i>?patternList?</i>.</dd>

<dt><a name="M33"><b>matchFiles</b> <i>?patternList?</i></a></dt>

<dd>Same as <b>configure -file</b> <i>?patternList?</i>.</dd>

<dt><a name="M34"><b>outputFile</b> <i>?filename?</i></a></dt>

<dd>Same as <b>configure -outfile</b> <i>?filename?</i>.</dd>

<dt><a name="M35"><b>preserveCore</b> <i>?level?</i></a></dt>

<dd>Same as <b>configure -preservecore</b> <i>?level?</i>.</dd>

<dt><a name="M36"><b>singleProcess</b> <i>?boolean?</i></a></dt>

<dd>Same as <b>configure -singleproc</b> <i>?boolean?</i>.</dd>

<dt><a name="M37"><b>skip</b> <i>?patternList?</i></a></dt>

<dd>Same as <b>configure -skip</b> <i>?patternList?</i>.</dd>

<dt><a name="M38"><b>skipDirectories</b>
<i>?patternList?</i></a></dt>

<dd>Same as <b>configure -asidefromdir</b>
<i>?patternList?</i>.</dd>

<dt><a name="M39"><b>skipFiles</b> <i>?patternList?</i></a></dt>

<dd>Same as <b>configure -notfile</b> <i>?patternList?</i>.</dd>

<dt><a name="M40"><b>temporaryDirectory</b>
<i>?directory?</i></a></dt>

<dd>Same as <b>configure -tmpdir</b> <i>?directory?</i>.</dd>

<dt><a name="M41"><b>testsDirectory</b> <i>?directory?</i></a></dt>

<dd>Same as <b>configure -testdir</b> <i>?directory?</i>.</dd>

<dt><a name="M42"><b>verbose</b> <i>?level?</i></a></dt>

<dd>Same as <b>configure -verbose</b> <i>?level?</i>.</dd>
</dl>

<h3><a name="M43">OTHER COMMANDS</a></h3>

The remaining commands provided by <b>tcltest</b> have better
alternatives provided by <b>tcltest</b> or <b><a href=
"../TclCmd/Tcl.htm">Tcl</a></b> itself. They are retained to
support existing test suites, but should be avoided in new code. 

<dl class="other commands">
<dt><a name="M44"><b>test</b> <i>name description
optionList</i></a></dt>

<dd>This form of <b>test</b> was provided to enable passing many
options spanning several lines to <b>test</b> as a single argument
quoted by braces, rather than needing to backslash quote the
newlines between arguments to <b>test</b>. The <i>optionList</i>
argument is expected to be a list with an even number of elements
representing <i>option</i> and <i>value</i> arguments to pass to
<b>test</b>. However, these values are not passed directly, as in
the alternate forms of <b><a href=
"../TclCmd/switch.htm">switch</a></b>. Instead, this form makes an
unfortunate attempt to overthrow Tcl's substitution rules by
performing substitutions on some of the list elements as an attempt
to implement a &ldquo;do what I mean&rdquo; interpretation of a
brace-enclosed &ldquo;block&rdquo;. The result is nearly impossible
to document clearly, and for that reason this form is not
recommended. See the examples in <b>CREATING TEST SUITES WITH
TCLTEST</b> below to see that this form is really not necessary to
avoid backslash-quoted newlines. If you insist on using this form,
examine the source code of <b>tcltest</b> if you want to know the
substitution details, or just enclose the third through last
argument to <b>test</b> in braces and hope for the best.</dd>

<dt><a name="M45"><b>workingDirectory</b>
<i>?directoryName?</i></a></dt>

<dd>Sets or returns the current working directory when the test
suite is running. The default value for workingDirectory is the
directory in which the test suite was launched. The Tcl commands
<b><a href="../TclCmd/cd.htm">cd</a></b> and <b><a href=
"../TclCmd/pwd.htm">pwd</a></b> are sufficient replacements.</dd>

<dt><a name="M46"><b>normalizeMsg</b> <i>msg</i></a></dt>

<dd>Returns the result of removing the &ldquo;extra&rdquo; newlines
from <i>msg</i>, where &ldquo;extra&rdquo; is rather imprecise. Tcl
offers plenty of string processing commands to modify strings as
you wish, and <b>customMatch</b> allows flexible matching of actual
and expected results.</dd>

<dt><a name="M47"><b>normalizePath</b> <i>pathVar</i></a></dt>

<dd>Resolves symlinks in a path, thus creating a path without
internal redirection. It is assumed that <i>pathVar</i> is
absolute. <i>pathVar</i> is modified in place. The Tcl command
<b><a href="../TclCmd/file.htm">file normalize</a></b> is a
sufficient replacement.</dd>

<dt><a name="M48"><b>bytestring</b> <i>string</i></a></dt>

<dd>Construct a string that consists of the requested sequence of
bytes, as opposed to a string of properly formed UTF-8 characters
using the value supplied in <i>string</i>. This allows the tester
to create denormalized or improperly formed strings to pass to C
procedures that are supposed to accept strings with embedded NULL
types and confirm that a string result has a certain pattern of
bytes. This is exactly equivalent to the Tcl command <b>encoding
convertfrom identity</b>.</dd>
</dl>

<h3><a name="M49">TESTS</a></h3>

The <b>test</b> command is the heart of the <b>tcltest</b> package.
Its essential function is to evaluate a Tcl script and compare the
result with an expected result. The options of <b>test</b> define
the test script, the environment in which to evaluate it, the
expected result, and how the compare the actual result to the
expected result. Some configuration options of <b>tcltest</b> also
influence how <b>test</b> operates. 

<p>The valid options for <b>test</b> are summarized:</p>

<pre>
<b>test</b> <i>name</i> <i>description</i>
        ?-constraints <i>keywordList|expression</i>?
        ?-setup <i>setupScript</i>?
        ?-body <i>testScript</i>?
        ?-cleanup <i>cleanupScript</i>?
        ?-result <i>expectedAnswer</i>?
        ?-output <i>expectedOutput</i>?
        ?-errorOutput <i>expectedError</i>?
        ?-returnCodes <i>codeList</i>?
        ?-match <i>mode</i>?
</pre>

<p>The <i>name</i> may be any string. It is conventional to choose
a <i>name</i> according to the pattern:</p>

<pre>
<i>target</i>-<i>majorNum</i>.<i>minorNum</i>
</pre>

<p>For white-box (regression) tests, the target should be the name
of the C function or Tcl procedure being tested. For black-box
tests, the target should be the name of the feature being tested.
Some conventions call for the names of black-box tests to have the
suffix <b>_bb</b>. Related tests should share a major number. As a
test suite evolves, it is best to have the same test name continue
to correspond to the same test, so that it remains meaningful to
say things like &ldquo;Test foo-1.3 passed in all releases up to
3.4, but began failing in release 3.5.&rdquo;</p>

<p>During evaluation of <b>test</b>, the <i>name</i> will be
compared to the lists of string matching patterns returned by
<b>configure -match</b>, and <b>configure -skip</b>. The test will
be run only if <i>name</i> matches any of the patterns from
<b>configure -match</b> and matches none of the patterns from
<b>configure -skip</b>.</p>

<p>The <i>description</i> should be a short textual description of
the test. The <i>description</i> is included in output produced by
the test, typically test failure messages. Good <i>description</i>
values should briefly explain the purpose of the test to users of a
test suite. The name of a Tcl or C function being tested should be
included in the description for regression tests. If the test case
exists to reproduce a bug, include the bug ID in the
description.</p>

<p>Valid attributes and associated values are:</p>

<dl class="tests">
<dt><a name="M50"><b>-constraints</b>
<i>keywordList|expression</i></a></dt>

<dd>The optional <b>-constraints</b> attribute can be list of one
or more keywords or an expression. If the <b>-constraints</b> value
is a list of keywords, each of these keywords should be the name of
a constraint defined by a call to <b>testConstraint</b>. If any of
the listed constraints is false or does not exist, the test is
skipped. If the <b>-constraints</b> value is an expression, that
expression is evaluated. If the expression evaluates to true, then
the test is run. Note that the expression form of
<b>-constraints</b> may interfere with the operation of
<b>configure -constraints</b> and <b>configure
-limitconstraints</b>, and is not recommended. Appropriate
constraints should be added to any tests that should not always be
run. That is, conditional evaluation of a test should be
accomplished by the <b>-constraints</b> option, not by conditional
evaluation of <b>test</b>. In that way, the same number of tests
are always reported by the test suite, though the number skipped
may change based on the testing environment. The default value is
an empty list. See <b>TEST CONSTRAINTS</b> below for a list of
built-in constraints and information on how to add your own
constraints.</dd>

<dt><a name="M51"><b>-setup</b> <i>script</i></a></dt>

<dd>The optional <b>-setup</b> attribute indicates a <i>script</i>
that will be run before the script indicated by the <b>-body</b>
attribute. If evaluation of <i>script</i> raises an error, the test
will fail. The default value is an empty script.</dd>

<dt><a name="M52"><b>-body</b> <i>script</i></a></dt>

<dd>The <b>-body</b> attribute indicates the <i>script</i> to run
to carry out the test. It must return a result that can be checked
for correctness. If evaluation of <i>script</i> raises an error,
the test will fail. The default value is an empty script.</dd>

<dt><a name="M53"><b>-cleanup</b> <i>script</i></a></dt>

<dd>The optional <b>-cleanup</b> attribute indicates a
<i>script</i> that will be run after the script indicated by the
<b>-body</b> attribute. If evaluation of <i>script</i> raises an
error, the test will fail. The default value is an empty
script.</dd>

<dt><a name="M54"><b>-match</b> <i>mode</i></a></dt>

<dd>The <b>-match</b> attribute determines how expected answers
supplied by <b>-result</b>, <b>-output</b>, and <b>-errorOutput</b>
are compared. Valid values for <i>mode</i> are <b><a href=
"../TclCmd/regexp.htm">regexp</a></b>, <b><a href=
"../TclCmd/glob.htm">glob</a></b>, <b>exact</b>, and any value
registered by a prior call to <b>customMatch</b>. The default value
is <b>exact</b>.</dd>

<dt><a name="M55"><b>-result</b> <i>expectedValue</i></a></dt>

<dd>The <b>-result</b> attribute supplies the <i>expectedValue</i>
against which the return value from script will be compared. The
default value is an empty string.</dd>

<dt><a name="M56"><b>-output</b> <i>expectedValue</i></a></dt>

<dd>The <b>-output</b> attribute supplies the <i>expectedValue</i>
against which any output sent to <b>stdout</b> or
<b>outputChannel</b> during evaluation of the script(s) will be
compared. Note that only output printed using <b>::puts</b> is used
for comparison. If <b>-output</b> is not specified, output sent to
<b>stdout</b> and <b>outputChannel</b> is not processed for
comparison.</dd>

<dt><a name="M57"><b>-errorOutput</b> <i>expectedValue</i></a></dt>

<dd>The <b>-errorOutput</b> attribute supplies the
<i>expectedValue</i> against which any output sent to <b>stderr</b>
or <b>errorChannel</b> during evaluation of the script(s) will be
compared. Note that only output printed using <b>::puts</b> is used
for comparison. If <b>-errorOutput</b> is not specified, output
sent to <b>stderr</b> and <b>errorChannel</b> is not processed for
comparison.</dd>

<dt><a name="M58"><b>-returnCodes</b>
<i>expectedCodeList</i></a></dt>

<dd>The optional <b>-returnCodes</b> attribute supplies
<i>expectedCodeList</i>, a list of return codes that may be
accepted from evaluation of the <b>-body</b> script. If evaluation
of the <b>-body</b> script returns a code not in the
<i>expectedCodeList</i>, the test fails. All return codes known to
<b><a href="../TclCmd/return.htm">return</a></b>, in both numeric
and symbolic form, including extended return codes, are acceptable
elements in the <i>expectedCodeList</i>. Default value is
&ldquo;<b>ok&rdquo;return</b>.</dd>
</dl>

<p>To pass, a test must successfully evaluate its <b>-setup</b>,
<b>-body</b>, and <b>-cleanup</b> scripts. The return code of the
<b>-body</b> script and its result must match expected values, and
if specified, output and error data from the test must match
expected <b>-output</b> and <b>-errorOutput</b> values. If any of
these conditions are not met, then the test fails. Note that all
scripts are evaluated in the context of the caller of
<b>test</b>.</p>

<p>As long as <b>test</b> is called with valid syntax and legal
values for all attributes, it will not raise an error. Test
failures are instead reported as output written to
<b>outputChannel</b>. In default operation, a successful test
produces no output. The output messages produced by <b>test</b> are
controlled by the <b>configure -verbose</b> option as described in
<b>CONFIGURABLE OPTIONS</b> below. Any output produced by the test
scripts themselves should be produced using <b>::puts</b> to
<b>outputChannel</b> or <b>errorChannel</b>, so that users of the
test suite may easily capture output with the <b>configure
-outfile</b> and <b>configure -errfile</b> options, and so that the
<b>-output</b> and <b>-errorOutput</b> attributes work
properly.</p>

<h3><a name="M59">TEST CONSTRAINTS</a></h3>

Constraints are used to determine whether or not a test should be
skipped. Each constraint has a name, which may be any string, and a
boolean value. Each <b>test</b> has a <b>-constraints</b> value
which is a list of constraint names. There are two modes of
constraint control. Most frequently, the default mode is used,
indicated by a setting of <b>configure -limitconstraints</b> to
false. The test will run only if all constraints in the list are
true-valued. Thus, the <b>-constraints</b> option of <b>test</b> is
a convenient, symbolic way to define any conditions required for
the test to be possible or meaningful. For example, a <b>test</b>
with <b>-constraints unix</b> will only be run if the constraint
<b>unix</b> is true, which indicates the test suite is being run on
a Unix platform. 

<p>Each <b>test</b> should include whatever <b>-constraints</b> are
required to constrain it to run only where appropriate. Several
constraints are pre-defined in the <b>tcltest</b> package, listed
below. The registration of user-defined constraints is performed by
the <b>testConstraint</b> command. User-defined constraints may
appear within a test file, or within the script specified by the
<b>configure -load</b> or <b>configure -loadfile</b> options.</p>

<p>The following is a list of constraints pre-defined by the
<b>tcltest</b> package itself:</p>

<dl class="test constraints">
<dt><a name="M60"><i>singleTestInterp</i></a></dt>

<dd>test can only be run if all test files are sourced into a
single interpreter</dd>

<dt><a name="M61"><i>unix</i></a></dt>

<dd>test can only be run on any Unix platform</dd>

<dt><a name="M62"><i>win</i></a></dt>

<dd>test can only be run on any Windows platform</dd>

<dt><a name="M63"><i>nt</i></a></dt>

<dd>test can only be run on any Windows NT platform</dd>

<dt><a name="M64"><i>95</i></a></dt>

<dd>test can only be run on any Windows 95 platform</dd>

<dt><a name="M65"><i>98</i></a></dt>

<dd>test can only be run on any Windows 98 platform</dd>

<dt><a name="M66"><i>mac</i></a></dt>

<dd>test can only be run on any Mac platform</dd>

<dt><a name="M67"><i>unixOrWin</i></a></dt>

<dd>test can only be run on a Unix or Windows platform</dd>

<dt><a name="M68"><i>macOrWin</i></a></dt>

<dd>test can only be run on a Mac or Windows platform</dd>

<dt><a name="M69"><i>macOrUnix</i></a></dt>

<dd>test can only be run on a Mac or Unix platform</dd>

<dt><a name="M70"><i>tempNotWin</i></a></dt>

<dd>test can not be run on Windows. This flag is used to
temporarily disable a test.</dd>

<dt><a name="M71"><i>tempNotMac</i></a></dt>

<dd>test can not be run on a Mac. This flag is used to temporarily
disable a test.</dd>

<dt><a name="M72"><i>unixCrash</i></a></dt>

<dd>test crashes if it is run on Unix. This flag is used to
temporarily disable a test.</dd>

<dt><a name="M73"><i>winCrash</i></a></dt>

<dd>test crashes if it is run on Windows. This flag is used to
temporarily disable a test.</dd>

<dt><a name="M74"><i>macCrash</i></a></dt>

<dd>test crashes if it is run on a Mac. This flag is used to
temporarily disable a test.</dd>

<dt><a name="M75"><i>emptyTest</i></a></dt>

<dd>test is empty, and so not worth running, but it remains as a
place-holder for a test to be written in the future. This
constraint has value false to cause tests to be skipped unless the
user specifies otherwise.</dd>

<dt><a name="M76"><i>knownBug</i></a></dt>

<dd>test is known to fail and the bug is not yet fixed. This
constraint has value false to cause tests to be skipped unless the
user specifies otherwise.</dd>

<dt><a name="M77"><i>nonPortable</i></a></dt>

<dd>test can only be run in some known development environment.
Some tests are inherently non-portable because they depend on
things like word length, file system configuration, window manager,
etc. This constraint has value false to cause tests to be skipped
unless the user specifies otherwise.</dd>

<dt><a name="M78"><i>userInteraction</i></a></dt>

<dd>test requires interaction from the user. This constraint has
value false to causes tests to be skipped unless the user specifies
otherwise.</dd>

<dt><a name="M79"><i>interactive</i></a></dt>

<dd>test can only be run in if the interpreter is in interactive
mode (when the global tcl_interactive variable is set to 1).</dd>

<dt><a name="M80"><i>nonBlockFiles</i></a></dt>

<dd>test can only be run if platform supports setting files into
nonblocking mode</dd>

<dt><a name="M81"><i>asyncPipeClose</i></a></dt>

<dd>test can only be run if platform supports async flush and async
close on a pipe</dd>

<dt><a name="M82"><i>unixExecs</i></a></dt>

<dd>test can only be run if this machine has Unix-style commands
<b>cat</b>, <b>echo</b>, <b>sh</b>, <b>wc</b>, <b>rm</b>,
<b>sleep</b>, <b>fgrep</b>, <b>ps</b>, <b>chmod</b>, and
<b>mkdir</b> available</dd>

<dt><a name="M83"><i>hasIsoLocale</i></a></dt>

<dd>test can only be run if can switch to an ISO locale</dd>

<dt><a name="M84"><i>root</i></a></dt>

<dd>test can only run if Unix user is root</dd>

<dt><a name="M85"><i>notRoot</i></a></dt>

<dd>test can only run if Unix user is not root</dd>

<dt><a name="M86"><i>eformat</i></a></dt>

<dd>test can only run if app has a working version of sprintf with
respect to the &ldquo;e&rdquo; format of floating-point
numbers.</dd>

<dt><a name="M87"><i>stdio</i></a></dt>

<dd>test can only be run if <b>interpreter</b> can be <b><a href=
"../TclCmd/open.htm">open</a></b>ed as a pipe.</dd>
</dl>

<p>The alternative mode of constraint control is enabled by setting
<b>configure -limitconstraints</b> to true. With that configuration
setting, all existing constraints other than those in the
constraint list returned by <b>configure -constraints</b> are set
to false. When the value of <b>configure -constraints</b> is set,
all those constraints are set to true. The effect is that when both
options <b>configure -constraints</b> and <b>configure
-limitconstraints</b> are in use, only those tests including only
constraints from the <b>configure -constraints</b> list are run;
all others are skipped. For example, one might set up a
configuration with</p>

<pre>
<b>configure</b> -constraints knownBug \
          -limitconstraints true \
          -verbose pass
</pre>

<p>to run exactly those tests that exercise known bugs, and
discover whether any of them pass, indicating the bug had been
fixed.</p>

<h3><a name="M88">RUNNING ALL TESTS</a></h3>

The single command <b>runAllTests</b> is evaluated to run an entire
test suite, spanning many files and directories. The configuration
options of <b>tcltest</b> control the precise operations. The
<b>runAllTests</b> command begins by printing a summary of its
configuration to <b>outputChannel</b>. 

<p>Test files to be evaluated are sought in the directory
<b>configure -testdir</b>. The list of files in that directory that
match any of the patterns in <b>configure -file</b> and match none
of the patterns in <b>configure -notfile</b> is generated and
sorted. Then each file will be evaluated in turn. If <b>configure
-singleproc</b> is true, then each file will be <b><a href=
"../TclCmd/source.htm">source</a></b>d in the caller's context. If
it is false, then a copy of <b>interpreter</b> will be <b><a href=
"../TclCmd/exec.htm">exec</a></b>'d to evaluate each file. The
multi-process operation is useful when testing can cause errors so
severe that a process terminates. Although such an error may
terminate a child process evaluating one file, the master process
can continue with the rest of the test suite. In multi-process
operation, the configuration of <b>tcltest</b> in the master
process is passed to the child processes as command line arguments,
with the exception of <b>configure -outfile</b>. The
<b>runAllTests</b> command in the master process collects all
output from the child processes and collates their results into one
master report. Any reports of individual test failures, or messages
requested by a <b>configure -verbose</b> setting are passed
directly on to <b>outputChannel</b> by the master process.</p>

<p>After evaluating all selected test files, a summary of the
results is printed to <b>outputChannel</b>. The summary includes
the total number of <b>test</b>s evaluated, broken down into those
skipped, those passed, and those failed. The summary also notes the
number of files evaluated, and the names of any files with failing
tests or errors. A list of the constraints that caused tests to be
skipped, and the number of tests skipped for each is also printed.
Also, messages are printed if it appears that evaluation of a test
file has caused any temporary files to be left behind in
<b>configure -tmpdir</b>.</p>

<p>Having completed and summarized all selected test files,
<b>runAllTests</b> then recursively acts on subdirectories of
<b>configure -testdir</b>. All subdirectories that match any of the
patterns in <b>configure -relateddir</b> and do not match any of
the patterns in <b>configure -asidefromdir</b> are examined. If a
file named <b>all.tcl</b> is found in such a directory, it will be
<b><a href="../TclCmd/source.htm">source</a></b>d in the caller's
context. Whether or not an examined directory contains an
<b>all.tcl</b> file, its subdirectories are also scanned against
the <b>configure -relateddir</b> and <b>configure -asidefromdir</b>
patterns. In this way, many directories in a directory tree can
have all their test files evaluated by a single <b>runAllTests</b>
command.</p>

<h3><a name="M89">CONFIGURABLE OPTIONS</a></h3>

The <b>configure</b> command is used to set and query the
configurable options of <b>tcltest</b>. The valid options are: 

<dl class="configurable options">
<dt><a name="M90"><b>-singleproc</b> <i>boolean</i></a></dt>

<dd>Controls whether or not <b>runAllTests</b> spawns a child
process for each test file. No spawning when <i>boolean</i> is
true. Default value is false.</dd>

<dt><a name="M91"><b>-debug</b> <i>level</i></a></dt>

<dd>Sets the debug level to <i>level</i>, an integer value
indicating how much debugging information should be printed to
stdout. Note that debug messages always go to stdout, independent
of the value of <b>configure -outfile</b>. Default value is 0.
Levels are defined as: 

<dl class="configurable options">
<dt><a name="M92">0</a></dt>

<dd>Do not display any debug information.</dd>

<dt><a name="M93">1</a></dt>

<dd>Display information regarding whether a test is skipped because
it does not match any of the tests that were specified using by
<b>configure -match</b> (userSpecifiedNonMatch) or matches any of
the tests specified by <b>configure -skip</b> (userSpecifiedSkip).
Also print warnings about possible lack of cleanup or balance in
test files. Also print warnings about any re-use of test
names.</dd>

<dt><a name="M94">2</a></dt>

<dd>Display the flag array parsed by the command line processor,
the contents of the ::env array, and all user-defined variables
that exist in the current namespace as they are used.</dd>

<dt><a name="M95">3</a></dt>

<dd>Display information regarding what individual procs in the test
harness are doing.</dd>
</dl>
</dd>

<dt><a name="M96"><b>-verbose</b> <i>level</i></a></dt>

<dd>Sets the type of output verbosity desired to <i>level</i>, a
list of zero or more of the elements <b>body</b>, <b>pass</b>,
<b>skip</b>, <b>start</b>, <b><a href=
"../TclCmd/error.htm">error</a></b> and <b>line</b>. Default value
is <b>{body error}</b>. Levels are defined as: 

<dl class="configurable options">
<dt><a name="M97">body (b)</a></dt>

<dd>Display the body of failed tests</dd>

<dt><a name="M98">pass (p)</a></dt>

<dd>Print output when a test passes</dd>

<dt><a name="M99">skip (s)</a></dt>

<dd>Print output when a test is skipped</dd>

<dt><a name="M100">start (t)</a></dt>

<dd>Print output whenever a test starts</dd>

<dt><a name="M101">error (e)</a></dt>

<dd>Print errorInfo and errorCode, if they exist, when a test
return code does not match its expected return code</dd>

<dt><a name="M102">line (l)</a></dt>

<dd>Print source file line information of failed tests</dd>
</dl>

The single letter abbreviations noted above are also recognized so
that &ldquo;<b>configure -verbose pt</b>&rdquo; is the same as
&ldquo;<b>configure -verbose {pass start}</b>&rdquo;.</dd>

<dt><a name="M103"><b>-preservecore</b> <i>level</i></a></dt>

<dd>Sets the core preservation level to <i>level</i>. This level
determines how stringent checks for core files are. Default value
is 0. Levels are defined as: 

<dl class="configurable options">
<dt><a name="M104">0</a></dt>

<dd>No checking &mdash; do not check for core files at the end of
each test command, but do check for them in <b>runAllTests</b>
after all test files have been evaluated.</dd>

<dt><a name="M105">1</a></dt>

<dd>Also check for core files at the end of each <b>test</b>
command.</dd>

<dt><a name="M106">2</a></dt>

<dd>Check for core files at all times described above, and save a
copy of each core file produced in <b>configure -tmpdir</b>.</dd>
</dl>
</dd>

<dt><a name="M107"><b>-limitconstraints</b> <i>boolean</i></a></dt>

<dd>Sets the mode by which <b>test</b> honors constraints as
described in <b>TESTS</b> above. Default value is false.</dd>

<dt><a name="M108"><b>-constraints</b> <i>list</i></a></dt>

<dd>Sets all the constraints in <i>list</i> to true. Also used in
combination with <b>configure -limitconstraints true</b> to control
an alternative constraint mode as described in <b>TESTS</b> above.
Default value is an empty list.</dd>

<dt><a name="M109"><b>-tmpdir</b> <i>directory</i></a></dt>

<dd>Sets the temporary directory to be used by <b>makeFile</b>,
<b>makeDirectory</b>, <b>viewFile</b>, <b>removeFile</b>, and
<b>removeDirectory</b> as the default directory where temporary
files and directories created by test files should be created.
Default value is <b>workingDirectory</b>.</dd>

<dt><a name="M110"><b>-testdir</b> <i>directory</i></a></dt>

<dd>Sets the directory searched by <b>runAllTests</b> for test
files and subdirectories. Default value is
<b>workingDirectory</b>.</dd>

<dt><a name="M111"><b>-file</b> <i>patternList</i></a></dt>

<dd>Sets the list of patterns used by <b>runAllTests</b> to
determine what test files to evaluate. Default value is
&ldquo;<b>*.test</b>&rdquo;.</dd>

<dt><a name="M112"><b>-notfile</b> <i>patternList</i></a></dt>

<dd>Sets the list of patterns used by <b>runAllTests</b> to
determine what test files to skip. Default value is
&ldquo;<b>l.*.test</b>&rdquo;, so that any SCCS lock files are
skipped.</dd>

<dt><a name="M113"><b>-relateddir</b> <i>patternList</i></a></dt>

<dd>Sets the list of patterns used by <b>runAllTests</b> to
determine what subdirectories to search for an <b>all.tcl</b> file.
Default value is &ldquo;<b>*</b>&rdquo;.</dd>

<dt><a name="M114"><b>-asidefromdir</b> <i>patternList</i></a></dt>

<dd>Sets the list of patterns used by <b>runAllTests</b> to
determine what subdirectories to skip when searching for an
<b>all.tcl</b> file. Default value is an empty list.</dd>

<dt><a name="M115"><b>-match</b> <i>patternList</i></a></dt>

<dd>Set the list of patterns used by <b>test</b> to determine
whether a test should be run. Default value is
&ldquo;<b>*</b>&rdquo;.</dd>

<dt><a name="M116"><b>-skip</b> <i>patternList</i></a></dt>

<dd>Set the list of patterns used by <b>test</b> to determine
whether a test should be skipped. Default value is an empty
list.</dd>

<dt><a name="M117"><b>-load</b> <i>script</i></a></dt>

<dd>Sets a script to be evaluated by <b>loadTestedCommands</b>.
Default value is an empty script.</dd>

<dt><a name="M118"><b>-loadfile</b> <i>filename</i></a></dt>

<dd>Sets the filename from which to read a script to be evaluated
by <b>loadTestedCommands</b>. This is an alternative to
<b>-load</b>. They cannot be used together.</dd>

<dt><a name="M119"><b>-outfile</b> <i>filename</i></a></dt>

<dd>Sets the file to which all output produced by tcltest should be
written. A file named <i>filename</i> will be <b><a href=
"../TclCmd/open.htm">open</a></b>ed for writing, and the resulting
channel will be set as the value of <b>outputChannel</b>.</dd>

<dt><a name="M120"><b>-errfile</b> <i>filename</i></a></dt>

<dd>Sets the file to which all error output produced by tcltest
should be written. A file named <i>filename</i> will be <b><a href=
"../TclCmd/open.htm">open</a></b>ed for writing, and the resulting
channel will be set as the value of <b>errorChannel</b>.</dd>
</dl>

<h3><a name="M121">CREATING TEST SUITES WITH TCLTEST</a></h3>

The fundamental element of a test suite is the individual
<b>test</b> command. We begin with several examples. 

<dl class="creating test suites with tcltest">
<dt>[1]</dt>

<dd>Test of a script that returns normally. 

<pre>
<b>test</b> example-1.0 {normal return} {
    format %s value
} value
</pre>
</dd>

<dt>[2]</dt>

<dd>Test of a script that requires context setup and cleanup. Note
the bracing and indenting style that avoids any need for line
continuation. 

<pre>
<b>test</b> example-1.1 {test file existence} -setup {
    set file [makeFile {} test]
} -body {
    file exists $file
} -cleanup {
    removeFile test
} -result 1
</pre>
</dd>

<dt>[3]</dt>

<dd>Test of a script that raises an error. 

<pre>
<b>test</b> example-1.2 {error return} -body {
    error message
} -returnCodes error -result message
</pre>
</dd>

<dt>[4]</dt>

<dd>Test with a constraint. 

<pre>
<b>test</b> example-1.3 {user owns created files} -constraints {
    unix
} -setup {
    set file [makeFile {} test]
} -body {
    file attributes $file -owner
} -cleanup {
    removeFile test
} -result $::tcl_platform(user)
</pre>
</dd>
</dl>

<p>At the next higher layer of organization, several <b>test</b>
commands are gathered together into a single test file. Test files
should have names with the <b>.test</b> extension, because that is
the default pattern used by <b>runAllTests</b> to find test files.
It is a good rule of thumb to have one test file for each source
code file of your project. It is good practice to edit the test
file and the source code file together, keeping tests synchronized
with code changes.</p>

<p>Most of the code in the test file should be the <b>test</b>
commands. Use constraints to skip tests, rather than conditional
evaluation of <b>test</b>.</p>

<dl class="creating test suites with tcltest">
<dt>[5]</dt>

<dd>Recommended system for writing conditional tests, using
constraints to guard: 

<pre>
<b>testConstraint</b> X [expr $myRequirement]
<b>test</b> goodConditionalTest {} X {
    # body
} result
</pre>
</dd>

<dt>[6]</dt>

<dd>Discouraged system for writing conditional tests, using <b><a
href="../TclCmd/if.htm">if</a></b> to guard: 

<pre>
if $myRequirement {
    test badConditionalTest {} {
        #body
    } result
}
</pre>
</dd>
</dl>

<p>Use the <b>-setup</b> and <b>-cleanup</b> options to establish
and release all context requirements of the test body. Do not make
tests depend on prior tests in the file. Those prior tests might be
skipped. If several consecutive tests require the same context, the
appropriate setup and cleanup scripts may be stored in variable for
passing to each tests <b>-setup</b> and <b>-cleanup</b> options.
This is a better solution than performing setup outside of
<b>test</b> commands, because the setup will only be done if
necessary, and any errors during setup will be reported, and not
cause the test file to abort.</p>

<p>A test file should be able to be combined with other test files
and not interfere with them, even when <b>configure -singleproc
1</b> causes all files to be evaluated in a common interpreter. A
simple way to achieve this is to have your tests define all their
commands and variables in a namespace that is deleted when the test
file evaluation is complete. A good namespace to use is a child
namespace <b>test</b> of the namespace of the module you are
testing.</p>

<p>A test file should also be able to be evaluated directly as a
script, not depending on being called by a master
<b>runAllTests</b>. This means that each test file should process
command line arguments to give the tester all the configuration
control that <b>tcltest</b> provides.</p>

<p>After all <b>test</b>s in a test file, the command
<b>cleanupTests</b> should be called.</p>

<dl class="creating test suites with tcltest">
<dt>[7]</dt>

<dd>Here is a sketch of a sample test file illustrating those
points: 

<pre>
package require tcltest 2.2
eval <b>::tcltest::configure</b> $argv
package require example
namespace eval ::example::test {
    namespace import ::tcltest::*
    <b>testConstraint</b> X [expr {...}]
    variable SETUP {#common setup code}
    variable CLEANUP {#common cleanup code}
    <b>test</b> example-1 {} -setup $SETUP -body {
        # First test
    } -cleanup $CLEANUP -result {...}
    <b>test</b> example-2 {} -constraints X -setup $SETUP -body {
        # Second test; constrained
    } -cleanup $CLEANUP -result {...}
    <b>test</b> example-3 {} {
        # Third test; no context required
    } {...}
    <b>cleanupTests</b>
}
namespace delete ::example::test
</pre>
</dd>
</dl>

<p>The next level of organization is a full test suite, made up of
several test files. One script is used to control the entire suite.
The basic function of this script is to call <b>runAllTests</b>
after doing any necessary setup. This script is usually named
<b>all.tcl</b> because that is the default name used by
<b>runAllTests</b> when combining multiple test suites into one
testing run.</p>

<dl class="creating test suites with tcltest">
<dt>[8]</dt>

<dd>Here is a sketch of a sample test suite master script: 

<pre>
package require Tcl 8.4
package require tcltest 2.2
package require example
<b>::tcltest::configure</b> -testdir \
        [file dirname [file normalize [info script]]]
eval <b>::tcltest::configure</b> $argv
<b>::tcltest::runAllTests</b>
</pre>
</dd>
</dl>

<h3><a name="M122">COMPATIBILITY</a></h3>

A number of commands and variables in the <b>::tcltest</b>
namespace provided by earlier releases of <b>tcltest</b> have not
been documented here. They are no longer part of the supported
public interface of <b>tcltest</b> and should not be used in new
test suites. However, to continue to support existing test suites
written to the older interface specifications, many of those
deprecated commands and variables still work as before. For
example, in many circumstances, <b>configure</b> will be
automatically called shortly after <b>package require tcltest
2.1</b> succeeds with arguments from the variable <b>::argv</b>.
This is to support test suites that depend on the old behavior that
<b>tcltest</b> was automatically configured from command line
arguments. New test files should not depend on this, but should
explicitly include 

<pre>
eval <b>::tcltest::configure</b> $::argv
</pre>

<p>to establish a configuration from command line arguments.</p>

<h3><a name="M123">KNOWN ISSUES</a></h3>

There are two known issues related to nested evaluations of
<b>test</b>. The first issue relates to the stack level in which
test scripts are executed. Tests nested within other tests may be
executed at the same stack level as the outermost test. For
example, in the following code: 

<pre>
<b>test</b> level-1.1 {level 1} {
    -body {
        <b>test</b> level-2.1 {level 2} {
        }
    }
}
</pre>

<p>any script executed in level-2.1 may be executed at the same
stack level as the script defined for level-1.1.</p>

<p>In addition, while two <b>test</b>s have been run, results will
only be reported by <b>cleanupTests</b> for tests at the same level
as test level-1.1. However, test results for all tests run prior to
level-1.1 will be available when test level-2.1 runs. What this
means is that if you try to access the test results for test
level-2.1, it will may say that &ldquo;m&rdquo; tests have run,
&ldquo;n&rdquo; tests have been skipped, &ldquo;o&rdquo; tests have
passed and &ldquo;p&rdquo; tests have failed, where
&ldquo;m&rdquo;, &ldquo;n&rdquo;, &ldquo;o&rdquo;, and
&ldquo;p&rdquo; refer to tests that were run at the same test level
as test level-1.1.</p>

<p>Implementation of output and error comparison in the test
command depends on usage of ::puts in your application code. Output
is intercepted by redefining the ::puts command while the defined
test script is being run. Errors thrown by C procedures or printed
directly from C applications will not be caught by the test
command. Therefore, usage of the <b>-output</b> and
<b>-errorOutput</b> options to <b>test</b> is useful only for pure
Tcl applications that use <b>::puts</b> to produce output.</p>

<h3><a name="M124">KEYWORDS</a></h3>

<a href="../Keywords/T.htm#test">test</a>, <a href=
"../Keywords/T.htm#test harness">test harness</a>, <a href=
"../Keywords/T.htm#test suite">test suite</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1990-1994 The Regents of the University of
California Copyright &copy; 1994-1997 Sun Microsystems, Inc.
Copyright &copy; 1998-1999 Scriptics Corporation Copyright &copy;
2000 Ajuba Solutions</div>
</body>
</html>

