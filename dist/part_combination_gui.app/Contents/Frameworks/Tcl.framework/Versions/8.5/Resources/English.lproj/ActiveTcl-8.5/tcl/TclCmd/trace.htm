<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - trace manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> trace</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="trace.htm#M2" name="L1833">NAME</a> 

<dl>
<dd>trace - Monitor variable accesses, command usages and command
executions</dd>
</dl>
</dd>

<dd><a href="trace.htm#M3" name="L1834">SYNOPSIS</a> 

<dl>
<dd><b>trace</b> <i>option</i> ?<i>arg arg ...</i>?</dd>
</dl>
</dd>

<dd><a href="trace.htm#M4" name="L1835">DESCRIPTION</a> 

<dl class="description">
<dd><a href="trace.htm#M5" name="L1836"><b>trace add</b> <i>type
name ops ?args?</i></a> 

<dl class="description">
<dd><a href="trace.htm#M6" name="L1837"><b>trace add command</b>
<i>name ops commandPrefix</i></a> 

<dl class="description">
<dd><a href="trace.htm#M7" name="L1838"><b>rename</b></a></dd>

<dd><a href="trace.htm#M8" name="L1839"><b>delete</b></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M9" name="L1840"><b>trace add execution</b>
<i>name ops commandPrefix</i></a> 

<dl class="description">
<dd><a href="trace.htm#M10" name="L1841"><b>enter</b></a></dd>

<dd><a href="trace.htm#M11" name="L1842"><b>leave</b></a></dd>

<dd><a href="trace.htm#M12" name="L1843"><b>enterstep</b></a></dd>

<dd><a href="trace.htm#M13" name="L1844"><b>leavestep</b></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M14" name="L1845"><b>trace add variable</b>
<i>name ops commandPrefix</i></a> 

<dl class="description">
<dd><a href="trace.htm#M15" name="L1846"><b>array</b></a></dd>

<dd><a href="trace.htm#M16" name="L1847"><b>read</b></a></dd>

<dd><a href="trace.htm#M17" name="L1848"><b>write</b></a></dd>

<dd><a href="trace.htm#M18" name="L1849"><b>unset</b></a></dd>
</dl>
</dd>
</dl>
</dd>

<dd><a href="trace.htm#M19" name="L1850"><b>trace remove</b>
<i>type name opList commandPrefix</i></a> 

<dl class="description">
<dd><a href="trace.htm#M20" name="L1851"><b>trace remove
command</b> <i>name opList commandPrefix</i></a></dd>

<dd><a href="trace.htm#M21" name="L1852"><b>trace remove
execution</b> <i>name opList commandPrefix</i></a></dd>

<dd><a href="trace.htm#M22" name="L1853"><b>trace remove
variable</b> <i>name opList commandPrefix</i></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M23" name="L1854"><b>trace info</b> <i>type
name</i></a> 

<dl class="description">
<dd><a href="trace.htm#M24" name="L1855"><b>trace info command</b>
<i>name</i></a></dd>

<dd><a href="trace.htm#M25" name="L1856"><b>trace info
execution</b> <i>name</i></a></dd>

<dd><a href="trace.htm#M26" name="L1857"><b>trace info variable</b>
<i>name</i></a></dd>
</dl>
</dd>
</dl>

<dl class="description">
<dd><a href="trace.htm#M27" name="L1858"><b>trace variable</b>
<i>name ops command</i></a></dd>

<dd><a href="trace.htm#M28" name="L1859"><b>trace vdelete</b>
<i>name ops command</i></a></dd>

<dd><a href="trace.htm#M29" name="L1860"><b>trace vinfo</b>
<i>name</i></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M30" name="L1861">EXAMPLES</a></dd>

<dd><a href="trace.htm#M31" name="L1862">SEE ALSO</a></dd>

<dd><a href="trace.htm#M32" name="L1863">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

trace - Monitor variable accesses, command usages and command
executions 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>trace</b> <i>option</i> ?<i>arg arg ...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

This command causes Tcl commands to be executed whenever certain
operations are invoked. The legal <i>option</i>s (which may be
abbreviated) are: 

<dl class="description">
<dt><a name="M5"><b>trace add</b> <i>type name ops
?args?</i></a></dt>

<dd>Where <i>type</i> is <b>command</b>, <b>execution</b>, or <b><a
href="../TclCmd/variable.htm">variable</a></b>. 

<dl class="description">
<dt><a name="M6"><b>trace add command</b> <i>name ops
commandPrefix</i></a></dt>

<dd>Arrange for <i>commandPrefix</i> to be executed (with
additional arguments) whenever command <i>name</i> is modified in
one of the ways given by the list <i>ops</i>. <i>Name</i> will be
resolved using the usual namespace resolution rules used by
commands. If the command does not exist, an error will be thrown. 

<p><i>Ops</i> indicates which operations are of interest, and is a
list of one or more of the following items:</p>

<dl class="description">
<dt><a name="M7"><b>rename</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the traced command is
renamed. Note that renaming to the empty string is considered
deletion, and will not be traced with &ldquo;<b><a href=
"../TclCmd/rename.htm">rename</a></b>&rdquo;.</dd>

<dt><a name="M8"><b>delete</b></a></dt>

<dd>Invoke <i>commandPrefix</i> when the traced command is deleted.
Commands can be deleted explicitly by using the <b><a href=
"../TclCmd/rename.htm">rename</a></b> command to rename the command
to an empty string. Commands are also deleted when the interpreter
is deleted, but traces will not be invoked because there is no
interpreter in which to execute them.</dd>
</dl>

<p>When the trace triggers, depending on the operations being
traced, a number of arguments are appended to <i>commandPrefix</i>
so that the actual command is as follows:</p>

<pre>
<i>commandPrefix oldName newName op</i>
</pre>

<i>OldName</i> and <i>newName</i> give the traced command's current
(old) name, and the name to which it is being renamed (the empty
string if this is a &ldquo;delete&rdquo; operation). <i>Op</i>
indicates what operation is being performed on the command, and is
one of <b><a href="../TclCmd/rename.htm">rename</a></b> or
<b>delete</b> as defined above. The trace operation cannot be used
to stop a command from being deleted. Tcl will always remove the
command once the trace is complete. Recursive renaming or deleting
will not cause further traces of the same type to be evaluated, so
a delete trace which itself deletes the command, or a rename trace
which itself renames the command will not cause further trace
evaluations to occur. Both <i>oldName</i> and <i>newName</i> are
fully qualified with any namespace(s) in which they appear.</dd>

<dt><a name="M9"><b>trace add execution</b> <i>name ops
commandPrefix</i></a></dt>

<dd>Arrange for <i>commandPrefix</i> to be executed (with
additional arguments) whenever command <i>name</i> is executed,
with traces occurring at the points indicated by the list
<i>ops</i>. <i>Name</i> will be resolved using the usual namespace
resolution rules used by commands. If the command does not exist,
an error will be thrown. 

<p><i>Ops</i> indicates which operations are of interest, and is a
list of one or more of the following items:</p>

<dl class="description">
<dt><a name="M10"><b>enter</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the command <i>name</i> is
executed, just before the actual execution takes place.</dd>

<dt><a name="M11"><b>leave</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the command <i>name</i> is
executed, just after the actual execution takes place.</dd>

<dt><a name="M12"><b>enterstep</b></a></dt>

<dd>Invoke <i>commandPrefix</i> for every Tcl command which is
executed from the start of the execution of the procedure
<i>name</i> until that procedure finishes. <i>CommandPrefix</i> is
invoked just before the actual execution of the Tcl command being
reported takes place. For example if we have &ldquo;proc foo {} {
puts "hello" }&rdquo;, then an <i>enterstep</i> trace would be
invoked just before &ldquo;<i>puts "hello"</i>&rdquo; is executed.
Setting an <i>enterstep</i> trace on a command <i>name</i> that
does not refer to a procedure will not result in an error and is
simply ignored.</dd>

<dt><a name="M13"><b>leavestep</b></a></dt>

<dd>Invoke <i>commandPrefix</i> for every Tcl command which is
executed from the start of the execution of the procedure
<i>name</i> until that procedure finishes. <i>CommandPrefix</i> is
invoked just after the actual execution of the Tcl command being
reported takes place. Setting a <i>leavestep</i> trace on a command
<i>name</i> that does not refer to a procedure will not result in
an error and is simply ignored.</dd>
</dl>

<p>When the trace triggers, depending on the operations being
traced, a number of arguments are appended to <i>commandPrefix</i>
so that the actual command is as follows:</p>

<p>For <b>enter</b> and <b>enterstep</b> operations:</p>

<pre>
<i>commandPrefix command-string op</i>
</pre>

<i>Command-string</i> gives the complete current command being
executed (the traced command for a <b>enter</b> operation, an
arbitrary command for a <b>enterstep</b> operation), including all
arguments in their fully expanded form. <i>Op</i> indicates what
operation is being performed on the command execution, and is one
of <b>enter</b> or <b>enterstep</b> as defined above. The trace
operation can be used to stop the command from executing, by
deleting the command in question. Of course when the command is
subsequently executed, an &ldquo;invalid command&rdquo; error will
occur. 

<p>For <b>leave</b> and <b>leavestep</b> operations:</p>

<pre>
<i>commandPrefix command-string code result op</i>
</pre>

<i>Command-string</i> gives the complete current command being
executed (the traced command for a <b>enter</b> operation, an
arbitrary command for a <b>enterstep</b> operation), including all
arguments in their fully expanded form. <i>Code</i> gives the
result code of that execution, and <i>result</i> the result string.
<i>Op</i> indicates what operation is being performed on the
command execution, and is one of <b>leave</b> or <b>leavestep</b>
as defined above. Note that the creation of many <b>enterstep</b>
or <b>leavestep</b> traces can lead to unintuitive results, since
the invoked commands from one trace can themselves lead to further
command invocations for other traces. 

<p><i>CommandPrefix</i> executes in the same context as the code
that invoked the traced operation: thus the <i>commandPrefix</i>,
if invoked from a procedure, will have access to the same local
variables as code in the procedure. This context may be different
than the context in which the trace was created. If
<i>commandPrefix</i> invokes a procedure (which it normally does)
then the procedure will have to use <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> or <b><a href=
"../TclCmd/uplevel.htm">uplevel</a></b> commands if it wishes to
access the local variables of the code which invoked the trace
operation.</p>

<p>While <i>commandPrefix</i> is executing during an execution
trace, traces on <i>name</i> are temporarily disabled. This allows
the <i>commandPrefix</i> to execute <i>name</i> in its body without
invoking any other traces again. If an error occurs while executing
the <i>commandPrefix</i>, then the command <i>name</i> as a whole
will return that same error.</p>

<p>When multiple traces are set on <i>name</i>, then for
<i>enter</i> and <i>enterstep</i> operations, the traced commands
are invoked in the reverse order of how the traces were originally
created; and for <i>leave</i> and <i>leavestep</i> operations, the
traced commands are invoked in the original order of creation.</p>

<p>The behavior of execution traces is currently undefined for a
command <i>name</i> imported into another namespace.</p>
</dd>

<dt><a name="M14"><b>trace add variable</b> <i>name ops
commandPrefix</i></a></dt>

<dd>Arrange for <i>commandPrefix</i> to be executed whenever
variable <i>name</i> is accessed in one of the ways given by the
list <i>ops</i>. <i>Name</i> may refer to a normal variable, an
element of an array, or to an array as a whole (i.e. <i>name</i>
may be just the name of an array, with no parenthesized index). If
<i>name</i> refers to a whole array, then <i>commandPrefix</i> is
invoked whenever any element of the array is manipulated. If the
variable does not exist, it will be created but will not be given a
value, so it will be visible to <b>namespace which</b> queries, but
not to <b><a href="../TclCmd/info.htm">info exists</a></b> queries.


<p><i>Ops</i> indicates which operations are of interest, and is a
list of one or more of the following items:</p>

<dl class="description">
<dt><a name="M15"><b>array</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the variable is accessed
or modified via the <b><a href="../TclCmd/array.htm">array</a></b>
command, provided that <i>name</i> is not a scalar variable at the
time that the <b><a href="../TclCmd/array.htm">array</a></b>
command is invoked. If <i>name</i> is a scalar variable, the access
via the <b><a href="../TclCmd/array.htm">array</a></b> command will
not trigger the trace.</dd>

<dt><a name="M16"><b>read</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the variable is read.</dd>

<dt><a name="M17"><b>write</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the variable is
written.</dd>

<dt><a name="M18"><b>unset</b></a></dt>

<dd>Invoke <i>commandPrefix</i> whenever the variable is unset.
Variables can be unset explicitly with the <b><a href=
"../TclCmd/unset.htm">unset</a></b> command, or implicitly when
procedures return (all of their local variables are unset).
Variables are also unset when interpreters are deleted, but traces
will not be invoked because there is no interpreter in which to
execute them.</dd>
</dl>

<p>When the trace triggers, three arguments are appended to
<i>commandPrefix</i> so that the actual command is as follows:</p>

<pre>
<i>commandPrefix name1 name2 op</i>
</pre>

<i>Name1</i> and <i>name2</i> give the name(s) for the variable
being accessed: if the variable is a scalar then <i>name1</i> gives
the variable's name and <i>name2</i> is an empty string; if the
variable is an array element then <i>name1</i> gives the name of
the array and name2 gives the index into the array; if an entire
array is being deleted and the trace was registered on the overall
array, rather than a single element, then <i>name1</i> gives the
array name and <i>name2</i> is an empty string. <i>Name1</i> and
<i>name2</i> are not necessarily the same as the name used in the
<b>trace variable</b> command: the <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> command allows a procedure to
reference a variable under a different name. <i>Op</i> indicates
what operation is being performed on the variable, and is one of
<b><a href="../TclCmd/read.htm">read</a></b>, <b>write</b>, or
<b><a href="../TclCmd/unset.htm">unset</a></b> as defined above. 

<p><i>CommandPrefix</i> executes in the same context as the code
that invoked the traced operation: if the variable was accessed as
part of a Tcl procedure, then <i>commandPrefix</i> will have access
to the same local variables as code in the procedure. This context
may be different than the context in which the trace was created.
If <i>commandPrefix</i> invokes a procedure (which it normally
does) then the procedure will have to use <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> or <b><a href=
"../TclCmd/uplevel.htm">uplevel</a></b> if it wishes to access the
traced variable. Note also that <i>name1</i> may not necessarily be
the same as the name used to set the trace on the variable;
differences can occur if the access is made through a variable
defined with the <b><a href="../TclCmd/upvar.htm">upvar</a></b>
command.</p>

<p>For read and write traces, <i>commandPrefix</i> can modify the
variable to affect the result of the traced operation. If
<i>commandPrefix</i> modifies the value of a variable during a read
or write trace, then the new value will be returned as the result
of the traced operation. The return value from <i>commandPrefix</i>
is ignored except that if it returns an error of any sort then the
traced operation also returns an error with the same error message
returned by the trace command (this mechanism can be used to
implement read-only variables, for example). For write traces,
<i>commandPrefix</i> is invoked after the variable's value has been
changed; it can write a new value into the variable to override the
original value specified in the write operation. To implement
read-only variables, <i>commandPrefix</i> will have to restore the
old value of the variable.</p>

<p>While <i>commandPrefix</i> is executing during a read or write
trace, traces on the variable are temporarily disabled. This means
that reads and writes invoked by <i>commandPrefix</i> will occur
directly, without invoking <i>commandPrefix</i> (or any other
traces) again. However, if <i>commandPrefix</i> unsets the variable
then unset traces will be invoked.</p>

<p>When an unset trace is invoked, the variable has already been
deleted: it will appear to be undefined with no traces. If an unset
occurs because of a procedure return, then the trace will be
invoked in the variable context of the procedure being returned to:
the stack frame of the returning procedure will no longer exist.
Traces are not disabled during unset traces, so if an unset trace
command creates a new trace and accesses the variable, the trace
will be invoked. Any errors in unset traces are ignored.</p>

<p>If there are multiple traces on a variable they are invoked in
order of creation, most-recent first. If one trace returns an
error, then no further traces are invoked for the variable. If an
array element has a trace set, and there is also a trace set on the
array as a whole, the trace on the overall array is invoked before
the one on the element.</p>

<p>Once created, the trace remains in effect either until the trace
is removed with the <b>trace remove variable</b> command described
below, until the variable is unset, or until the interpreter is
deleted. Unsetting an element of array will remove any traces on
that element, but will not remove traces on the overall array.</p>

<p>This command returns an empty string.</p>
</dd>
</dl>
</dd>

<dt><a name="M19"><b>trace remove</b> <i>type name opList
commandPrefix</i></a></dt>

<dd>Where <i>type</i> is either <b>command</b>, <b>execution</b> or
<b><a href="../TclCmd/variable.htm">variable</a></b>. 

<dl class="description">
<dt><a name="M20"><b>trace remove command</b> <i>name opList
commandPrefix</i></a></dt>

<dd>If there is a trace set on command <i>name</i> with the
operations and command given by <i>opList</i> and
<i>commandPrefix</i>, then the trace is removed, so that
<i>commandPrefix</i> will never again be invoked. Returns an empty
string. If <i>name</i> does not exist, the command will throw an
error.</dd>

<dt><a name="M21"><b>trace remove execution</b> <i>name opList
commandPrefix</i></a></dt>

<dd>If there is a trace set on command <i>name</i> with the
operations and command given by <i>opList</i> and
<i>commandPrefix</i>, then the trace is removed, so that
<i>commandPrefix</i> will never again be invoked. Returns an empty
string. If <i>name</i> does not exist, the command will throw an
error.</dd>

<dt><a name="M22"><b>trace remove variable</b> <i>name opList
commandPrefix</i></a></dt>

<dd>If there is a trace set on variable <i>name</i> with the
operations and command given by <i>opList</i> and
<i>commandPrefix</i>, then the trace is removed, so that
<i>commandPrefix</i> will never again be invoked. Returns an empty
string.</dd>
</dl>
</dd>

<dt><a name="M23"><b>trace info</b> <i>type name</i></a></dt>

<dd>Where <i>type</i> is either <b>command</b>, <b>execution</b> or
<b><a href="../TclCmd/variable.htm">variable</a></b>. 

<dl class="description">
<dt><a name="M24"><b>trace info command</b> <i>name</i></a></dt>

<dd>Returns a list containing one element for each trace currently
set on command <i>name</i>. Each element of the list is itself a
list containing two elements, which are the <i>opList</i> and
<i>commandPrefix</i> associated with the trace. If <i>name</i> does
not have any traces set, then the result of the command will be an
empty string. If <i>name</i> does not exist, the command will throw
an error.</dd>

<dt><a name="M25"><b>trace info execution</b> <i>name</i></a></dt>

<dd>Returns a list containing one element for each trace currently
set on command <i>name</i>. Each element of the list is itself a
list containing two elements, which are the <i>opList</i> and
<i>commandPrefix</i> associated with the trace. If <i>name</i> does
not have any traces set, then the result of the command will be an
empty string. If <i>name</i> does not exist, the command will throw
an error.</dd>

<dt><a name="M26"><b>trace info variable</b> <i>name</i></a></dt>

<dd>Returns a list containing one element for each trace currently
set on variable <i>name</i>. Each element of the list is itself a
list containing two elements, which are the <i>opList</i> and
<i>commandPrefix</i> associated with the trace. If <i>name</i> does
not exist or does not have any traces set, then the result of the
command will be an empty string.</dd>
</dl>
</dd>
</dl>

<p>For backwards compatibility, three other subcommands are
available:</p>

<dl class="description">
<dt><a name="M27"><b>trace variable</b> <i>name ops
command</i></a></dt>

<dd>This is equivalent to <b>trace add variable</b> <i>name ops
command</i>.</dd>

<dt><a name="M28"><b>trace vdelete</b> <i>name ops
command</i></a></dt>

<dd>This is equivalent to <b>trace remove variable</b> <i>name ops
command</i></dd>

<dt><a name="M29"><b>trace vinfo</b> <i>name</i></a></dt>

<dd>This is equivalent to <b>trace info variable</b>
<i>name</i></dd>
</dl>

<p>These subcommands are deprecated and will likely be removed in a
future version of Tcl. They use an older syntax in which <b><a
href="../TclCmd/array.htm">array</a></b>, <b><a href=
"../TclCmd/read.htm">read</a></b>, <b>write</b>, <b><a href=
"../TclCmd/unset.htm">unset</a></b> are replaced by <b>a</b>,
<b>r</b>, <b>w</b> and <b>u</b> respectively, and the <i>ops</i>
argument is not a list, but simply a string concatenation of the
operations, such as <b>rwua</b>.</p>

<h3><a name="M30">EXAMPLES</a></h3>

Print a message whenever either of the global variables <b>foo</b>
and <b>bar</b> are updated, even if they have a different local
name at the time (which can be done with the <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> command): 

<pre>
proc tracer {varname args} {
    upvar #0 $varname var
    puts "$varname was updated to be \"$var\""
}
<b>trace add</b> variable foo write "tracer foo"
<b>trace add</b> variable bar write "tracer bar"
</pre>

<p>Ensure that the global variable <b>foobar</b> always contains
the product of the global variables <b>foo</b> and <b>bar</b>:</p>

<pre>
proc doMult args {
    global foo bar foobar
    set foobar [expr {$foo * $bar}]
}
<b>trace add</b> variable foo write doMult
<b>trace add</b> variable bar write doMult
</pre>

<p>Print a trace of what commands are executed during the
processing of a Tcl procedure:</p>

<pre>
proc x {} { y }
proc y {} { z }
proc z {} { puts hello }
proc report args {puts [info level 0]}
<b>trace add</b> execution x enterstep report
x
  <font size="+1">&rarr;</font> <i>report y enterstep</i>
    <i>report z enterstep</i>
    <i>report {puts hello} enterstep</i>
    <i>hello</i>
</pre>

<h3><a name="M31">SEE ALSO</a></h3>

<b><a href="../TclCmd/set.htm">set</a></b>, <b><a href=
"../TclCmd/unset.htm">unset</a></b> 

<h3><a name="M32">KEYWORDS</a></h3>

<a href="../Keywords/R.htm#read">read</a>, <a href=
"../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/R.htm#rename">rename</a>, <a href=
"../Keywords/V.htm#variable">variable</a>, <a href=
"../Keywords/W.htm#write">write</a>, <a href=
"../Keywords/T.htm#trace">trace</a>, <a href=
"../Keywords/U.htm#unset">unset</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc. Copyright &copy;
2000 Ajuba Solutions.</div>
</body>
</html>

