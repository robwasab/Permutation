<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_SetVar manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> SetVar</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="SetVar.htm#M2" name="L656">NAME</a> 

<dl>
<dd>Tcl_SetVar2Ex, Tcl_SetVar, Tcl_SetVar2, Tcl_ObjSetVar2,
Tcl_GetVar2Ex, Tcl_GetVar, Tcl_GetVar2, Tcl_ObjGetVar2,
Tcl_UnsetVar, Tcl_UnsetVar2 - manipulate Tcl variables</dd>
</dl>
</dd>

<dd><a href="SetVar.htm#M3" name="L657">SYNOPSIS</a></dd>

<dd><a href="SetVar.htm#M4" name="L658">ARGUMENTS</a></dd>

<dd><a href="SetVar.htm#M5" name="L659">DESCRIPTION</a> 

<dl class="description">
<dd><a href="SetVar.htm#M6" name=
"L660"><b>TCL_GLOBAL_ONLY</b></a></dd>

<dd><a href="SetVar.htm#M7" name=
"L661"><b>TCL_NAMESPACE_ONLY</b></a></dd>

<dd><a href="SetVar.htm#M8" name=
"L662"><b>TCL_LEAVE_ERR_MSG</b></a></dd>

<dd><a href="SetVar.htm#M9" name=
"L663"><b>TCL_APPEND_VALUE</b></a></dd>

<dd><a href="SetVar.htm#M10" name=
"L664"><b>TCL_LIST_ELEMENT</b></a></dd>
</dl>
</dd>

<dd><a href="SetVar.htm#M11" name="L665">SEE ALSO</a></dd>

<dd><a href="SetVar.htm#M12" name="L666">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_SetVar2Ex, Tcl_SetVar, Tcl_SetVar2, Tcl_ObjSetVar2,
Tcl_GetVar2Ex, Tcl_GetVar, Tcl_GetVar2, Tcl_ObjGetVar2,
Tcl_UnsetVar, Tcl_UnsetVar2 - manipulate Tcl variables 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
Tcl_Obj *<br>
<b>Tcl_SetVar2Ex</b>(<i>interp, name1, name2, newValuePtr,
flags</i>)<br>
const char *<br>
<b>Tcl_SetVar</b>(<i>interp, varName, newValue, flags</i>)<br>
const char *<br>
<b>Tcl_SetVar2</b>(<i>interp, name1, name2, newValue,
flags</i>)<br>
Tcl_Obj *<br>
<b>Tcl_ObjSetVar2</b>(<i>interp, part1Ptr, part2Ptr, newValuePtr,
flags</i>)<br>
Tcl_Obj *<br>
<b>Tcl_GetVar2Ex</b>(<i>interp, name1, name2, flags</i>)<br>
const char *<br>
<b>Tcl_GetVar</b>(<i>interp, varName, flags</i>)<br>
const char *<br>
<b>Tcl_GetVar2</b>(<i>interp, name1, name2, flags</i>)<br>
Tcl_Obj *<br>
<b>Tcl_ObjGetVar2</b>(<i>interp, part1Ptr, part2Ptr, flags</i>)<br>
int<br>
<b>Tcl_UnsetVar</b>(<i>interp, varName, flags</i>)<br>
int<br>
<b>Tcl_UnsetVar2</b>(<i>interp, name1, name2, flags</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter containing variable.</dd>

<dt>const char <b>*name1</b> (in)</dt>

<dd>Contains the name of an array variable (if <i>name2</i> is
non-NULL) or (if <i>name2</i> is NULL) either the name of a scalar
variable or a complete name including both variable name and index.
May include <b>::</b> namespace qualifiers to specify a variable in
a particular namespace.</dd>

<dt>const char <b>*name2</b> (in)</dt>

<dd>If non-NULL, gives name of element within array; in this case
<i>name1</i> must refer to an array variable.</dd>

<dt>Tcl_Obj <b>*newValuePtr</b> (in)</dt>

<dd>Points to a Tcl object containing the new value for the
variable.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>OR-ed combination of bits providing additional information. See
below for valid values.</dd>

<dt>const char <b>*varName</b> (in)</dt>

<dd>Name of variable. May include <b>::</b> namespace qualifiers to
specify a variable in a particular namespace. May refer to a scalar
variable or an element of an array.</dd>

<dt>const char <b>*newValue</b> (in)</dt>

<dd>New value for variable, specified as a null-terminated string.
A copy of this value is stored in the variable.</dd>

<dt>Tcl_Obj <b>*part1Ptr</b> (in)</dt>

<dd>Points to a Tcl object containing the variable's name. The name
may include a series of <b>::</b> namespace qualifiers to specify a
variable in a particular namespace. May refer to a scalar variable
or an element of an array variable.</dd>

<dt>Tcl_Obj <b>*part2Ptr</b> (in)</dt>

<dd>If non-NULL, points to an object containing the name of an
element within an array and <i>part1Ptr</i> must refer to an array
variable.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These procedures are used to create, modify, read, and delete Tcl
variables from C code. 

<p><b>Tcl_SetVar2Ex</b>, <b>Tcl_SetVar</b>, <b>Tcl_SetVar2</b>, and
<b>Tcl_ObjSetVar2</b> will create a new variable or modify an
existing one. These procedures set the given variable to the value
given by <i>newValuePtr</i> or <i>newValue</i> and return a pointer
to the variable's new value, which is stored in Tcl's variable
structure. <b>Tcl_SetVar2Ex</b> and <b>Tcl_ObjSetVar2</b> take the
new value as a Tcl_Obj and return a pointer to a Tcl_Obj.
<b>Tcl_SetVar</b> and <b>Tcl_SetVar2</b> take the new value as a
string and return a string; they are usually less efficient than
<b>Tcl_ObjSetVar2</b>. Note that the return value may be different
than the <i>newValuePtr</i> or <i>newValue</i> argument, due to
modifications made by write traces. If an error occurs in setting
the variable (e.g. an array variable is referenced without giving
an index into the array) NULL is returned and an error message is
left in <i>interp</i>'s result if the <b>TCL_LEAVE_ERR_MSG</b>
<i>flag</i> bit is set.</p>

<p><b>Tcl_GetVar2Ex</b>, <b>Tcl_GetVar</b>, <b>Tcl_GetVar2</b>, and
<b>Tcl_ObjGetVar2</b> return the current value of a variable. The
arguments to these procedures are treated in the same way as the
arguments to the procedures described above. Under normal
circumstances, the return value is a pointer to the variable's
value. For <b>Tcl_GetVar2Ex</b> and <b>Tcl_ObjGetVar2</b> the value
is returned as a pointer to a Tcl_Obj. For <b>Tcl_GetVar</b> and
<b>Tcl_GetVar2</b> the value is returned as a string; this is
usually less efficient, so <b>Tcl_GetVar2Ex</b> or
<b>Tcl_ObjGetVar2</b> are preferred. If an error occurs while
reading the variable (e.g. the variable does not exist or an array
element is specified for a scalar variable), then NULL is returned
and an error message is left in <i>interp</i>'s result if the
<b>TCL_LEAVE_ERR_MSG</b> <i>flag</i> bit is set.</p>

<p><b>Tcl_UnsetVar</b> and <b>Tcl_UnsetVar2</b> may be used to
remove a variable, so that future attempts to read the variable
will return an error. The arguments to these procedures are treated
in the same way as the arguments to the procedures above. If the
variable is successfully removed then <b>TCL_OK</b> is returned. If
the variable cannot be removed because it does not exist then
<b>TCL_ERROR</b> is returned and an error message is left in
<i>interp</i>'s result if the <b>TCL_LEAVE_ERR_MSG</b> <i>flag</i>
bit is set. If an array element is specified, the given element is
removed but the array remains. If an array name is specified
without an index, then the entire array is removed.</p>

<p>The name of a variable may be specified to these procedures in
four ways:</p>

<dl class="description">
<dt>[1]</dt>

<dd>If <b>Tcl_SetVar</b>, <b>Tcl_GetVar</b>, or <b>Tcl_UnsetVar</b>
is invoked, the variable name is given as a single string,
<i>varName</i>. If <i>varName</i> contains an open parenthesis and
ends with a close parenthesis, then the value between the
parentheses is treated as an index (which can have any string
value) and the characters before the first open parenthesis are
treated as the name of an array variable. If <i>varName</i> does
not have parentheses as described above, then the entire string is
treated as the name of a scalar variable.</dd>

<dt>[2]</dt>

<dd>If the <i>name1</i> and <i>name2</i> arguments are provided and
<i>name2</i> is non-NULL, then an array element is specified and
the array name and index have already been separated by the caller:
<i>name1</i> contains the name and <i>name2</i> contains the index.
An error is generated if <i>name1</i> contains an open parenthesis
and ends with a close parenthesis (array element) and <i>name2</i>
is non-NULL.</dd>

<dt>[3]</dt>

<dd>If <i>name2</i> is NULL, <i>name1</i> is treated just like
<i>varName</i> in case [1] above (it can be either a scalar or an
array element variable name).</dd>
</dl>

<p>The <i>flags</i> argument may be used to specify any of several
options to the procedures. It consists of an OR-ed combination of
the following bits.</p>

<dl class="description">
<dt><a name="M6"><b>TCL_GLOBAL_ONLY</b></a></dt>

<dd>Under normal circumstances the procedures look up variables as
follows. If a procedure call is active in <i>interp</i>, the
variable is looked up at the current level of procedure call.
Otherwise, the variable is looked up first in the current
namespace, then in the global namespace. However, if this bit is
set in <i>flags</i> then the variable is looked up only in the
global namespace even if there is a procedure call active. If both
<b>TCL_GLOBAL_ONLY</b> and <b>TCL_NAMESPACE_ONLY</b> are given,
<b>TCL_GLOBAL_ONLY</b> is ignored.</dd>

<dt><a name="M7"><b>TCL_NAMESPACE_ONLY</b></a></dt>

<dd>If this bit is set in <i>flags</i> then the variable is looked
up only in the current namespace; if a procedure is active its
variables are ignored, and the global namespace is also ignored
unless it is the current namespace.</dd>

<dt><a name="M8"><b>TCL_LEAVE_ERR_MSG</b></a></dt>

<dd>If an error is returned and this bit is set in <i>flags</i>,
then an error message will be left in the interpreter's result,
where it can be retrieved with <b><a href=
"../TclLib/SetResult.htm">Tcl_GetObjResult</a></b> or <b><a href=
"../TclLib/SetResult.htm">Tcl_GetStringResult</a></b>. If this flag
bit is not set then no error message is left and the interpreter's
result will not be modified.</dd>

<dt><a name="M9"><b>TCL_APPEND_VALUE</b></a></dt>

<dd>If this bit is set then <i>newValuePtr</i> or <i>newValue</i>
is appended to the current value instead of replacing it. If the
variable is currently undefined, then the bit is ignored. This bit
is only used by the <b>Tcl_Set*</b> procedures.</dd>

<dt><a name="M10"><b>TCL_LIST_ELEMENT</b></a></dt>

<dd>If this bit is set, then <i>newValue</i> is converted to a
valid Tcl list element before setting (or appending to) the
variable. A separator space is appended before the new list element
unless the list element is going to be the first element in a list
or sublist (i.e. the variable's current value is empty, or contains
the single character &ldquo;{&rdquo;, or ends in &ldquo; }&rdquo;).
When appending, the original value of the variable must also be a
valid list, so that the operation is the appending of a new list
element onto a list.</dd>
</dl>

<p><b>Tcl_GetVar</b> and <b>Tcl_GetVar2</b> return the current
value of a variable. The arguments to these procedures are treated
in the same way as the arguments to <b>Tcl_SetVar</b> and
<b>Tcl_SetVar2</b>. Under normal circumstances, the return value is
a pointer to the variable's value (which is stored in Tcl's
variable structure and will not change before the next call to
<b>Tcl_SetVar</b> or <b>Tcl_SetVar2</b>). <b>Tcl_GetVar</b> and
<b>Tcl_GetVar2</b> use the flag bits <b>TCL_GLOBAL_ONLY</b> and
<b>TCL_LEAVE_ERR_MSG</b>, both of which have the same meaning as
for <b>Tcl_SetVar</b>. If an error occurs in reading the variable
(e.g. the variable does not exist or an array element is specified
for a scalar variable), then NULL is returned.</p>

<p><b>Tcl_UnsetVar</b> and <b>Tcl_UnsetVar2</b> may be used to
remove a variable, so that future calls to <b>Tcl_GetVar</b> or
<b>Tcl_GetVar2</b> for the variable will return an error. The
arguments to these procedures are treated in the same way as the
arguments to <b>Tcl_GetVar</b> and <b>Tcl_GetVar2</b>. If the
variable is successfully removed then <b>TCL_OK</b> is returned. If
the variable cannot be removed because it does not exist then
<b>TCL_ERROR</b> is returned. If an array element is specified, the
given element is removed but the array remains. If an array name is
specified without an index, then the entire array is removed.</p>

<h3><a name="M11">SEE ALSO</a></h3>

<b><a href="../TclLib/SetResult.htm">Tcl_GetObjResult</a></b>,
<b><a href="../TclLib/SetResult.htm">Tcl_GetStringResult</a></b>,
<b><a href="../TclLib/TraceVar.htm">Tcl_TraceVar</a></b> 

<h3><a name="M12">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#array">array</a>, <a href=
"../Keywords/G.htm#get variable">get variable</a>, <a href=
"../Keywords/I.htm#interpreter">interpreter</a>, <a href=
"../Keywords/O.htm#object">object</a>, <a href=
"../Keywords/S.htm#scalar">scalar</a>, <a href=
"../Keywords/S.htm#set">set</a>, <a href=
"../Keywords/U.htm#unset">unset</a>, <a href=
"../Keywords/V.htm#variable">variable</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1997 Sun Microsystems, Inc.</div>
</body>
</html>

