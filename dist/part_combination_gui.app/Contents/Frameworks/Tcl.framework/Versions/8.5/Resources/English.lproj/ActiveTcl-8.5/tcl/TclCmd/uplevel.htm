<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Built-In Commands - uplevel manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> uplevel</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

uplevel - Execute a script in a different stack frame 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>uplevel</b> ?<i>level</i>? <i>arg</i> ?<i>arg ...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

All of the <i>arg</i> arguments are concatenated as if they had
been passed to <b><a href="../TclCmd/concat.htm">concat</a></b>;
the result is then evaluated in the variable context indicated by
<i>level</i>. <b>Uplevel</b> returns the result of that evaluation.


<p>If <i>level</i> is an integer then it gives a distance (up the
procedure calling stack) to move before executing the command. If
<i>level</i> consists of <b>#</b> followed by a number then the
number gives an absolute level number. If <i>level</i> is omitted
then it defaults to <b>1</b>. <i>Level</i> cannot be defaulted if
the first <i>command</i> argument starts with a digit or
<b>#</b>.</p>

<p>For example, suppose that procedure <b>a</b> was invoked from
top-level, and that it called <b>b</b>, and that <b>b</b> called
<b>c</b>. Suppose that <b>c</b> invokes the <b>uplevel</b> command.
If <i>level</i> is <b>1</b> or <b>#2</b> or omitted, then the
command will be executed in the variable context of <b>b</b>. If
<i>level</i> is <b>2</b> or <b>#1</b> then the command will be
executed in the variable context of <b>a</b>. If <i>level</i> is
<b>3</b> or <b>#0</b> then the command will be executed at
top-level (only global variables will be visible).</p>

<p>The <b>uplevel</b> command causes the invoking procedure to
disappear from the procedure calling stack while the command is
being executed. In the above example, suppose <b>c</b> invokes the
command</p>

<pre>
<b>uplevel</b> 1 {set x 43; d}
</pre>

where <b>d</b> is another Tcl procedure. The <b><a href=
"../TclCmd/set.htm">set</a></b> command will modify the variable
<b>x</b> in <b>b</b>'s context, and <b>d</b> will execute at level
3, as if called from <b>b</b>. If it in turn executes the command 

<pre>
<b>uplevel</b> {set x 42}
</pre>

then the <b><a href="../TclCmd/set.htm">set</a></b> command will
modify the same variable <b>x</b> in <b>b</b>'s context: the
procedure <b>c</b> does not appear to be on the call stack when
<b>d</b> is executing. The <b><a href="../TclCmd/info.htm">info
level</a></b> command may be used to obtain the level of the
current procedure. 

<p><b>Uplevel</b> makes it possible to implement new control
constructs as Tcl procedures (for example, <b>uplevel</b> could be
used to implement the <b><a href=
"../TclCmd/while.htm">while</a></b> construct as a Tcl
procedure).</p>

<p>The <b>namespace eval</b> and <b><a href=
"../TclCmd/apply.htm">apply</a></b> commands offer other ways
(besides procedure calls) that the Tcl naming context can change.
They add a call frame to the stack to represent the namespace
context. This means each <b>namespace eval</b> command counts as
another call level for <b>uplevel</b> and <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> commands. For example, <b>info
level 1</b> will return a list describing a command that is either
the outermost procedure call or the outermost <b>namespace eval</b>
command. Also, <b>uplevel #0</b> evaluates a script at top-level in
the outermost namespace (the global namespace).</p>

<h3><a name="M5">EXAMPLE</a></h3>

As stated above, the <b>uplevel</b> command is useful for creating
new control constructs. This example shows how (without error
handling) it can be used to create a <b>do</b> command that is the
counterpart of <b><a href="../TclCmd/while.htm">while</a></b>
except for always performing the test after running the loop body: 

<pre>
proc do {body while condition} {
    if {$while ne "while"} {
        error "required word missing"
    }
    set conditionCmd [list expr $condition]
    while {1} {
        <b>uplevel</b> 1 $body
        if {![<b>uplevel</b> 1 $conditionCmd]} {
            break
        }
    }
}
</pre>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclCmd/apply.htm">apply</a></b>, <b><a href=
"../TclCmd/namespace.htm">namespace</a></b>, <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#context">context</a>, <a href=
"../Keywords/L.htm#level">level</a>, <a href=
"../Keywords/N.htm#namespace">namespace</a>, <a href=
"../Keywords/S.htm#stack frame">stack frame</a>, <a href=
"../Keywords/V.htm#variables">variables</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-1997 Sun Microsystems, Inc.</div>
</body>
</html>

