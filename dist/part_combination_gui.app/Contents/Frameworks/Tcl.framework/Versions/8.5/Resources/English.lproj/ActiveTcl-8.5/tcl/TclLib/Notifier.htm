<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Notifier manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> Notifier</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="Notifier.htm#M2" name="L446">NAME</a> 

<dl>
<dd>Tcl_CreateEventSource, Tcl_DeleteEventSource,
Tcl_SetMaxBlockTime, Tcl_QueueEvent, Tcl_ThreadQueueEvent,
Tcl_ThreadAlert, Tcl_GetCurrentThread, Tcl_DeleteEvents,
Tcl_InitNotifier, Tcl_FinalizeNotifier, Tcl_WaitForEvent,
Tcl_AlertNotifier, Tcl_SetTimer, Tcl_ServiceAll, Tcl_ServiceEvent,
Tcl_GetServiceMode, Tcl_SetServiceMode - the event queue and
notifier interfaces</dd>
</dl>
</dd>

<dd><a href="Notifier.htm#M3" name="L447">SYNOPSIS</a></dd>

<dd><a href="Notifier.htm#M4" name="L448">ARGUMENTS</a></dd>

<dd><a href="Notifier.htm#M5" name="L449">INTRODUCTION</a></dd>

<dd><a href="Notifier.htm#M6" name="L450">NOTIFIER BASICS</a></dd>

<dd><a href="Notifier.htm#M7" name="L451">CREATING A NEW EVENT
SOURCE</a> 

<dl class="creating a new event source">
<dd><a href="Notifier.htm#M8" name=
"L452"><b>TCL_QUEUE_TAIL</b></a></dd>

<dd><a href="Notifier.htm#M9" name=
"L453"><b>TCL_QUEUE_HEAD</b></a></dd>

<dd><a href="Notifier.htm#M10" name=
"L454"><b>TCL_QUEUE_MARK</b></a></dd>
</dl>
</dd>

<dd><a href="Notifier.htm#M11" name="L455">CREATING A NEW
NOTIFIER</a></dd>

<dd><a href="Notifier.htm#M12" name="L456">REPLACING THE
NOTIFIER</a></dd>

<dd><a href="Notifier.htm#M13" name="L457">EXTERNAL EVENT
LOOPS</a></dd>

<dd><a href="Notifier.htm#M14" name="L458">SEE ALSO</a></dd>

<dd><a href="Notifier.htm#M15" name="L459">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_CreateEventSource, Tcl_DeleteEventSource, Tcl_SetMaxBlockTime,
Tcl_QueueEvent, Tcl_ThreadQueueEvent, Tcl_ThreadAlert,
Tcl_GetCurrentThread, Tcl_DeleteEvents, Tcl_InitNotifier,
Tcl_FinalizeNotifier, Tcl_WaitForEvent, Tcl_AlertNotifier,
Tcl_SetTimer, Tcl_ServiceAll, Tcl_ServiceEvent, Tcl_GetServiceMode,
Tcl_SetServiceMode - the event queue and notifier interfaces 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
void<br>
<b>Tcl_CreateEventSource</b>(<i>setupProc, checkProc,
clientData</i>)<br>
void<br>
<b>Tcl_DeleteEventSource</b>(<i>setupProc, checkProc,
clientData</i>)<br>
void<br>
<b>Tcl_SetMaxBlockTime</b>(<i>timePtr</i>)<br>
void<br>
<b>Tcl_QueueEvent</b>(<i>evPtr, position</i>)<br>
void<br>
<b>Tcl_ThreadQueueEvent</b>(<i>threadId, evPtr, position</i>)<br>
void<br>
<b>Tcl_ThreadAlert</b>(<i>threadId</i>)<br>
Tcl_ThreadId<br>
<b>Tcl_GetCurrentThread</b>()<br>
void<br>
<b>Tcl_DeleteEvents</b>(<i>deleteProc, clientData</i>)<br>
ClientData<br>
<b>Tcl_InitNotifier</b>()<br>
void<br>
<b>Tcl_FinalizeNotifier</b>(<i>clientData</i>)<br>
int<br>
<b>Tcl_WaitForEvent</b>(<i>timePtr</i>)<br>
void<br>
<b>Tcl_AlertNotifier</b>(<i>clientData</i>)<br>
void<br>
<b>Tcl_SetTimer</b>(<i>timePtr</i>)<br>
int<br>
<b>Tcl_ServiceAll</b>()<br>
int<br>
<b>Tcl_ServiceEvent</b>(<i>flags</i>)<br>
int<br>
<b>Tcl_GetServiceMode</b>()<br>
int<br>
<b>Tcl_SetServiceMode</b>(<i>mode</i>)<br>
void<br>
<b>Tcl_ServiceModeHook</b>(<i>mode</i>)<br>
void<br>
<b>Tcl_SetNotifier</b>(<i>notifierProcPtr</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Tcl_EventSetupProc <b>*setupProc</b> (in)</dt>

<dd>Procedure to invoke to prepare for event wait in <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>.</dd>

<dt>Tcl_EventCheckProc <b>*checkProc</b> (in)</dt>

<dd>Procedure for <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> to invoke after
waiting for events. Checks to see if any events have occurred and,
if so, queues them.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary one-word value to pass to <i>setupProc</i>,
<i>checkProc</i>, or <i>deleteProc</i>.</dd>

<dt>Tcl_Time <b>*timePtr</b> (in)</dt>

<dd>Indicates the maximum amount of time to wait for an event. This
is specified as an interval (how long to wait), not an absolute
time (when to wakeup). If the pointer passed to
<b>Tcl_WaitForEvent</b> is NULL, it means there is no maximum wait
time: wait forever if necessary.</dd>

<dt>Tcl_Event <b>*evPtr</b> (in)</dt>

<dd>An event to add to the event queue. The storage for the event
must have been allocated by the caller using <b><a href=
"../TclLib/Alloc.htm">Tcl_Alloc</a></b> or <b><a href=
"../TclLib/Alloc.htm">ckalloc</a></b>.</dd>

<dt>Tcl_QueuePosition <b>position</b> (in)</dt>

<dd>Where to add the new event in the queue: <b>TCL_QUEUE_TAIL</b>,
<b>TCL_QUEUE_HEAD</b>, or <b>TCL_QUEUE_MARK</b>.</dd>

<dt>Tcl_ThreadId <b>threadId</b> (in)</dt>

<dd>A unique identifier for a thread.</dd>

<dt>Tcl_EventDeleteProc <b>*deleteProc</b> (in)</dt>

<dd>Procedure to invoke for each queued event in
<b>Tcl_DeleteEvents</b>.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>What types of events to service. These flags are the same as
those passed to <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>.</dd>

<dt>int <b>mode</b> (in)</dt>

<dd>Indicates whether events should be serviced by
<b>Tcl_ServiceAll</b>. Must be one of <b>TCL_SERVICE_NONE</b> or
<b>TCL_SERVICE_ALL</b>.</dd>

<dt>Tcl_NotifierProcs* <b>notifierProcPtr</b> (in)</dt>

<dd>Structure of function pointers describing notifier procedures
that are to replace the ones installed in the executable. See
<b>REPLACING THE NOTIFIER</b> for details.</dd>
</dl>

<h3><a name="M5">INTRODUCTION</a></h3>

The interfaces described here are used to customize the Tcl event
loop. The two most common customizations are to add new sources of
events and to merge Tcl's event loop with some other event loop,
such as one provided by an application in which Tcl is embedded.
Each of these tasks is described in a separate section below. 

<p>The procedures in this manual entry are the building blocks out
of which the Tcl event notifier is constructed. The event notifier
is the lowest layer in the Tcl event mechanism. It consists of
three things:</p>

<dl class="introduction">
<dt>[1]</dt>

<dd>Event sources: these represent the ways in which events can be
generated. For example, there is a timer event source that
implements the <b><a href=
"../TclLib/CrtTimerHdlr.htm">Tcl_CreateTimerHandler</a></b>
procedure and the <b><a href="../TclCmd/after.htm">after</a></b>
command, and there is a file event source that implements the <b><a
href="../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b>
procedure on Unix systems. An event source must work with the
notifier to detect events at the right times, record them on the
event queue, and eventually notify higher-level software that they
have occurred. The procedures <b>Tcl_CreateEventSource</b>,
<b>Tcl_DeleteEventSource</b>, and <b>Tcl_SetMaxBlockTime</b>,
<b>Tcl_QueueEvent</b>, and <b>Tcl_DeleteEvents</b> are used
primarily by event sources.</dd>

<dt>[2]</dt>

<dd>The event queue: for non-threaded applications, there is a
single queue for the whole application, containing events that have
been detected but not yet serviced. Event sources place events onto
the queue so that they may be processed in order at appropriate
times during the event loop. The event queue guarantees a fair
discipline of event handling, so that no event source can starve
the others. It also allows events to be saved for servicing at a
future time. Threaded applications work in a similar manner, except
that there is a separate event queue for each thread containing a
Tcl interpreter. <b>Tcl_QueueEvent</b> is used (primarily by event
sources) to add events to the event queue and
<b>Tcl_DeleteEvents</b> is used to remove events from the queue
without processing them. In a threaded application,
<b>Tcl_QueueEvent</b> adds an event to the current thread's queue,
and <b>Tcl_ThreadQueueEvent</b> adds an event to a queue in a
specific thread.</dd>

<dt>[3]</dt>

<dd>The event loop: in order to detect and process events, the
application enters a loop that waits for events to occur, places
them on the event queue, and then processes them. Most applications
will do this by calling the procedure <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>, which is
described in a separate manual entry.</dd>
</dl>

<p>Most Tcl applications need not worry about any of the internals
of the Tcl notifier. However, the notifier now has enough
flexibility to be retargeted either for a new platform or to use an
external event loop (such as the Motif event loop, when Tcl is
embedded in a Motif application). The procedures
<b>Tcl_WaitForEvent</b> and <b>Tcl_SetTimer</b> are normally
implemented by Tcl, but may be replaced with new versions to
retarget the notifier (the <b>Tcl_InitNotifier</b>,
<b>Tcl_AlertNotifier</b>, <b>Tcl_FinalizeNotifier</b>, <b><a href=
"../TclLib/Sleep.htm">Tcl_Sleep</a></b>, <b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b>, and
<b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_DeleteFileHandler</a></b> must also
be replaced; see CREATING A NEW NOTIFIER below for details). The
procedures <b>Tcl_ServiceAll</b>, <b>Tcl_ServiceEvent</b>,
<b>Tcl_GetServiceMode</b>, and <b>Tcl_SetServiceMode</b> are
provided to help connect Tcl's event loop to an external event loop
such as Motif's.</p>

<h3><a name="M6">NOTIFIER BASICS</a></h3>

The easiest way to understand how the notifier works is to consider
what happens when <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> is called. <b><a
href="../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> is passed a
<i>flags</i> argument that indicates what sort of events it is OK
to process and also whether or not to block if no events are ready.
<b><a href="../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> does
the following things: 

<dl class="notifier basics">
<dt>[1]</dt>

<dd>Check the event queue to see if it contains any events that can
be serviced. If so, service the first possible event, remove it
from the queue, and return. It does this by calling
<b>Tcl_ServiceEvent</b> and passing in the <i>flags</i>
argument.</dd>

<dt>[2]</dt>

<dd>Prepare to block for an event. To do this, <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> invokes a
<i>setup procedure</i> in each event source. The event source will
perform event-source specific initialization and possibly call
<b>Tcl_SetMaxBlockTime</b> to limit how long
<b>Tcl_WaitForEvent</b> will block if no new events occur.</dd>

<dt>[3]</dt>

<dd>Call <b>Tcl_WaitForEvent</b>. This procedure is implemented
differently on different platforms; it waits for an event to occur,
based on the information provided by the event sources. It may
cause the application to block if <i>timePtr</i> specifies an
interval other than 0. <b>Tcl_WaitForEvent</b> returns when
something has happened, such as a file becoming readable or the
interval given by <i>timePtr</i> expiring. If there are no events
for <b>Tcl_WaitForEvent</b> to wait for, so that it would block
forever, then it returns immediately and <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> returns 0.</dd>

<dt>[4]</dt>

<dd>Call a <i>check procedure</i> in each event source. The check
procedure determines whether any events of interest to this source
occurred. If so, the events are added to the event queue.</dd>

<dt>[5]</dt>

<dd>Check the event queue to see if it contains any events that can
be serviced. If so, service the first possible event, remove it
from the queue, and return.</dd>

<dt>[6]</dt>

<dd>See if there are idle callbacks pending. If so, invoke all of
them and return.</dd>

<dt>[7]</dt>

<dd>Either return 0 to indicate that no events were ready, or go
back to step [2] if blocking was requested by the caller.</dd>
</dl>

<h3><a name="M7">CREATING A NEW EVENT SOURCE</a></h3>

An event source consists of three procedures invoked by the
notifier, plus additional C procedures that are invoked by
higher-level code to arrange for event-driven callbacks. The three
procedures called by the notifier consist of the setup and check
procedures described above, plus an additional procedure that is
invoked when an event is removed from the event queue for
servicing. 

<p>The procedure <b>Tcl_CreateEventSource</b> creates a new event
source. Its arguments specify the setup procedure and check
procedure for the event source. <i>SetupProc</i> should match the
following prototype:</p>

<pre>
typedef void Tcl_EventSetupProc(
        ClientData <i>clientData</i>,
        int <i>flags</i>);
</pre>

The <i>clientData</i> argument will be the same as the
<i>clientData</i> argument to <b>Tcl_CreateEventSource</b>; it is
typically used to point to private information managed by the event
source. The <i>flags</i> argument will be the same as the
<i>flags</i> argument passed to <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> except that it
will never be 0 (<b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> replaces 0 with
<b>TCL_ALL_EVENTS</b>). <i>Flags</i> indicates what kinds of events
should be considered; if the bit corresponding to this event source
is not set, the event source should return immediately without
doing anything. For example, the file event source checks for the
<b>TCL_FILE_EVENTS</b> bit. 

<p><i>SetupProc</i>'s job is to make sure that the application
wakes up when events of the desired type occur. This is typically
done in a platform-dependent fashion. For example, under Unix an
event source might call <b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b>; under
Windows it might request notification with a Windows event. For
timer-driven event sources such as timer events or any polled
event, the event source can call <b>Tcl_SetMaxBlockTime</b> to
force the application to wake up after a specified time even if no
events have occurred. If no event source calls
<b>Tcl_SetMaxBlockTime</b> then <b>Tcl_WaitForEvent</b> will wait
as long as necessary for an event to occur; otherwise, it will only
wait as long as the shortest interval passed to
<b>Tcl_SetMaxBlockTime</b> by one of the event sources. If an event
source knows that it already has events ready to report, it can
request a zero maximum block time. For example, the setup procedure
for the X event source looks to see if there are events already
queued. If there are, it calls <b>Tcl_SetMaxBlockTime</b> with a 0
block time so that <b>Tcl_WaitForEvent</b> does not block if there
is no new data on the X connection. The <i>timePtr</i> argument to
<b>Tcl_WaitForEvent</b> points to a structure that describes a time
interval in seconds and microseconds:</p>

<pre>
typedef struct Tcl_Time {
        long <i>sec</i>;
        long <i>usec</i>;
} Tcl_Time;
</pre>

The <i>usec</i> field should be less than 1000000. 

<p>Information provided to <b>Tcl_SetMaxBlockTime</b> is only used
for the next call to <b>Tcl_WaitForEvent</b>; it is discarded after
<b>Tcl_WaitForEvent</b> returns. The next time an event wait is
done each of the event sources' setup procedures will be called
again, and they can specify new information for that event
wait.</p>

<p>If the application uses an external event loop rather than <b><a
href="../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>, the event
sources may need to call <b>Tcl_SetMaxBlockTime</b> at other times.
For example, if a new event handler is registered that needs to
poll for events, the event source may call
<b>Tcl_SetMaxBlockTime</b> to set the block time to zero to force
the external event loop to call Tcl. In this case,
<b>Tcl_SetMaxBlockTime</b> invokes <b>Tcl_SetTimer</b> with the
shortest interval seen since the last call to <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> or
<b>Tcl_ServiceAll</b>.</p>

<p>In addition to the generic procedure <b>Tcl_SetMaxBlockTime</b>,
other platform-specific procedures may also be available for
<i>setupProc</i>, if there is additional information needed by
<b>Tcl_WaitForEvent</b> on that platform. For example, on Unix
systems the <b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b> interface
can be used to wait for file events.</p>

<p>The second procedure provided by each event source is its check
procedure, indicated by the <i>checkProc</i> argument to
<b>Tcl_CreateEventSource</b>. <i>CheckProc</i> must match the
following prototype:</p>

<pre>
typedef void Tcl_EventCheckProc(
        ClientData <i>clientData</i>,
        int <i>flags</i>);
</pre>

The arguments to this procedure are the same as those for
<i>setupProc</i>. <b>CheckProc</b> is invoked by <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> after it has
waited for events. Presumably at least one event source is now
prepared to queue an event. <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> calls each of the
event sources in turn, so they all have a chance to queue any
events that are ready. The check procedure does two things. First,
it must see if any events have triggered. Different event sources
do this in different ways. 

<p>If an event source's check procedure detects an interesting
event, it must add the event to Tcl's event queue. To do this, the
event source calls <b>Tcl_QueueEvent</b>. The <i>evPtr</i> argument
is a pointer to a dynamically allocated structure containing the
event (see below for more information on memory management issues).
Each event source can define its own event structure with whatever
information is relevant to that event source. However, the first
element of the structure must be a structure of type
<b>Tcl_Event</b>, and the address of this structure is used when
communicating between the event source and the rest of the
notifier. A <b>Tcl_Event</b> has the following definition:</p>

<pre>
typedef struct {
    Tcl_EventProc *<i>proc</i>;
    struct Tcl_Event *<i>nextPtr</i>;
} Tcl_Event;
</pre>

The event source must fill in the <i>proc</i> field of the event
before calling <b>Tcl_QueueEvent</b>. The <i>nextPtr</i> is used to
link together the events in the queue and should not be modified by
the event source. 

<p>An event may be added to the queue at any of three positions,
depending on the <i>position</i> argument to
<b>Tcl_QueueEvent</b>:</p>

<dl class="creating a new event source">
<dt><a name="M8"><b>TCL_QUEUE_TAIL</b></a></dt>

<dd>Add the event at the back of the queue, so that all other
pending events will be serviced first. This is almost always the
right place for new events.</dd>

<dt><a name="M9"><b>TCL_QUEUE_HEAD</b></a></dt>

<dd>Add the event at the front of the queue, so that it will be
serviced before all other queued events.</dd>

<dt><a name="M10"><b>TCL_QUEUE_MARK</b></a></dt>

<dd>Add the event at the front of the queue, unless there are other
events at the front whose position is <b>TCL_QUEUE_MARK</b>; if so,
add the new event just after all other <b>TCL_QUEUE_MARK</b>
events. This value of <i>position</i> is used to insert an ordered
sequence of events at the front of the queue, such as a series of
Enter and Leave events synthesized during a grab or ungrab
operation in Tk.</dd>
</dl>

<p>When it is time to handle an event from the queue (steps 1 and 4
above) <b>Tcl_ServiceEvent</b> will invoke the <i>proc</i>
specified in the first queued <b>Tcl_Event</b> structure.
<i>Proc</i> must match the following prototype:</p>

<pre>
typedef int Tcl_EventProc(
        Tcl_Event *<i>evPtr</i>,
        int <i>flags</i>);
</pre>

The first argument to <i>proc</i> is a pointer to the event, which
will be the same as the first argument to the <b>Tcl_QueueEvent</b>
call that added the event to the queue. The second argument to
<i>proc</i> is the <i>flags</i> argument for the current call to
<b>Tcl_ServiceEvent</b>; this is used by the event source to return
immediately if its events are not relevant. 

<p>It is up to <i>proc</i> to handle the event, typically by
invoking one or more Tcl commands or C-level callbacks. Once the
event source has finished handling the event it returns 1 to
indicate that the event can be removed from the queue. If for some
reason the event source decides that the event cannot be handled at
this time, it may return 0 to indicate that the event should be
deferred for processing later; in this case <b>Tcl_ServiceEvent</b>
will go on to the next event in the queue and attempt to service
it. There are several reasons why an event source might defer an
event. One possibility is that events of this type are excluded by
the <i>flags</i> argument. For example, the file event source will
always return 0 if the <b>TCL_FILE_EVENTS</b> bit is not set in
<i>flags</i>. Another example of deferring events happens in Tk if
<b><a href="../TkLib/RestrictEv.htm">Tk_RestrictEvents</a></b> has
been invoked to defer certain kinds of window events.</p>

<p>When <i>proc</i> returns 1, <b>Tcl_ServiceEvent</b> will remove
the event from the event queue and free its storage. Note that the
storage for an event must be allocated by the event source (using
<b><a href="../TclLib/Alloc.htm">Tcl_Alloc</a></b> or the Tcl macro
<b><a href="../TclLib/Alloc.htm">ckalloc</a></b>) before calling
<b>Tcl_QueueEvent</b>, but it will be freed by
<b>Tcl_ServiceEvent</b>, not by the event source.</p>

<p>Threaded applications work in a similar manner, except that
there is a separate event queue for each thread containing a Tcl
interpreter. Calling <b>Tcl_QueueEvent</b> in a multithreaded
application adds an event to the current thread's queue. To add an
event to another thread's queue, use <b>Tcl_ThreadQueueEvent</b>.
<b>Tcl_ThreadQueueEvent</b> accepts as an argument a Tcl_ThreadId
argument, which uniquely identifies a thread in a Tcl application.
To obtain the Tcl_ThreadID for the current thread, use the
<b>Tcl_GetCurrentThread</b> procedure. (A thread would then need to
pass this identifier to other threads for those threads to be able
to add events to its queue.) After adding an event to another
thread's queue, you then typically need to call
<b>Tcl_ThreadAlert</b> to &ldquo;wake up&rdquo; that thread's
notifier to alert it to the new event.</p>

<p><b>Tcl_DeleteEvents</b> can be used to explicitly remove one or
more events from the event queue. <b>Tcl_DeleteEvents</b> calls
<i>proc</i> for each event in the queue, deleting those for with
the procedure returns 1. Events for which the procedure returns 0
are left in the queue. <i>Proc</i> should match the following
prototype:</p>

<pre>
typedef int Tcl_EventDeleteProc(
        Tcl_Event *<i>evPtr</i>,
        ClientData <i>clientData</i>);
</pre>

The <i>clientData</i> argument will be the same as the
<i>clientData</i> argument to <b>Tcl_DeleteEvents</b>; it is
typically used to point to private information managed by the event
source. The <i>evPtr</i> will point to the next event in the queue.


<p><b>Tcl_DeleteEventSource</b> deletes an event source. The
<i>setupProc</i>, <i>checkProc</i>, and <i>clientData</i> arguments
must exactly match those provided to the
<b>Tcl_CreateEventSource</b> for the event source to be deleted. If
no such source exists, <b>Tcl_DeleteEventSource</b> has no
effect.</p>

<h3><a name="M11">CREATING A NEW NOTIFIER</a></h3>

The notifier consists of all the procedures described in this
manual entry, plus <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> and <b><a href=
"../TclLib/Sleep.htm">Tcl_Sleep</a></b>, which are available on all
platforms, and <b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b> and <b><a
href="../TclLib/CrtFileHdlr.htm">Tcl_DeleteFileHandler</a></b>,
which are Unix-specific. Most of these procedures are generic, in
that they are the same for all notifiers. However, none of the
procedures are notifier-dependent: <b>Tcl_InitNotifier</b>,
<b>Tcl_AlertNotifier</b>, <b>Tcl_FinalizeNotifier</b>,
<b>Tcl_SetTimer</b>, <b><a href=
"../TclLib/Sleep.htm">Tcl_Sleep</a></b>, <b>Tcl_WaitForEvent</b>,
<b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b>, <b><a
href="../TclLib/CrtFileHdlr.htm">Tcl_DeleteFileHandler</a></b> and
<b>Tcl_ServiceModeHook</b>. To support a new platform or to
integrate Tcl with an application-specific event loop, you must
write new versions of these procedures. 

<p><b>Tcl_InitNotifier</b> initializes the notifier state and
returns a handle to the notifier state. Tcl calls this procedure
when initializing a Tcl interpreter. Similarly,
<b>Tcl_FinalizeNotifier</b> shuts down the notifier, and is called
by <b><a href="../TclLib/Exit.htm">Tcl_Finalize</a></b> when
shutting down a Tcl interpreter.</p>

<p><b>Tcl_WaitForEvent</b> is the lowest-level procedure in the
notifier; it is responsible for waiting for an
&ldquo;interesting&rdquo; event to occur or for a given time to
elapse. Before <b>Tcl_WaitForEvent</b> is invoked, each of the
event sources' setup procedure will have been invoked. The
<i>timePtr</i> argument to <b>Tcl_WaitForEvent</b> gives the
maximum time to block for an event, based on calls to
<b>Tcl_SetMaxBlockTime</b> made by setup procedures and on other
information (such as the <b>TCL_DONT_WAIT</b> bit in
<i>flags</i>).</p>

<p>Ideally, <b>Tcl_WaitForEvent</b> should only wait for an event
to occur; it should not actually process the event in any way.
Later on, the event sources will process the raw events and create
Tcl_Events on the event queue in their <i>checkProc</i> procedures.
However, on some platforms (such as Windows) this is not possible;
events may be processed in <b>Tcl_WaitForEvent</b>, including
queuing Tcl_Events and more (for example, callbacks for native
widgets may be invoked). The return value from
<b>Tcl_WaitForEvent</b> must be either 0, 1, or -1. On platforms
such as Windows where events get processed in
<b>Tcl_WaitForEvent</b>, a return value of 1 means that there may
be more events still pending that have not been processed. This is
a sign to the caller that it must call <b>Tcl_WaitForEvent</b>
again if it wants all pending events to be processed. A 0 return
value means that calling <b>Tcl_WaitForEvent</b> again will not
have any effect: either this is a platform where
<b>Tcl_WaitForEvent</b> only waits without doing any event
processing, or <b>Tcl_WaitForEvent</b> knows for sure that there
are no additional events to process (e.g. it returned because the
time elapsed). Finally, a return value of -1 means that the event
loop is no longer operational and the application should probably
unwind and terminate. Under Windows this happens when a WM_QUIT
message is received; under Unix it happens when
<b>Tcl_WaitForEvent</b> would have waited forever because there
were no active event sources and the timeout was infinite.</p>

<p><b>Tcl_AlertNotifier</b> is used in multithreaded applications
to allow any thread to &ldquo;wake up&rdquo; the notifier to alert
it to new events on its queue. <b>Tcl_AlertNotifier</b> requires as
an argument the notifier handle returned by
<b>Tcl_InitNotifier</b>.</p>

<p>If the notifier will be used with an external event loop, then
it must also support the <b>Tcl_SetTimer</b> interface.
<b>Tcl_SetTimer</b> is invoked by <b>Tcl_SetMaxBlockTime</b>
whenever the maximum blocking time has been reduced.
<b>Tcl_SetTimer</b> should arrange for the external event loop to
invoke <b>Tcl_ServiceAll</b> after the specified interval even if
no events have occurred. This interface is needed because
<b>Tcl_WaitForEvent</b> is not invoked when there is an external
event loop. If the notifier will only be used from <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>, then
<b>Tcl_SetTimer</b> need not do anything.</p>

<p><b>Tcl_ServiceModeHook</b> is called by the platform-independent
portion of the notifier when client code makes a call to
<b>Tcl_SetServiceMode</b>. This hook is provided to support
operating systems that require special event handling when the
application is in a modal loop (the Windows notifier, for instance,
uses this hook to create a communication window).</p>

<p>On Unix systems, the file event source also needs support from
the notifier. The file event source consists of the <b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b> and <b><a
href="../TclLib/CrtFileHdlr.htm">Tcl_DeleteFileHandler</a></b>
procedures, which are described in the <b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b> manual
page.</p>

<p>The <b><a href="../TclLib/Sleep.htm">Tcl_Sleep</a></b> and <b><a
href="../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> interfaces
are described in their respective manual pages.</p>

<p>The easiest way to create a new notifier is to look at the code
for an existing notifier, such as the files
<b>unix/tclUnixNotfy.c</b> or <b>win/tclWinNotify.c</b> in the Tcl
source distribution.</p>

<h3><a name="M12">REPLACING THE NOTIFIER</a></h3>

A notifier that has been written according to the conventions above
can also be installed in a running process in place of the standard
notifier. This mechanism is used so that a single executable can be
used (with the standard notifier) as a stand-alone program and
reused (with a replacement notifier in a loadable extension) as an
extension to another program, such as a Web browser plugin. 

<p>To do this, the extension makes a call to <b>Tcl_SetNotifier</b>
passing a pointer to a <b>Tcl_NotifierProcs</b> data structure. The
structure has the following layout:</p>

<pre>
typedef struct Tcl_NotifierProcs {
    Tcl_SetTimerProc *setTimerProc;
    Tcl_WaitForEventProc *waitForEventProc;
    Tcl_CreateFileHandlerProc *createFileHandlerProc;
    Tcl_DeleteFileHandlerProc *deleteFileHandlerProc;
    Tcl_InitNotifierProc *initNotifierProc;
    Tcl_FinalizeNotifierProc *finalizeNotifierProc;
    Tcl_AlertNotifierProc *alertNotifierProc;
    Tcl_ServiceModeHookProc *serviceModeHookProc;
} Tcl_NotifierProcs;
</pre>

Following the call to <b>Tcl_SetNotifier</b>, the pointers given in
the <b>Tcl_NotifierProcs</b> structure replace whatever notifier
had been installed in the process. 

<p>It is extraordinarily unwise to replace a running notifier.
Normally, <b>Tcl_SetNotifier</b> should be called at process
initialization time before the first call to
<b>Tcl_InitNotifier</b>.</p>

<h3><a name="M13">EXTERNAL EVENT LOOPS</a></h3>

The notifier interfaces are designed so that Tcl can be embedded
into applications that have their own private event loops. In this
case, the application does not call <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> except in the
case of recursive event loops such as calls to the Tcl commands
<b><a href="../TclCmd/update.htm">update</a></b> or <b><a href=
"../TclCmd/vwait.htm">vwait</a></b>. Most of the time is spent in
the external event loop of the application. In this case the
notifier must arrange for the external event loop to call back into
Tcl when something happens on the various Tcl event sources. These
callbacks should arrange for appropriate Tcl events to be placed on
the Tcl event queue. 

<p>Because the external event loop is not calling <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> on a regular
basis, it is up to the notifier to arrange for
<b>Tcl_ServiceEvent</b> to be called whenever events are pending on
the Tcl event queue. The easiest way to do this is to invoke
<b>Tcl_ServiceAll</b> at the end of each callback from the external
event loop. This will ensure that all of the event sources are
polled, any queued events are serviced, and any pending idle
handlers are processed before returning control to the application.
In addition, event sources that need to poll for events can call
<b>Tcl_SetMaxBlockTime</b> to force the external event loop to call
Tcl even if no events are available on the system event queue.</p>

<p>As a side effect of processing events detected in the main
external event loop, Tcl may invoke <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> to start a
recursive event loop in commands like <b><a href=
"../TclCmd/vwait.htm">vwait</a></b>. <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> will invoke the
external event loop, which will result in callbacks as described in
the preceding paragraph, which will result in calls to
<b>Tcl_ServiceAll</b>. However, in these cases it is undesirable to
service events in <b>Tcl_ServiceAll</b>. Servicing events there is
unnecessary because control will immediately return to the external
event loop and hence to <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>, which can
service the events itself. Furthermore, <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> is supposed to
service only a single event, whereas <b>Tcl_ServiceAll</b> normally
services all pending events. To handle this situation, <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> sets a flag for
<b>Tcl_ServiceAll</b> that causes it to return without servicing
any events. This flag is called the <i>service mode</i>; <b><a
href="../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> restores it
to its previous value before it returns.</p>

<p>In some cases, however, it may be necessary for
<b>Tcl_ServiceAll</b> to service events even when it has been
invoked from <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>. This happens
when there is yet another recursive event loop invoked via an event
handler called by <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> (such as one that
is part of a native widget). In this case, <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> may not have a
chance to service events so <b>Tcl_ServiceAll</b> must service them
all. Any recursive event loop that calls an external event loop
rather than <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b> must reset the
service mode so that all events get processed in
<b>Tcl_ServiceAll</b>. This is done by invoking the
<b>Tcl_SetServiceMode</b> procedure. If <b>Tcl_SetServiceMode</b>
is passed <b>TCL_SERVICE_NONE</b>, then calls to
<b>Tcl_ServiceAll</b> will return immediately without processing
any events. If <b>Tcl_SetServiceMode</b> is passed
<b>TCL_SERVICE_ALL</b>, then calls to <b>Tcl_ServiceAll</b> will
behave normally. <b>Tcl_SetServiceMode</b> returns the previous
value of the service mode, which should be restored when the
recursive loop exits. <b>Tcl_GetServiceMode</b> returns the current
value of the service mode.</p>

<h3><a name="M14">SEE ALSO</a></h3>

<b><a href=
"../TclLib/CrtFileHdlr.htm">Tcl_CreateFileHandler</a></b>, <b><a
href="../TclLib/CrtFileHdlr.htm">Tcl_DeleteFileHandler</a></b>,
<b><a href="../TclLib/Sleep.htm">Tcl_Sleep</a></b>, <b><a href=
"../TclLib/DoOneEvent.htm">Tcl_DoOneEvent</a></b>, <b>Thread</b> 

<h3><a name="M15">KEYWORDS</a></h3>

<a href="../Keywords/E.htm#event">event</a>, <a href=
"../Keywords/N.htm#notifier">notifier</a>, <a href=
"../Keywords/E.htm#event queue">event queue</a>, <a href=
"../Keywords/E.htm#event sources">event sources</a>, <a href=
"../Keywords/F.htm#file events">file events</a>, <a href=
"../Keywords/T.htm#timer">timer</a>, <a href=
"../Keywords/I.htm#idle">idle</a>, <a href=
"../Keywords/S.htm#service mode">service mode</a>, <a href=
"../Keywords/T.htm#threads">threads</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1998-1999 Scriptics Corporation Copyright &copy;
1995-1997 Sun Microsystems, Inc.</div>
</body>
</html>

