<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Tcl Built-In Commands - Safe manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> safe</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="safe.htm#M2" name="L1436">NAME</a> 

<dl>
<dd>Safe&nbsp;Base - A mechanism for creating and manipulating safe
interpreters</dd>
</dl>
</dd>

<dd><a href="safe.htm#M3" name="L1437">SYNOPSIS</a> 

<dl>
<dd><b>::safe::interpCreate</b> ?<i>slave</i>?
?<i>options...</i>?</dd>

<dd><b>::safe::interpInit</b> <i>slave</i> ?<i>options...</i>?</dd>

<dd><b>::safe::interpConfigure</b> <i>slave</i>
?<i>options...</i>?</dd>

<dd><b>::safe::interpDelete</b> <i>slave</i></dd>

<dd><b>::safe::interpAddToAccessPath</b> <i>slave</i>
<i>directory</i></dd>

<dd><b>::safe::interpFindInAccessPath</b> <i>slave</i>
<i>directory</i></dd>

<dd><b>::safe::setLogCmd</b> ?<i>cmd arg...</i>?</dd>
</dl>
</dd>

<dd><a href="safe.htm#M4" name="L1438">OPTIONS</a></dd>

<dd><a href="safe.htm#M5" name="L1439">DESCRIPTION</a></dd>

<dd><a href="safe.htm#M6" name="L1440">COMMANDS</a> 

<dl class="commands">
<dd><a href="safe.htm#M7" name="L1441"><b>::safe::interpCreate</b>
?<i>slave</i>? ?<i>options...</i>?</a></dd>

<dd><a href="safe.htm#M8" name="L1442"><b>::safe::interpInit</b>
<i>slave</i> ?<i>options...</i>?</a></dd>

<dd><a href="safe.htm#M9" name=
"L1443"><b>::safe::interpConfigure</b> <i>slave</i>
?<i>options...</i>?</a></dd>

<dd><a href="safe.htm#M10" name="L1444"><b>::safe::interpDelete</b>
<i>slave</i></a></dd>

<dd><a href="safe.htm#M11" name=
"L1445"><b>::safe::interpFindInAccessPath</b> <i>slave</i>
<i>directory</i></a></dd>

<dd><a href="safe.htm#M12" name=
"L1446"><b>::safe::interpAddToAccessPath</b> <i>slave</i>
<i>directory</i></a></dd>

<dd><a href="safe.htm#M13" name="L1447"><b>::safe::setLogCmd</b>
?<i>cmd arg...</i>?</a></dd>
</dl>
</dd>

<dd><a href="safe.htm#M14" name="L1448">OPTIONS</a> 

<dl class="options">
<dd><a href="safe.htm#M15" name="L1449"><b>-accessPath</b>
<i>directoryList</i></a></dd>

<dd><a href="safe.htm#M16" name="L1450"><b>-statics</b>
<i>boolean</i></a></dd>

<dd><a href="safe.htm#M17" name="L1451"><b>-noStatics</b></a></dd>

<dd><a href="safe.htm#M18" name="L1452"><b>-nested</b>
<i>boolean</i></a></dd>

<dd><a href="safe.htm#M19" name=
"L1453"><b>-nestedLoadOk</b></a></dd>

<dd><a href="safe.htm#M20" name="L1454"><b>-deleteHook</b>
<i>script</i></a></dd>
</dl>
</dd>

<dd><a href="safe.htm#M21" name="L1455">ALIASES</a> 

<dl class="aliases">
<dd><a href="safe.htm#M22" name="L1456"><b>source</b>
<i>fileName</i></a></dd>

<dd><a href="safe.htm#M23" name="L1457"><b>load</b>
<i>fileName</i></a></dd>

<dd><a href="safe.htm#M24" name="L1458"><b>file</b> ?<i>subCmd
args...</i>?</a></dd>

<dd><a href="safe.htm#M25" name="L1459"><b>encoding</b> ?<i>subCmd
args...</i>?</a></dd>

<dd><a href="safe.htm#M26" name="L1460"><b>exit</b></a></dd>
</dl>
</dd>

<dd><a href="safe.htm#M27" name="L1461">SECURITY</a></dd>

<dd><a href="safe.htm#M28" name="L1462">SEE ALSO</a></dd>

<dd><a href="safe.htm#M29" name="L1463">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Safe&nbsp;Base - A mechanism for creating and manipulating safe
interpreters 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>::safe::interpCreate</b> ?<i>slave</i>? ?<i>options...</i>?<br>
<b>::safe::interpInit</b> <i>slave</i> ?<i>options...</i>?<br>
<b>::safe::interpConfigure</b> <i>slave</i> ?<i>options...</i>?<br>
<b>::safe::interpDelete</b> <i>slave</i><br>
<b>::safe::interpAddToAccessPath</b> <i>slave</i>
<i>directory</i><br>
<b>::safe::interpFindInAccessPath</b> <i>slave</i>
<i>directory</i><br>
<b>::safe::setLogCmd</b> ?<i>cmd arg...</i>?<br>
<h4><a name="M4">OPTIONS</a></h4>

?<b>-accessPath</b> <i>pathList</i>? ?<b>-statics</b>
<i>boolean</i>? ?<b>-noStatics</b>? ?<b>-nested</b> <i>boolean</i>?
?<b>-nestedLoadOk</b>? ?<b>-deleteHook</b> <i>script</i>? 

<h3><a name="M5">DESCRIPTION</a></h3>

Safe Tcl is a mechanism for executing untrusted Tcl scripts safely
and for providing mediated access by such scripts to potentially
dangerous functionality. 

<p>The Safe Base ensures that untrusted Tcl scripts cannot harm the
hosting application. The Safe Base prevents integrity and privacy
attacks. Untrusted Tcl scripts are prevented from corrupting the
state of the hosting application or computer. Untrusted scripts are
also prevented from disclosing information stored on the hosting
computer or in the hosting application to any party.</p>

<p>The Safe Base allows a master interpreter to create safe,
restricted interpreters that contain a set of predefined aliases
for the <b><a href="../TclCmd/source.htm">source</a></b>, <b><a
href="../TclCmd/load.htm">load</a></b>, <b><a href=
"../TclCmd/file.htm">file</a></b>, <b><a href=
"../TclCmd/encoding.htm">encoding</a></b>, and <b><a href=
"../TclCmd/exit.htm">exit</a></b> commands and are able to use the
auto-loading and package mechanisms.</p>

<p>No knowledge of the file system structure is leaked to the safe
interpreter, because it has access only to a virtualized path
containing tokens. When the safe interpreter requests to source a
file, it uses the token in the virtual path as part of the file
name to source; the master interpreter transparently translates the
token into a real directory name and executes the requested
operation (see the section <b>SECURITY</b> below for details).
Different levels of security can be selected by using the optional
flags of the commands described below.</p>

<p>All commands provided in the master interpreter by the Safe Base
reside in the <b>safe</b> namespace.</p>

<h3><a name="M6">COMMANDS</a></h3>

The following commands are provided in the master interpreter: 

<dl class="commands">
<dt><a name="M7"><b>::safe::interpCreate</b> ?<i>slave</i>?
?<i>options...</i>?</a></dt>

<dd>Creates a safe interpreter, installs the aliases described in
the section <b>ALIASES</b> and initializes the auto-loading and
package mechanism as specified by the supplied <i>options</i>. See
the <b><a href="../TkCmd/options.htm">OPTIONS</a></b> section below
for a description of the optional arguments. If the <i>slave</i>
argument is omitted, a name will be generated.
<b>::safe::interpCreate</b> always returns the interpreter
name.</dd>

<dt><a name="M8"><b>::safe::interpInit</b> <i>slave</i>
?<i>options...</i>?</a></dt>

<dd>This command is similar to <b>interpCreate</b> except it that
does not create the safe interpreter. <i>slave</i> must have been
created by some other means, like <b>interp create -safe</b>.</dd>

<dt><a name="M9"><b>::safe::interpConfigure</b> <i>slave</i>
?<i>options...</i>?</a></dt>

<dd>If no <i>options</i> are given, returns the settings for all
options for the named safe interpreter as a list of options and
their current values for that <i>slave</i>. If a single additional
argument is provided, it will return a list of 2 elements
<i>name</i> and <i>value</i> where <i>name</i> is the full name of
that option and <i>value</i> the current value for that option and
the <i>slave</i>. If more than two additional arguments are
provided, it will reconfigure the safe interpreter and change each
and only the provided options. See the section on <b><a href=
"../TkCmd/options.htm">OPTIONS</a></b> below for options
description. Example of use: 

<pre>
# Create new interp with the same configuration as "$i0":
set i1 [safe::interpCreate {*}[safe::interpConfigure $i0]]

# Get the current deleteHook
set dh [safe::interpConfigure $i0  -del]

# Change (only) the statics loading ok attribute of an
# interp and its deleteHook (leaving the rest unchanged):
safe::interpConfigure $i0  -delete {foo bar} -statics 0
</pre>
</dd>

<dt><a name="M10"><b>::safe::interpDelete</b> <i>slave</i></a></dt>

<dd>Deletes the safe interpreter and cleans up the corresponding
master interpreter data structures. If a <i>deleteHook</i> script
was specified for this interpreter it is evaluated before the
interpreter is deleted, with the name of the interpreter as an
additional argument.</dd>

<dt><a name="M11"><b>::safe::interpFindInAccessPath</b>
<i>slave</i> <i>directory</i></a></dt>

<dd>This command finds and returns the token for the real directory
<i>directory</i> in the safe interpreter's current virtual access
path. It generates an error if the directory is not found. Example
of use: 

<pre>
$slave eval [list set tk_library \
      [::safe::interpFindInAccessPath $name $tk_library]]
</pre>
</dd>

<dt><a name="M12"><b>::safe::interpAddToAccessPath</b> <i>slave</i>
<i>directory</i></a></dt>

<dd>This command adds <i>directory</i> to the virtual path
maintained for the safe interpreter in the master, and returns the
token that can be used in the safe interpreter to obtain access to
files in that directory. If the directory is already in the virtual
path, it only returns the token without adding the directory to the
virtual path again. Example of use: 

<pre>
$slave eval [list set tk_library \
      [::safe::interpAddToAccessPath $name $tk_library]]
</pre>
</dd>

<dt><a name="M13"><b>::safe::setLogCmd</b> ?<i>cmd
arg...</i>?</a></dt>

<dd>This command installs a script that will be called when
interesting life cycle events occur for a safe interpreter. When
called with no arguments, it returns the currently installed
script. When called with one argument, an empty string, the
currently installed script is removed and logging is turned off.
The script will be invoked with one additional argument, a string
describing the event of interest. The main purpose is to help in
debugging safe interpreters. Using this facility you can get
complete error messages while the safe interpreter gets only
generic error messages. This prevents a safe interpreter from
seeing messages about failures and other events that might contain
sensitive information such as real directory names. 

<p>Example of use:</p>

<pre>
::safe::setLogCmd puts stderr
</pre>

<p>Below is the output of a sample session in which a safe
interpreter attempted to source a file not found in its virtual
access path. Note that the safe interpreter only received an error
message saying that the file was not found:</p>

<pre>
NOTICE for slave interp10 : Created
NOTICE for slave interp10 : Setting accessPath=(/foo/bar) staticsok=1 nestedok=0 deletehook=()
NOTICE for slave interp10 : auto_path in interp10 has been set to {$p(:0:)}
ERROR for slave interp10 : /foo/bar/init.tcl: no such file or directory
</pre>
</dd>
</dl>

<h4><a name="M14">OPTIONS</a></h4>

The following options are common to <b>::safe::interpCreate</b>,
<b>::safe::interpInit</b>, and <b>::safe::interpConfigure</b>. Any
option name can be abbreviated to its minimal non-ambiguous name.
Option names are not case sensitive. 

<dl class="options">
<dt><a name="M15"><b>-accessPath</b> <i>directoryList</i></a></dt>

<dd>This option sets the list of directories from which the safe
interpreter can <b><a href="../TclCmd/source.htm">source</a></b>
and <b><a href="../TclCmd/load.htm">load</a></b> files. If this
option is not specified, or if it is given as the empty list, the
safe interpreter will use the same directories as its master for
auto-loading. See the section <b>SECURITY</b> below for more detail
about virtual paths, tokens and access control.</dd>

<dt><a name="M16"><b>-statics</b> <i>boolean</i></a></dt>

<dd>This option specifies if the safe interpreter will be allowed
to load statically linked packages (like <b>load {} Tk</b>). The
default value is <b>true</b> : safe interpreters are allowed to
load statically linked packages.</dd>

<dt><a name="M17"><b>-noStatics</b></a></dt>

<dd>This option is a convenience shortcut for <b>-statics false</b>
and thus specifies that the safe interpreter will not be allowed to
load statically linked packages.</dd>

<dt><a name="M18"><b>-nested</b> <i>boolean</i></a></dt>

<dd>This option specifies if the safe interpreter will be allowed
to load packages into its own sub-interpreters. The default value
is <b>false</b> : safe interpreters are not allowed to load
packages into their own sub-interpreters.</dd>

<dt><a name="M19"><b>-nestedLoadOk</b></a></dt>

<dd>This option is a convenience shortcut for <b>-nested true</b>
and thus specifies the safe interpreter will be allowed to load
packages into its own sub-interpreters.</dd>

<dt><a name="M20"><b>-deleteHook</b> <i>script</i></a></dt>

<dd>When this option is given a non-empty <i>script</i>, it will be
evaluated in the master with the name of the safe interpreter as an
additional argument just before actually deleting the safe
interpreter. Giving an empty value removes any currently installed
deletion hook script for that safe interpreter. The default value
(<b>{}</b>) is not to have any deletion call back.</dd>
</dl>

<h3><a name="M21">ALIASES</a></h3>

The following aliases are provided in a safe interpreter: 

<dl class="aliases">
<dt><a name="M22"><b>source</b> <i>fileName</i></a></dt>

<dd>The requested file, a Tcl source file, is sourced into the safe
interpreter if it is found. The <b><a href=
"../TclCmd/source.htm">source</a></b> alias can only source files
from directories in the virtual path for the safe interpreter. The
<b><a href="../TclCmd/source.htm">source</a></b> alias requires the
safe interpreter to use one of the token names in its virtual path
to denote the directory in which the file to be sourced can be
found. See the section on <b>SECURITY</b> for more discussion of
restrictions on valid filenames.</dd>

<dt><a name="M23"><b>load</b> <i>fileName</i></a></dt>

<dd>The requested file, a shared object file, is dynamically loaded
into the safe interpreter if it is found. The filename must contain
a token name mentioned in the virtual path for the safe interpreter
for it to be found successfully. Additionally, the shared object
file must contain a safe entry point; see the manual page for the
<b><a href="../TclCmd/load.htm">load</a></b> command for more
details.</dd>

<dt><a name="M24"><b>file</b> ?<i>subCmd args...</i>?</a></dt>

<dd>The <b><a href="../TclCmd/file.htm">file</a></b> alias provides
access to a safe subset of the subcommands of the <b><a href=
"../TclCmd/file.htm">file</a></b> command; it allows only
<b>dirname</b>, <b><a href="../TclCmd/join.htm">join</a></b>,
<b>extension</b>, <b>root</b>, <b>tail</b>, <b>pathname</b> and
<b><a href="../TclCmd/split.htm">split</a></b> subcommands. For
more details on what these subcommands do see the manual page for
the <b><a href="../TclCmd/file.htm">file</a></b> command.</dd>

<dt><a name="M25"><b>encoding</b> ?<i>subCmd args...</i>?</a></dt>

<dd>The <b><a href="../TclCmd/encoding.htm">encoding</a></b> alias
provides access to a safe subset of the subcommands of the <b><a
href="../TclCmd/encoding.htm">encoding</a></b> command; it
disallows setting of the system encoding, but allows all other
subcommands including <b>system</b> to check the current
encoding.</dd>

<dt><a name="M26"><b>exit</b></a></dt>

<dd>The calling interpreter is deleted and its computation is
stopped, but the Tcl process in which this interpreter exists is
not terminated.</dd>
</dl>

<h3><a name="M27">SECURITY</a></h3>

The Safe Base does not attempt to completely prevent annoyance and
denial of service attacks. These forms of attack prevent the
application or user from temporarily using the computer to perform
useful work, for example by consuming all available CPU time or all
available screen real estate. These attacks, while aggravating, are
deemed to be of lesser importance in general than integrity and
privacy attacks that the Safe Base is to prevent. 

<p>The commands available in a safe interpreter, in addition to the
safe set as defined in <b><a href=
"../TclCmd/interp.htm">interp</a></b> manual page, are mediated
aliases for <b><a href="../TclCmd/source.htm">source</a></b>, <b><a
href="../TclCmd/load.htm">load</a></b>, <b><a href=
"../TclCmd/exit.htm">exit</a></b>, and safe subsets of <b><a href=
"../TclCmd/file.htm">file</a></b> and <b><a href=
"../TclCmd/encoding.htm">encoding</a></b>. The safe interpreter can
also auto-load code and it can request that packages be loaded.</p>

<p>Because some of these commands access the local file system,
there is a potential for information leakage about its directory
structure. To prevent this, commands that take file names as
arguments in a safe interpreter use tokens instead of the real
directory names. These tokens are translated to the real directory
name while a request to, e.g., source a file is mediated by the
master interpreter. This virtual path system is maintained in the
master interpreter for each safe interpreter created by
<b>::safe::interpCreate</b> or initialized by
<b>::safe::interpInit</b> and the path maps tokens accessible in
the safe interpreter into real path names on the local file system
thus preventing safe interpreters from gaining knowledge about the
structure of the file system of the host on which the interpreter
is executing. The only valid file names arguments for the <b><a
href="../TclCmd/source.htm">source</a></b> and <b><a href=
"../TclCmd/load.htm">load</a></b> aliases provided to the slave are
path in the form of <b>[file join</b> <i>token filename</i><b>]</b>
(i.e. when using the native file path formats:
<i>token</i><b>/</b><i>filename</i> on Unix and
<i>token</i><b>\</b><i>filename</i> on Windows), where <i>token</i>
is representing one of the directories of the <i>accessPath</i>
list and <i>filename</i> is one file in that directory (no sub
directories access are allowed).</p>

<p>When a token is used in a safe interpreter in a request to
source or load a file, the token is checked and translated to a
real path name and the file to be sourced or loaded is located on
the file system. The safe interpreter never gains knowledge of the
actual path name under which the file is stored on the file
system.</p>

<p>To further prevent potential information leakage from sensitive
files that are accidentally included in the set of files that can
be sourced by a safe interpreter, the <b><a href=
"../TclCmd/source.htm">source</a></b> alias restricts access to
files meeting the following constraints: the file name must
fourteen characters or shorter, must not contain more than one dot
(&ldquo;<b>.</b>&rdquo;), must end up with the extension
(&ldquo;<b>.tcl</b>&rdquo;) or be called
(&ldquo;<b>tclIndex</b>&rdquo;.)</p>

<p>Each element of the initial access path list will be assigned a
token that will be set in the slave <b>auto_path</b> and the first
element of that list will be set as the <b>tcl_library</b> for that
slave.</p>

<p>If the access path argument is not given or is the empty list,
the default behavior is to let the slave access the same packages
as the master has access to (Or to be more precise: only packages
written in Tcl (which by definition cannot be dangerous as they run
in the slave interpreter) and C extensions that provides a
_SafeInit entry point). For that purpose, the master's
<b>auto_path</b> will be used to construct the slave access path.
In order that the slave successfully loads the Tcl library files
(which includes the auto-loading mechanism itself) the
<b>tcl_library</b> will be added or moved to the first position if
necessary, in the slave access path, so the slave
<b>tcl_library</b> will be the same as the master's (its real path
will still be invisible to the slave though). In order that
auto-loading works the same for the slave and the master in this by
default case, the first-level sub directories of each directory in
the master <b>auto_path</b> will also be added (if not already
included) to the slave access path. You can always specify a more
restrictive path for which sub directories will never be searched
by explicitly specifying your directory list with the
<b>-accessPath</b> flag instead of relying on this default
mechanism.</p>

<p>When the <i>accessPath</i> is changed after the first creation
or initialization (i.e. through <b>interpConfigure -accessPath</b>
<i>list</i>), an <b><a href=
"../TclCmd/library.htm">auto_reset</a></b> is automatically
evaluated in the safe interpreter to synchronize its
<b>auto_index</b> with the new token list.</p>

<h3><a name="M28">SEE ALSO</a></h3>

<b><a href="../TclCmd/interp.htm">interp</a></b>, <b>library</b>,
<b><a href="../TclCmd/load.htm">load</a></b>, <b><a href=
"../TclCmd/package.htm">package</a></b>, <b><a href=
"../TclCmd/source.htm">source</a></b>, <b><a href=
"../TclCmd/unknown.htm">unknown</a></b> 

<h3><a name="M29">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#alias">alias</a>, <a href=
"../Keywords/A.htm#auto-loading">auto-loading</a>, <a href=
"../Keywords/A.htm#auto_mkindex">auto_mkindex</a>, <a href=
"../Keywords/L.htm#load">load</a>, <a href=
"../Keywords/M.htm#master interpreter">master interpreter</a>, <a
href="../Keywords/S.htm#safe interpreter">safe interpreter</a>, <a
href="../Keywords/S.htm#slave interpreter">slave interpreter</a>,
<a href="../Keywords/S.htm#source">source</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1995-1996 Sun Microsystems, Inc.</div>
</body>
</html>

