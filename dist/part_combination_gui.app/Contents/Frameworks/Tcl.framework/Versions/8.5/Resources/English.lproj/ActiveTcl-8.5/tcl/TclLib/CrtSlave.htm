<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_CreateSlave manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> CrtSlave</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_IsSafe, Tcl_MakeSafe, Tcl_CreateSlave, Tcl_GetSlave,
Tcl_GetMaster, Tcl_GetInterpPath, Tcl_CreateAlias,
Tcl_CreateAliasObj, Tcl_GetAlias, Tcl_GetAliasObj,
Tcl_ExposeCommand, Tcl_HideCommand - manage multiple Tcl
interpreters, aliases and hidden commands 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
int<br>
<b>Tcl_IsSafe</b>(<i>interp</i>)<br>
int<br>
<b>Tcl_MakeSafe</b>(<i>interp</i>)<br>
<a href="../TclLib/Interp.htm">Tcl_Interp</a> *<br>
<b>Tcl_CreateSlave</b>(<i>interp, slaveName, isSafe</i>)<br>
<a href="../TclLib/Interp.htm">Tcl_Interp</a> *<br>
<b>Tcl_GetSlave</b>(<i>interp, slaveName</i>)<br>
<a href="../TclLib/Interp.htm">Tcl_Interp</a> *<br>
<b>Tcl_GetMaster</b>(<i>interp</i>)<br>
int<br>
<b>Tcl_GetInterpPath</b>(<i>askingInterp, slaveInterp</i>)<br>
int<br>
<b>Tcl_CreateAlias</b>(<i>slaveInterp, slaveCmd, targetInterp,
targetCmd,<br>
 argc, argv</i>)<br>
int<br>
<b>Tcl_CreateAliasObj</b>(<i>slaveInterp, slaveCmd, targetInterp,
targetCmd,<br>
 objc, objv</i>)<br>
int<br>
<b>Tcl_GetAlias</b>(<i>interp, slaveCmd, targetInterpPtr,
targetCmdPtr,<br>
 argcPtr, argvPtr</i>)<br>
int<br>
<b>Tcl_GetAliasObj</b>(<i>interp, slaveCmd, targetInterpPtr,
targetCmdPtr,<br>
 objcPtr, objvPtr</i>)<br>
int<br>
<b>Tcl_ExposeCommand</b>(<i>interp, hiddenCmdName, cmdName</i>)<br>
int<br>
<b>Tcl_HideCommand</b>(<i>interp, cmdName, hiddenCmdName</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which to execute the specified command.</dd>

<dt>const char <b>*slaveName</b> (in)</dt>

<dd>Name of slave interpreter to create or manipulate.</dd>

<dt>int <b>isSafe</b> (in)</dt>

<dd>If non-zero, a &ldquo;safe&rdquo; slave that is suitable for
running untrusted code is created, otherwise a trusted slave is
created.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a>
<b>*slaveInterp</b> (in)</dt>

<dd>Interpreter to use for creating the source command for an alias
(see below).</dd>

<dt>const char <b>*slaveCmd</b> (in)</dt>

<dd>Name of source command for alias.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a>
<b>*targetInterp</b> (in)</dt>

<dd>Interpreter that contains the target command for an alias.</dd>

<dt>const char <b>*targetCmd</b> (in)</dt>

<dd>Name of target command for alias in <i>targetInterp</i>.</dd>

<dt>int <b>argc</b> (in)</dt>

<dd>Count of additional arguments to pass to the alias
command.</dd>

<dt>const char *const <b>*argv</b> (in)</dt>

<dd>Vector of strings, the additional arguments to pass to the
alias command. This storage is owned by the caller.</dd>

<dt>int <b>objc</b> (in)</dt>

<dd>Count of additional object arguments to pass to the alias
object command.</dd>

<dt>Tcl_Obj <b>**objv</b> (in)</dt>

<dd>Vector of Tcl_Obj structures, the additional object arguments
to pass to the alias object command. This storage is owned by the
caller.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a>
<b>**targetInterpPtr</b> (in)</dt>

<dd>Pointer to location to store the address of the interpreter
where a target command is defined for an alias.</dd>

<dt>const char <b>**targetCmdPtr</b> (out)</dt>

<dd>Pointer to location to store the address of the name of the
target command for an alias.</dd>

<dt>int <b>*argcPtr</b> (out)</dt>

<dd>Pointer to location to store count of additional arguments to
be passed to the alias. The location is in storage owned by the
caller.</dd>

<dt>const char <b>***argvPtr</b> (out)</dt>

<dd>Pointer to location to store a vector of strings, the
additional arguments to pass to an alias. The location is in
storage owned by the caller, the vector of strings is owned by the
called function.</dd>

<dt>int <b>*objcPtr</b> (out)</dt>

<dd>Pointer to location to store count of additional object
arguments to be passed to the alias. The location is in storage
owned by the caller.</dd>

<dt>Tcl_Obj <b>***objvPtr</b> (out)</dt>

<dd>Pointer to location to store a vector of Tcl_Obj structures,
the additional arguments to pass to an object alias command. The
location is in storage owned by the caller, the vector of Tcl_Obj
structures is owned by the called function.</dd>

<dt>const char <b>*cmdName</b> (in)</dt>

<dd>Name of an exposed command to hide or create.</dd>

<dt>const char <b>*hiddenCmdName</b> (in)</dt>

<dd>Name under which a hidden command is stored and with which it
can be exposed or invoked.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These procedures are intended for access to the multiple
interpreter facility from inside C programs. They enable managing
multiple interpreters in a hierarchical relationship, and the
management of aliases, commands that when invoked in one
interpreter execute a command in another interpreter. The return
value for those procedures that return an <b>int</b> is either
<b>TCL_OK</b> or <b>TCL_ERROR</b>. If <b>TCL_ERROR</b> is returned
then the <b>result</b> field of the interpreter contains an error
message. 

<p><b>Tcl_CreateSlave</b> creates a new interpreter as a slave of
<i>interp</i>. It also creates a slave command named
<i>slaveName</i> in <i>interp</i> which allows <i>interp</i> to
manipulate the new slave. If <i>isSafe</i> is zero, the command
creates a trusted slave in which Tcl code has access to all the Tcl
commands. If it is <b>1</b>, the command creates a
&ldquo;safe&rdquo; slave in which Tcl code has access only to set
of Tcl commands defined as &ldquo;Safe Tcl&rdquo;; see the manual
entry for the Tcl <b><a href="../TclCmd/interp.htm">interp</a></b>
command for details. If the creation of the new slave interpreter
failed, <b>NULL</b> is returned.</p>

<p><b>Tcl_IsSafe</b> returns <b>1</b> if <i>interp</i> is
&ldquo;safe&rdquo; (was created with the
<b>TCL_SAFE_INTERPRETER</b> flag specified), <b>0</b>
otherwise.</p>

<p><b>Tcl_MakeSafe</b> marks <i>interp</i> as &ldquo;safe&rdquo;,
so that future calls to <b>Tcl_IsSafe</b> will return 1. It also
removes all known potentially-unsafe core functionality (both
commands and variables) from <i>interp</i>. However, it cannot know
what parts of an extension or application are safe and does not
make any attempt to remove those parts, so safety is not guaranteed
after calling <b>Tcl_MakeSafe</b>. Callers will want to take care
with their use of <b>Tcl_MakeSafe</b> to avoid false claims of
safety. For many situations, <b>Tcl_CreateSlave</b> may be a better
choice, since it creates interpreters in a known-safe state.</p>

<p><b>Tcl_GetSlave</b> returns a pointer to a slave interpreter of
<i>interp</i>. The slave interpreter is identified by
<i>slaveName</i>. If no such slave interpreter exists, <b>NULL</b>
is returned.</p>

<p><b>Tcl_GetMaster</b> returns a pointer to the master interpreter
of <i>interp</i>. If <i>interp</i> has no master (it is a top-level
interpreter) then <b>NULL</b> is returned.</p>

<p><b>Tcl_GetInterpPath</b> sets the <i>result</i> field in
<i>askingInterp</i> to the relative path between
<i>askingInterp</i> and <i>slaveInterp</i>; <i>slaveInterp</i> must
be a slave of <i>askingInterp</i>. If the computation of the
relative path succeeds, <b>TCL_OK</b> is returned, else
<b>TCL_ERROR</b> is returned and the <i>result</i> field in
<i>askingInterp</i> contains the error message.</p>

<p><b>Tcl_CreateAlias</b> creates an object command named
<i>slaveCmd</i> in <i>slaveInterp</i> that when invoked, will cause
the command <i>targetCmd</i> to be invoked in <i>targetInterp</i>.
The arguments specified by the strings contained in <i>argv</i> are
always prepended to any arguments supplied in the invocation of
<i>slaveCmd</i> and passed to <i>targetCmd</i>. This operation
returns <b>TCL_OK</b> if it succeeds, or <b>TCL_ERROR</b> if it
fails; in that case, an error message is left in the object result
of <i>slaveInterp</i>. Note that there are no restrictions on the
ancestry relationship (as created by <b>Tcl_CreateSlave</b>)
between <i>slaveInterp</i> and <i>targetInterp</i>. Any two
interpreters can be used, without any restrictions on how they are
related.</p>

<p><b>Tcl_CreateAliasObj</b> is similar to <b>Tcl_CreateAlias</b>
except that it takes a vector of objects to pass as additional
arguments instead of a vector of strings.</p>

<p><b>Tcl_GetAlias</b> returns information about an alias
<i>aliasName</i> in <i>interp</i>. Any of the result fields can be
<b>NULL</b>, in which case the corresponding datum is not returned.
If a result field is non-<b>NULL</b>, the address indicated is set
to the corresponding datum. For example, if <i>targetNamePtr</i> is
non-<b>NULL</b> it is set to a pointer to the string containing the
name of the target command.</p>

<p><b>Tcl_GetAliasObj</b> is similar to <b>Tcl_GetAlias</b> except
that it returns a pointer to a vector of Tcl_Obj structures instead
of a vector of strings.</p>

<p><b>Tcl_ExposeCommand</b> moves the command named
<i>hiddenCmdName</i> from the set of hidden commands to the set of
exposed commands, putting it under the name <i>cmdName</i>.
<i>HiddenCmdName</i> must be the name of an existing hidden
command, or the operation will return <b>TCL_ERROR</b> and leave an
error message in the <i>result</i> field in <i>interp</i>. If an
exposed command named <i>cmdName</i> already exists, the operation
returns <b>TCL_ERROR</b> and leaves an error message in the object
result of <i>interp</i>. If the operation succeeds, it returns
<b>TCL_OK</b>. After executing this command, attempts to use
<i>cmdName</i> in a call to <b><a href=
"../TclLib/Eval.htm">Tcl_Eval</a></b> or with the Tcl <b><a href=
"../TclCmd/eval.htm">eval</a></b> command will again succeed.</p>

<p><b>Tcl_HideCommand</b> moves the command named <i>cmdName</i>
from the set of exposed commands to the set of hidden commands,
under the name <i>hiddenCmdName</i>. <i>CmdName</i> must be the
name of an existing exposed command, or the operation will return
<b>TCL_ERROR</b> and leave an error message in the object result of
<i>interp</i>. Currently both <i>cmdName</i> and
<i>hiddenCmdName</i> must not contain namespace qualifiers, or the
operation will return <b>TCL_ERROR</b> and leave an error message
in the object result of <i>interp</i>. The <i>CmdName</i> will be
looked up in the global namespace, and not relative to the current
namespace, even if the current namespace is not the global one. If
a hidden command whose name is <i>hiddenCmdName</i> already exists,
the operation also returns <b>TCL_ERROR</b> and the <i>result</i>
field in <i>interp</i> contains an error message. If the operation
succeeds, it returns <b>TCL_OK</b>. After executing this command,
attempts to use <i>cmdName</i> in a call to <b><a href=
"../TclLib/Eval.htm">Tcl_Eval</a></b> or with the Tcl <b><a href=
"../TclCmd/eval.htm">eval</a></b> command will fail.</p>

<p>For a description of the Tcl interface to multiple interpreters,
see <i>interp(n)</i>.</p>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclCmd/interp.htm">interp</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#alias">alias</a>, <a href=
"../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/E.htm#exposed commands">exposed commands</a>, <a href=
"../Keywords/H.htm#hidden commands">hidden commands</a>, <a href=
"../Keywords/I.htm#interpreter">interpreter</a>, <a href=
"../Keywords/I.htm#invoke">invoke</a>, <a href=
"../Keywords/M.htm#master">master</a>, <a href=
"../Keywords/S.htm#slave">slave</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1995-1996 Sun Microsystems, Inc.</div>
</body>
</html>

