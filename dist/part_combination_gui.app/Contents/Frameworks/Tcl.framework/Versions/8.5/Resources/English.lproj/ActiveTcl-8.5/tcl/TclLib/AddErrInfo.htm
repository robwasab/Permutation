<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_AddErrorInfo manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> AddErrInfo</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_GetReturnOptions, Tcl_SetReturnOptions, Tcl_AddErrorInfo,
Tcl_AppendObjToErrorInfo, Tcl_AddObjErrorInfo, Tcl_SetObjErrorCode,
Tcl_SetErrorCode, Tcl_SetErrorCodeVA, Tcl_PosixError,
Tcl_LogCommandInfo - retrieve or record information about errors
and other return options 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
Tcl_Obj *<br>
<b>Tcl_GetReturnOptions</b>(<i>interp, code</i>)<br>
int <br>
<b>Tcl_SetReturnOptions</b>(<i>interp, options</i>)<br>
<b>Tcl_AddErrorInfo</b>(<i>interp, message</i>)<br>
<b>Tcl_AppendObjToErrorInfo</b>(<i>interp, objPtr</i>)<br>
<b>Tcl_AddObjErrorInfo</b>(<i>interp, message, length</i>)<br>
<b>Tcl_SetObjErrorCode</b>(<i>interp, errorObjPtr</i>)<br>
<b>Tcl_SetErrorCode</b>(<i>interp, element, element, ...</i>
<b>(char *) NULL</b>)<br>
<b>Tcl_SetErrorCodeVA</b>(<i>interp, argList</i>)<br>
const char *<br>
<b>Tcl_PosixError</b>(<i>interp</i>)<br>
void<br>
<b>Tcl_LogCommandInfo</b>(<i>interp, script, command,
commandLength</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which to record information.</dd>

<dt>int <b>code</b> ()</dt>

<dd>The code returned from script evaluation.</dd>

<dt>Tcl_Obj <b>*options</b> ()</dt>

<dd>A dictionary of return options.</dd>

<dt>char <b>*message</b> (in)</dt>

<dd>For <b>Tcl_AddErrorInfo</b>, this is a conventional C string to
append to the <b>-errorinfo</b> return option. For
<b>Tcl_AddObjErrorInfo</b>, this points to the first byte of an
array of <i>length</i> bytes containing a string to append to the
<b>-errorinfo</b> return option. This byte array may contain
embedded null bytes unless <i>length</i> is negative.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>A message to be appended to the <b>-errorinfo</b> return option
in the form of a Tcl_Obj value.</dd>

<dt>int <b>length</b> (in)</dt>

<dd>The number of bytes to copy from <i>message</i> when appending
to the <b>-errorinfo</b> return option. If negative, all bytes up
to the first null byte are used.</dd>

<dt>Tcl_Obj <b>*errorObjPtr</b> (in)</dt>

<dd>The <b>-errorcode</b> return option will be set to this
value.</dd>

<dt>char <b>*element</b> (in)</dt>

<dd>String to record as one element of the <b>-errorcode</b> return
option. Last <i>element</i> argument must be NULL.</dd>

<dt>va_list <b>argList</b> (in)</dt>

<dd>An argument list which must have been initialized using
<b>va_start</b>, and cleared using <b>va_end</b>.</dd>

<dt>const char <b>*script</b> (in)</dt>

<dd>Pointer to first character in script containing command (must
be &lt;= command)</dd>

<dt>const char <b>*command</b> (in)</dt>

<dd>Pointer to first character in command that generated the
error</dd>

<dt>int <b>commandLength</b> (in)</dt>

<dd>Number of bytes in command; -1 means use all bytes up to first
null byte</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

The <b>Tcl_SetReturnOptions</b> and <b>Tcl_GetReturnOptions</b>
routines expose the same capabilities as the <b><a href=
"../TclCmd/return.htm">return</a></b> and <b><a href=
"../TclCmd/catch.htm">catch</a></b> commands, respectively, in the
form of a C interface. 

<p><b>Tcl_GetReturnOptions</b> retrieves the dictionary of return
options from an interpreter following a script evaluation. Routines
such as <b><a href="../TclLib/Eval.htm">Tcl_Eval</a></b> are called
to evaluate a script in an interpreter. These routines return an
integer completion code. These routines also leave in the
interpreter both a result and a dictionary of return options
generated by script evaluation. Just as <b><a href=
"../TclLib/SetResult.htm">Tcl_GetObjResult</a></b> retrieves the
result, <b>Tcl_GetReturnOptions</b> retrieves the dictionary of
return options. The integer completion code should be passed as the
<i>code</i> argument to <b>Tcl_GetReturnOptions</b> so that all
required options will be present in the dictionary. Specifically, a
<i>code</i> value of <b>TCL_ERROR</b> will ensure that entries for
the keys <b>-errorinfo</b>, <b>-errorcode</b>, and
<b>-errorline</b> will appear in the dictionary. Also, the entries
for the keys <b>-code</b> and <b>-level</b> will be adjusted if
necessary to agree with the value of <i>code</i>. The <b>(Tcl_Obj
*)</b> returned by <b>Tcl_GetReturnOptions</b> points to an
unshared <b>Tcl_Obj</b> with reference count of zero. The
dictionary may be written to, either adding, removing, or
overwriting any entries in it, without the need to check for a
shared object.</p>

<p>A typical usage for <b>Tcl_GetReturnOptions</b> is to retrieve
the stack trace when script evaluation returns <b>TCL_ERROR</b>,
like so:</p>

<pre>
int code = <a href=
"../TclLib/Eval.htm">Tcl_Eval</a>(interp, script);
if (code == TCL_ERROR) {
    Tcl_Obj *options = Tcl_GetReturnOptions(interp, code);  
    Tcl_Obj *key = <a href=
"../TclLib/StringObj.htm">Tcl_NewStringObj</a>("-errorinfo", -1);
    Tcl_Obj *stackTrace;
    <a href="../TclLib/Object.htm">Tcl_IncrRefCount</a>(key);
    <a href=
"../TclLib/DictObj.htm">Tcl_DictObjGet</a>(NULL, options, key, &amp;stackTrace);
    <a href="../TclLib/Object.htm">Tcl_DecrRefCount</a>(key);
    /* Do something with stackTrace */
}
</pre>

<p><b>Tcl_SetReturnOptions</b> sets the return options of
<i>interp</i> to be <i>options</i>. If <i>options</i> contains any
invalid value for any key, TCL_ERROR will be returned, and the
interp result will be set to an appropriate error message.
Otherwise, a completion code in agreement with the <b>-code</b> and
<b>-level</b> keys in <i>options</i> will be returned.</p>

<p>As an example, Tcl's <b><a href=
"../TclCmd/return.htm">return</a></b> command itself could be
implemented in terms of <b>Tcl_SetReturnOptions</b> like so:</p>

<pre>
if ((objc % 2) == 0) { /* explicit result argument */
    objc--;
    <a href=
"../TclLib/SetResult.htm">Tcl_SetObjResult</a>(interp, objv[objc]);
}
return Tcl_SetReturnOptions(interp, <a href=
"../TclLib/ListObj.htm">Tcl_NewListObj</a>(objc-1, objv+1));
</pre>

(It is not really implemented that way. Internal access privileges
allow for a more efficient alternative that meshes better with the
bytecode compiler.) 

<p>Note that a newly created <b>Tcl_Obj</b> may be passed in as the
<i>options</i> argument without the need to tend to any reference
counting. This is analogous to <b><a href=
"../TclLib/SetResult.htm">Tcl_SetObjResult</a></b>.</p>

<p>While <b>Tcl_SetReturnOptions</b> provides a general interface
to set any collection of return options, there are a handful of
return options that are very frequently used. Most notably the
<b>-errorinfo</b> and <b>-errorcode</b> return options should be
set properly when the command procedure of a command returns
<b>TCL_ERROR</b>. Tcl provides several simpler interfaces to more
directly set these return options.</p>

<p>The <b>-errorinfo</b> option holds a stack trace of the
operations that were in progress when an error occurred, and is
intended to be human-readable. The <b>-errorcode</b> option holds a
list of items that are intended to be machine-readable. The first
item in the <b>-errorcode</b> value identifies the class of error
that occurred (e.g. POSIX means an error occurred in a POSIX system
call) and additional elements hold additional pieces of information
that depend on the class. See the tclvars manual entry for details
on the various formats for the <b>-errorcode</b> option used by
Tcl's built-in commands.</p>

<p>The <b>-errorinfo</b> option value is gradually built up as an
error unwinds through the nested operations. Each time an error
code is returned to <b><a href=
"../TclLib/Eval.htm">Tcl_Eval</a></b>, or any of the routines that
performs script evaluation, the procedure <b>Tcl_AddErrorInfo</b>
is called to add additional text to the <b>-errorinfo</b> value
describing the command that was being executed when the error
occurred. By the time the error has been passed all the way back to
the application, it will contain a complete trace of the activity
in progress when the error occurred.</p>

<p>It is sometimes useful to add additional information to the
<b>-errorinfo</b> value beyond what can be supplied automatically
by the script evaluation routines. <b>Tcl_AddErrorInfo</b> may be
used for this purpose: its <i>message</i> argument is an additional
string to be appended to the <b>-errorinfo</b> option. For example,
when an error arises during the <b><a href=
"../TclCmd/source.htm">source</a></b> command, the procedure
<b>Tcl_AddErrorInfo</b> is called to record the name of the file
being processed and the line number on which the error occurred.
Likewise, when an error arises during evaluation of a Tcl
procedures, the procedure name and line number within the procedure
are recorded, and so on. The best time to call
<b>Tcl_AddErrorInfo</b> is just after a script evaluation routine
has returned <b>TCL_ERROR</b>. The value of the <b>-errorline</b>
return option (retrieved via a call to <b>Tcl_GetReturnOptions</b>)
often makes up a useful part of the <i>message</i> passed to
<b>Tcl_AddErrorInfo</b>.</p>

<p><b>Tcl_AppendObjToErrorInfo</b> is an alternative interface to
the same functionality as <b>Tcl_AddErrorInfo</b>.
<b>Tcl_AppendObjToErrorInfo</b> is called when the string value to
be appended to the <b>-errorinfo</b> option is available as a
<b>Tcl_Obj</b> instead of as a <b>char</b> array.</p>

<p><b>Tcl_AddObjErrorInfo</b> is nearly identical to
<b>Tcl_AddErrorInfo</b>, except that it has an additional
<i>length</i> argument. This allows the <i>message</i> string to
contain embedded null bytes. This is essentially never a good idea.
If the <i>message</i> needs to contain the null character
<b>U+0000</b>, Tcl's usual internal encoding rules should be used
to avoid the need for a null byte. If the
<b>Tcl_AddObjErrorInfo</b> interface is used at all, it should be
with a negative <i>length</i> value.</p>

<p>The procedure <b>Tcl_SetObjErrorCode</b> is used to set the
<b>-errorcode</b> return option to the list object
<i>errorObjPtr</i> built up by the caller.
<b>Tcl_SetObjErrorCode</b> is typically invoked just before
returning an error. If an error is returned without calling
<b>Tcl_SetObjErrorCode</b> or <b>Tcl_SetErrorCode</b> the Tcl
interpreter automatically sets the <b>-errorcode</b> return option
to <b>NONE</b>.</p>

<p>The procedure <b>Tcl_SetErrorCode</b> is also used to set the
<b>-errorcode</b> return option. However, it takes one or more
strings to record instead of an object. Otherwise, it is similar to
<b>Tcl_SetObjErrorCode</b> in behavior.</p>

<p><b>Tcl_SetErrorCodeVA</b> is the same as <b>Tcl_SetErrorCode</b>
except that instead of taking a variable number of arguments it
takes an argument list.</p>

<p><b>Tcl_PosixError</b> sets the <b>-errorcode</b> variable after
an error in a POSIX kernel call. It reads the value of the
<b>errno</b> C variable and calls <b>Tcl_SetErrorCode</b> to set
the <b>-errorcode</b> return option in the <b>POSIX</b> format. The
caller must previously have called <b><a href=
"../TclLib/SetErrno.htm">Tcl_SetErrno</a></b> to set <b>errno</b>;
this is necessary on some platforms (e.g. Windows) where Tcl is
linked into an application as a shared library, or when the error
occurs in a dynamically loaded extension. See the manual entry for
<b><a href="../TclLib/SetErrno.htm">Tcl_SetErrno</a></b> for more
information.</p>

<p><b>Tcl_PosixError</b> returns a human-readable diagnostic
message for the error (this is the same value that will appear as
the third element in the <b>-errorcode</b> value). It may be
convenient to include this string as part of the error message
returned to the application in the interpreter's result.</p>

<p><b>Tcl_LogCommandInfo</b> is invoked after an error occurs in an
interpreter. It adds information about the command that was being
executed when the error occurred to the <b>-errorinfo</b> value,
and the line number stored internally in the interpreter is
set.</p>

<p>In older releases of Tcl, there was no
<b>Tcl_GetReturnOptions</b> routine. In its place, the global Tcl
variables <b>errorInfo</b> and <b>errorCode</b> were the only place
to retrieve the error information. Much existing code written for
older Tcl releases still access this information via those global
variables.</p>

<p>It is important to realize that while reading from those global
variables remains a supported way to access these return option
values, it is important not to assume that writing to those global
variables will properly set the corresponding return options. It
has long been emphasized in this manual page that it is important
to call the procedures described here rather than setting
<b>errorInfo</b> or <b>errorCode</b> directly with <b><a href=
"../TclLib/SetVar.htm">Tcl_ObjSetVar2</a></b>.</p>

<p>If the procedure <b><a href=
"../TclLib/SetResult.htm">Tcl_ResetResult</a></b> is called, it
clears all of the state of the interpreter associated with script
evaluation, including the entire return options dictionary. In
particular, the <b>-errorinfo</b> and <b>-errorcode</b> options are
reset. If an error had occurred, the <b><a href=
"../TclLib/SetResult.htm">Tcl_ResetResult</a></b> call will clear
the error state to make it appear as if no error had occurred after
all. The global variables <b>errorInfo</b> and <b>errorCode</b> are
not modified by <b><a href=
"../TclLib/SetResult.htm">Tcl_ResetResult</a></b> so they continue
to hold a record of information about the most recent error seen in
an interpreter.</p>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclLib/Object.htm">Tcl_DecrRefCount</a></b>, <b><a
href="../TclLib/Object.htm">Tcl_IncrRefCount</a></b>, <b><a href=
"../TclLib/Interp.htm">Tcl_Interp</a></b>, <b><a href=
"../TclLib/SetResult.htm">Tcl_ResetResult</a></b>, <b><a href=
"../TclLib/SetErrno.htm">Tcl_SetErrno</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/E.htm#error">error</a>, <a href=
"../Keywords/O.htm#object">object</a>, <a href=
"../Keywords/O.htm#object result">object result</a>, <a href=
"../Keywords/S.htm#stack">stack</a>, <a href=
"../Keywords/T.htm#trace">trace</a>, <a href=
"../Keywords/V.htm#variable">variable</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1997 Sun Microsystems, Inc.</div>
</body>
</html>

