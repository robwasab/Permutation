<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_SetResult manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> SetResult</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_SetObjResult, Tcl_GetObjResult, Tcl_SetResult,
Tcl_GetStringResult, Tcl_AppendResult, Tcl_AppendResultVA,
Tcl_AppendElement, Tcl_ResetResult, Tcl_FreeResult - manipulate Tcl
result 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
<b>Tcl_SetObjResult</b>(<i>interp, objPtr</i>)<br>
Tcl_Obj *<br>
<b>Tcl_GetObjResult</b>(<i>interp</i>)<br>
<b>Tcl_SetResult</b>(<i>interp, result, freeProc</i>)<br>
const char *<br>
<b>Tcl_GetStringResult</b>(<i>interp</i>)<br>
<b>Tcl_AppendResult</b>(<i>interp, result, result, ... ,</i>
<b>(char *) NULL</b>)<br>
<b>Tcl_AppendResultVA</b>(<i>interp, argList</i>)<br>
<b>Tcl_AppendElement</b>(<i>interp, element</i>)<br>
<b>Tcl_ResetResult</b>(<i>interp</i>)<br>
<b>Tcl_FreeResult</b>(<i>interp</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(out)</dt>

<dd>Interpreter whose result is to be modified or read.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>Object value to become result for <i>interp</i>.</dd>

<dt>char <b>*result</b> (in)</dt>

<dd>String value to become result for <i>interp</i> or to be
appended to the existing result.</dd>

<dt>char <b>*element</b> (in)</dt>

<dd>String value to append as a list element to the existing result
of <i>interp</i>.</dd>

<dt>Tcl_FreeProc <b>*freeProc</b> (in)</dt>

<dd>Address of procedure to call to release storage at
<i>result</i>, or <b>TCL_STATIC</b>, <b>TCL_DYNAMIC</b>, or
<b>TCL_VOLATILE</b>.</dd>

<dt>va_list <b>argList</b> (in)</dt>

<dd>An argument list which must have been initialized using
<b>va_start</b>, and cleared using <b>va_end</b>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

The procedures described here are utilities for manipulating the
result value in a Tcl interpreter. The interpreter result may be
either a Tcl object or a string. For example,
<b>Tcl_SetObjResult</b> and <b>Tcl_SetResult</b> set the
interpreter result to, respectively, an object and a string.
Similarly, <b>Tcl_GetObjResult</b> and <b>Tcl_GetStringResult</b>
return the interpreter result as an object and as a string. The
procedures always keep the string and object forms of the
interpreter result consistent. For example, if
<b>Tcl_SetObjResult</b> is called to set the result to an object,
then <b>Tcl_GetStringResult</b> is called, it will return the
object's string value. 

<p><b>Tcl_SetObjResult</b> arranges for <i>objPtr</i> to be the
result for <i>interp</i>, replacing any existing result. The result
is left pointing to the object referenced by <i>objPtr</i>.
<i>objPtr</i>'s reference count is incremented since there is now a
new reference to it from <i>interp</i>. The reference count for any
old result object is decremented and the old result object is freed
if no references to it remain.</p>

<p><b>Tcl_GetObjResult</b> returns the result for <i>interp</i> as
an object. The object's reference count is not incremented; if the
caller needs to retain a long-term pointer to the object they
should use <b><a href=
"../TclLib/Object.htm">Tcl_IncrRefCount</a></b> to increment its
reference count in order to keep it from being freed too early or
accidentally changed.</p>

<p><b>Tcl_SetResult</b> arranges for <i>result</i> to be the result
for the current Tcl command in <i>interp</i>, replacing any
existing result. The <i>freeProc</i> argument specifies how to
manage the storage for the <i>result</i> argument; it is discussed
in the section <b>THE TCL_FREEPROC ARGUMENT TO TCL_SETRESULT</b>
below. If <i>result</i> is <b>NULL</b>, then <i>freeProc</i> is
ignored and <b>Tcl_SetResult</b> re-initializes <i>interp</i>'s
result to point to an empty string.</p>

<p><b>Tcl_GetStringResult</b> returns the result for <i>interp</i>
as a string. If the result was set to an object by a
<b>Tcl_SetObjResult</b> call, the object form will be converted to
a string and returned. If the object's string representation
contains null bytes, this conversion will lose information. For
this reason, programmers are encouraged to write their code to use
the new object API procedures and to call <b>Tcl_GetObjResult</b>
instead.</p>

<p><b>Tcl_ResetResult</b> clears the result for <i>interp</i> and
leaves the result in its normal empty initialized state. If the
result is an object, its reference count is decremented and the
result is left pointing to an unshared object representing an empty
string. If the result is a dynamically allocated string, its memory
is free*d and the result is left as a empty string.
<b>Tcl_ResetResult</b> also clears the error state managed by <b><a
href="../TclLib/AddErrInfo.htm">Tcl_AddErrorInfo</a></b>, <b><a
href="../TclLib/AddErrInfo.htm">Tcl_AddObjErrorInfo</a></b>, and
<b><a href="../TclLib/AddErrInfo.htm">Tcl_SetErrorCode</a></b>.</p>

<p><b>Tcl_AppendResult</b> makes it easy to build up Tcl results in
pieces. It takes each of its <i>result</i> arguments and appends
them in order to the current result associated with <i>interp</i>.
If the result is in its initialized empty state (e.g. a command
procedure was just invoked or <b>Tcl_ResetResult</b> was just
called), then <b>Tcl_AppendResult</b> sets the result to the
concatenation of its <i>result</i> arguments.
<b>Tcl_AppendResult</b> may be called repeatedly as additional
pieces of the result are produced. <b>Tcl_AppendResult</b> takes
care of all the storage management issues associated with managing
<i>interp</i>'s result, such as allocating a larger result area if
necessary. It also manages conversion to and from the <i>result</i>
field of the <i>interp</i> so as to handle backward-compatibility
with old-style extensions. Any number of <i>result</i> arguments
may be passed in a single call; the last argument in the list must
be a NULL pointer.</p>

<p><b>Tcl_AppendResultVA</b> is the same as <b>Tcl_AppendResult</b>
except that instead of taking a variable number of arguments it
takes an argument list.</p>

<h3><a name="M6">OLD STRING PROCEDURES</a></h3>

Use of the following procedures (is deprecated since they
manipulate the Tcl result as a string. Procedures such as
<b>Tcl_SetObjResult</b> that manipulate the result as an object can
be significantly more efficient. 

<p><b>Tcl_AppendElement</b> is similar to <b>Tcl_AppendResult</b>
in that it allows results to be built up in pieces. However,
<b>Tcl_AppendElement</b> takes only a single <i>element</i>
argument and it appends that argument to the current result as a
proper Tcl list element. <b>Tcl_AppendElement</b> adds backslashes
or braces if necessary to ensure that <i>interp</i>'s result can be
parsed as a list and that <i>element</i> will be extracted as a
single element. Under normal conditions, <b>Tcl_AppendElement</b>
will add a space character to <i>interp</i>'s result just before
adding the new list element, so that the list elements in the
result are properly separated. However if the new list element is
the first in a list or sub-list (i.e. <i>interp</i>'s current
result is empty, or consists of the single character
&ldquo;{&rdquo;, or ends in the characters &ldquo; {&rdquo;) then
no space is added.</p>

<p><b>Tcl_FreeResult</b> performs part of the work of
<b>Tcl_ResetResult</b>. It frees up the memory associated with
<i>interp</i>'s result. It also sets <i>interp-&gt;freeProc</i> to
zero, but does not change <i>interp-&gt;result</i> or clear error
state. <b>Tcl_FreeResult</b> is most commonly used when a procedure
is about to replace one result value with another.</p>

<h3><a name="M7">DIRECT ACCESS TO INTERP-&gt;RESULT IS
DEPRECATED</a></h3>

It used to be legal for programs to directly read and write
<i>interp-&gt;result</i> to manipulate the interpreter result.
Direct access to <i>interp-&gt;result</i> is now strongly
deprecated because it can make the result's string and object forms
inconsistent. Programs should always read the result using the
procedures <b>Tcl_GetObjResult</b> or <b>Tcl_GetStringResult</b>,
and write the result using <b>Tcl_SetObjResult</b> or
<b>Tcl_SetResult</b>. 

<h3><a name="M8">THE TCL_FREEPROC ARGUMENT TO
TCL_SETRESULT</a></h3>

<b>Tcl_SetResult</b>'s <i>freeProc</i> argument specifies how the
Tcl system is to manage the storage for the <i>result</i> argument.
If <b>Tcl_SetResult</b> or <b>Tcl_SetObjResult</b> are called at a
time when <i>interp</i> holds a string result, they do whatever is
necessary to dispose of the old string result (see the <b><a href=
"../TclLib/Interp.htm">Tcl_Interp</a></b> manual entry for details
on this). 

<p>If <i>freeProc</i> is <b>TCL_STATIC</b> it means that
<i>result</i> refers to an area of static storage that is
guaranteed not to be modified until at least the next call to <b><a
href="../TclLib/Eval.htm">Tcl_Eval</a></b>. If <i>freeProc</i> is
<b>TCL_DYNAMIC</b> it means that <i>result</i> was allocated with a
call to <b><a href="../TclLib/Alloc.htm">Tcl_Alloc</a></b> and is
now the property of the Tcl system. <b>Tcl_SetResult</b> will
arrange for the string's storage to be released by calling <b><a
href="../TclLib/Alloc.htm">Tcl_Free</a></b> when it is no longer
needed. If <i>freeProc</i> is <b>TCL_VOLATILE</b> it means that
<i>result</i> points to an area of memory that is likely to be
overwritten when <b>Tcl_SetResult</b> returns (e.g. it points to
something in a stack frame). In this case <b>Tcl_SetResult</b> will
make a copy of the string in dynamically allocated storage and
arrange for the copy to be the result for the current Tcl
command.</p>

<p>If <i>freeProc</i> is not one of the values <b>TCL_STATIC</b>,
<b>TCL_DYNAMIC</b>, and <b>TCL_VOLATILE</b>, then it is the address
of a procedure that Tcl should call to free the string. This allows
applications to use non-standard storage allocators. When Tcl no
longer needs the storage for the string, it will call
<i>freeProc</i>. <i>FreeProc</i> should have arguments and result
that match the type <b>Tcl_FreeProc</b>:</p>

<pre>
typedef void Tcl_FreeProc(char *<i>blockPtr</i>);
</pre>

When <i>freeProc</i> is called, its <i>blockPtr</i> will be set to
the value of <i>result</i> passed to <b>Tcl_SetResult</b>. 

<h3><a name="M9">SEE ALSO</a></h3>

<b><a href="../TclLib/AddErrInfo.htm">Tcl_AddErrorInfo</a></b>,
<b><a href="../TclLib/CrtObjCmd.htm">Tcl_CreateObjCommand</a></b>,
<b><a href="../TclLib/AddErrInfo.htm">Tcl_SetErrorCode</a></b>,
<b><a href="../TclLib/Interp.htm">Tcl_Interp</a></b> 

<h3><a name="M10">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#append">append</a>, <a href=
"../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/E.htm#element">element</a>, <a href=
"../Keywords/L.htm#list">list</a>, <a href=
"../Keywords/O.htm#object">object</a>, <a href=
"../Keywords/R.htm#result">result</a>, <a href=
"../Keywords/R.htm#return value">return value</a>, <a href=
"../Keywords/I.htm#interpreter">interpreter</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1997 Sun Microsystems, Inc.</div>
</body>
</html>

