<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_SplitList manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> SplitList</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_SplitList, Tcl_Merge, Tcl_ScanElement, Tcl_ConvertElement,
Tcl_ScanCountedElement, Tcl_ConvertCountedElement - manipulate Tcl
lists 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
int<br>
<b>Tcl_SplitList</b>(<i>interp, list, argcPtr, argvPtr</i>)<br>
char *<br>
<b>Tcl_Merge</b>(<i>argc, argv</i>)<br>
int<br>
<b>Tcl_ScanElement</b>(<i>src, flagsPtr</i>)<br>
int<br>
<b>Tcl_ScanCountedElement</b>(<i>src, length, flagsPtr</i>)<br>
int<br>
<b>Tcl_ConvertElement</b>(<i>src, dst, flags</i>)<br>
int<br>
<b>Tcl_ConvertCountedElement</b>(<i>src, length, dst,
flags</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(out)</dt>

<dd>Interpreter to use for error reporting. If NULL, then no error
message is left.</dd>

<dt>char <b>*list</b> (in)</dt>

<dd>Pointer to a string with proper list structure.</dd>

<dt>int <b>*argcPtr</b> (out)</dt>

<dd>Filled in with number of elements in <i>list</i>.</dd>

<dt>const char <b>***argvPtr</b> (out)</dt>

<dd><i>*argvPtr</i> will be filled in with the address of an array
of pointers to the strings that are the extracted elements of
<i>list</i>. There will be <i>*argcPtr</i> valid entries in the
array, followed by a NULL entry.</dd>

<dt>int <b>argc</b> (in)</dt>

<dd>Number of elements in <i>argv</i>.</dd>

<dt>const char *const <b>*argv</b> (in)</dt>

<dd>Array of strings to merge together into a single list. Each
string will become a separate element of the list.</dd>

<dt>const char <b>*src</b> (in)</dt>

<dd>String that is to become an element of a list.</dd>

<dt>int <b>*flagsPtr</b> (in)</dt>

<dd>Pointer to word to fill in with information about <i>src</i>.
The value of *<i>flagsPtr</i> must be passed to
<b>Tcl_ConvertElement</b>.</dd>

<dt>int <b>length</b> (in)</dt>

<dd>Number of bytes in string <i>src</i>.</dd>

<dt>char <b>*dst</b> (in)</dt>

<dd>Place to copy converted list element. Must contain enough
characters to hold converted string.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>Information about <i>src</i>. Must be value returned by
previous call to <b>Tcl_ScanElement</b>, possibly OR-ed with
<b>TCL_DONT_USE_BRACES</b>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These procedures may be used to disassemble and reassemble Tcl
lists. <b>Tcl_SplitList</b> breaks a list up into its constituent
elements, returning an array of pointers to the elements using
<i>argcPtr</i> and <i>argvPtr</i>. While extracting the arguments,
<b>Tcl_SplitList</b> obeys the usual rules for backslash
substitutions and braces. The area of memory pointed to by
<i>*argvPtr</i> is dynamically allocated; in addition to the array
of pointers, it also holds copies of all the list elements. It is
the caller's responsibility to free up all of this storage. For
example, suppose that you have called <b>Tcl_SplitList</b> with the
following code: 

<pre>
int argc, code;
char *string;
char **argv;
    ...
code = Tcl_SplitList(interp, string, &amp;argc, &amp;argv);
</pre>

Then you should eventually free the storage with a call like the
following: 

<pre>
<a href="../TclLib/Alloc.htm">Tcl_Free</a>((char *) argv);
</pre>

<p><b>Tcl_SplitList</b> normally returns <b>TCL_OK</b>, which means
the list was successfully parsed. If there was a syntax error in
<i>list</i>, then <b>TCL_ERROR</b> is returned and the
interpreter's result will point to an error message describing the
problem (if <i>interp</i> was not NULL). If <b>TCL_ERROR</b> is
returned then no memory is allocated and <i>*argvPtr</i> is not
modified.</p>

<p><b>Tcl_Merge</b> is the inverse of <b>Tcl_SplitList</b>: it
takes a collection of strings given by <i>argc</i> and <i>argv</i>
and generates a result string that has proper list structure. This
means that commands like <b>index</b> may be used to extract the
original elements again. In addition, if the result of
<b>Tcl_Merge</b> is passed to <b><a href=
"../TclLib/Eval.htm">Tcl_Eval</a></b>, it will be parsed into
<i>argc</i> words whose values will be the same as the <i>argv</i>
strings passed to <b>Tcl_Merge</b>. <b>Tcl_Merge</b> will modify
the list elements with braces and/or backslashes in order to
produce proper Tcl list structure. The result string is dynamically
allocated using <b><a href="../TclLib/Alloc.htm">Tcl_Alloc</a></b>;
the caller must eventually release the space using <b><a href=
"../TclLib/Alloc.htm">Tcl_Free</a></b>.</p>

<p>If the result of <b>Tcl_Merge</b> is passed to
<b>Tcl_SplitList</b>, the elements returned by <b>Tcl_SplitList</b>
will be identical to those passed into <b>Tcl_Merge</b>. However,
the converse is not true: if <b>Tcl_SplitList</b> is passed a given
string, and the resulting <i>argc</i> and <i>argv</i> are passed to
<b>Tcl_Merge</b>, the resulting string may not be the same as the
original string passed to <b>Tcl_SplitList</b>. This is because
<b>Tcl_Merge</b> may use backslashes and braces differently than
the original string.</p>

<p><b>Tcl_ScanElement</b> and <b>Tcl_ConvertElement</b> are the
procedures that do all of the real work of <b>Tcl_Merge</b>.
<b>Tcl_ScanElement</b> scans its <i>src</i> argument and determines
how to use backslashes and braces when converting it to a list
element. It returns an overestimate of the number of characters
required to represent <i>src</i> as a list element, and it stores
information in <i>*flagsPtr</i> that is needed by
<b>Tcl_ConvertElement</b>.</p>

<p><b>Tcl_ConvertElement</b> is a companion procedure to
<b>Tcl_ScanElement</b>. It does the actual work of converting a
string to a list element. Its <i>flags</i> argument must be the
same as the value returned by <b>Tcl_ScanElement</b>.
<b>Tcl_ConvertElement</b> writes a proper list element to memory
starting at *<i>dst</i> and returns a count of the total number of
characters written, which will be no more than the result returned
by <b>Tcl_ScanElement</b>. <b>Tcl_ConvertElement</b> writes out
only the actual list element without any leading or trailing
spaces: it is up to the caller to include spaces between adjacent
list elements.</p>

<p><b>Tcl_ConvertElement</b> uses one of two different approaches
to handle the special characters in <i>src</i>. Wherever possible,
it handles special characters by surrounding the string with
braces. This produces clean-looking output, but cannot be used in
some situations, such as when <i>src</i> contains unmatched braces.
In these situations, <b>Tcl_ConvertElement</b> handles special
characters by generating backslash sequences for them. The caller
may insist on the second approach by OR-ing the flag value returned
by <b>Tcl_ScanElement</b> with <b>TCL_DONT_USE_BRACES</b>. Although
this will produce an uglier result, it is useful in some special
situations, such as when <b>Tcl_ConvertElement</b> is being used to
generate a portion of an argument for a Tcl command. In this case,
surrounding <i>src</i> with curly braces would cause the command
not to be parsed correctly.</p>

<p>By default, <b>Tcl_ConvertElement</b> will use quoting in its
output to be sure the first character of an element is not the hash
character (&ldquo;#&rdquo;.) This is to be sure the first element
of any list passed to <b><a href="../TclCmd/eval.htm">eval</a></b>
is not mis-parsed as the beginning of a comment. When a list
element is not the first element of a list, this quoting is not
necessary. When the caller can be sure that the element is not the
first element of a list, it can disable quoting of the leading hash
character by OR-ing the flag value returned by
<b>Tcl_ScanElement</b> with <b>TCL_DONT_QUOTE_HASH</b>.</p>

<p><b>Tcl_ScanCountedElement</b> and
<b>Tcl_ConvertCountedElement</b> are the same as
<b>Tcl_ScanElement</b> and <b>Tcl_ConvertElement</b>, except the
length of string <i>src</i> is specified by the <i>length</i>
argument, and the string may contain embedded nulls.</p>

<h3><a name="M6">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#backslash">backslash</a>, <a href=
"../Keywords/C.htm#convert">convert</a>, <a href=
"../Keywords/E.htm#element">element</a>, <a href=
"../Keywords/L.htm#list">list</a>, <a href=
"../Keywords/M.htm#merge">merge</a>, <a href=
"../Keywords/S.htm#split">split</a>, <a href=
"../Keywords/S.htm#strings">strings</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

