<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Themed Widget - Geometry manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> ttk_Geometry</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Ttk_MakeBox, Ttk_PadBox, Ttk_ExpandBox, Ttk_PackBox, Ttk_StickBox,
Ttk_PlaceBox, Ttk_BoxContains, Ttk_MakePadding, Ttk_UniformPadding,
Ttk_AddPadding, Ttk_RelievePadding, Ttk_GetPaddingFromObj,
Ttk_GetBorderFromObj, Ttk_GetStickyFromObj - Tk themed geometry
utilities 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tkTheme.h&gt;</b><br>
<br>
Ttk_Box<br>
<b>Ttk_MakeBox</b>(int <i>x</i>, int <i>y</i>, int <i>width</i>,
int <i>height</i>);<br>
<br>
Ttk_Box<br>
<b>Ttk_PadBox</b>(Ttk_Box <i>parcel</i>, Ttk_Padding
<i>padding</i>);<br>
<br>
Ttk_Box<br>
<b>Ttk_ExpandBox</b>(Ttk_Box <i>parcel</i>, Ttk_Padding
<i>padding</i>);<br>
<br>
Ttk_Box<br>
<b>Ttk_PackBox</b>(Ttk_Box *<i>cavity</i>, int <i>width</i>, int
<i>height</i>, Ttk_Side <i>side</i>);<br>
<br>
Ttk_Box<br>
<b>Ttk_StickBox</b>(Ttk_Box <i>parcel</i>, int <i>width</i>, int
<i>height</i>, unsigned <i>sticky</i>);<br>
<br>
Ttk_Box<br>
<b>Ttk_PlaceBox</b>(Ttk_Box *<i>cavity</i>, int <i>width</i>, int
<i>height</i>, Ttk_Side <i>side</i>, unsigned <i>sticky</i>);<br>
<br>
Ttk_Box<br>
<b>Ttk_AnchorBox</b>(Ttk_Box <i>parcel</i>, int <i>width</i>, int
<i>height</i>, Tk_Anchor <i>anchor</i>);<br>
<br>
Ttk_Padding<br>
<b>Ttk_MakePadding</b>(short <i>left</i>, short <i>top</i>, short
<i>right</i>, short <i>bottom</i>);<br>
<br>
Ttk_Padding<br>
<b>Ttk_UniformPadding</b>(short <i>border</i>);<br>
<br>
Ttk_Padding<br>
<b>Ttk_AddPadding</b>(Ttk_Padding <i>padding1</i>, Ttk_Padding
<i>padding2</i>;<br>
<br>
Ttk_Padding<br>
<b>Ttk_RelievePadding</b>(Ttk_Padding <i>padding</i>, int
<i>relief</i>);<br>
<br>
int<br>
<b>Ttk_BoxContains</b>(Ttk_Box <i>box</i>, int <i>x</i>, int
<i>y</i>);<br>
<br>
int<br>
<b>Ttk_GetPaddingFromObj</b>(<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>, Tk_Window
<i>tkwin</i>, Tcl_Obj *<i>objPtr</i>, Ttk_Padding
*<i>padding_rtn</i>);<br>
<br>
int<br>
<b>Ttk_GetBorderFromObj</b>(<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>, Tcl_Obj
*<i>objPtr</i>, Ttk_Padding *<i>padding_rtn</i>);<br>
<br>
int<br>
<b>Ttk_GetStickyFromObj</b>(<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>, Tcl_Obj
*<i>objPtr</i>, int *<i>sticky_rtn</i>);<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Tk_Anchor <b>anchor</b> (in)</dt>

<dd>One of the symbolic constants <b>TK_ANCHOR_N</b>,
<b>TK_ANCHOR_NE</b>, etc. See <i><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchorFromObj</a>(3)</i>.</dd>

<dt>Ttk_Box * <b>cavity</b> (in/out)</dt>

<dd>A rectangular region from which a parcel is allocated.</dd>

<dt>short <b>border</b> (in)</dt>

<dd>Extra padding (in pixels) to add uniformly to each side of a
region.</dd>

<dt>short <b>bottom</b> (in)</dt>

<dd>Extra padding (in pixels) to add to the bottom of a
region.</dd>

<dt>Ttk_Box <b>box</b> (in)</dt>

<dt>Ttk_Box * <b>box_rtn</b> (out)</dt>

<dd>Specifies a rectangular region.</dd>

<dt>int <b>height</b> (in)</dt>

<dd>The height in pixels of a region.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> * <b><a href=
"../TclCmd/interp.htm">interp</a></b> (in)</dt>

<dd>Used to store error messages.</dd>

<dt>int <b>left</b> (in)</dt>

<dd>Extra padding (in pixels) to add to the left side of a
region.</dd>

<dt>Tcl_Obj * <b>objPtr</b> (in)</dt>

<dd>String value contains a symbolic name to be converted to an
enumerated value or bitmask. Internal rep may be be modified to
cache corresponding value.</dd>

<dt>Ttk_Padding <b>padding</b> (in)</dt>

<dt>Ttk_Padding * <b>padding_rtn</b> (out)</dt>

<dd>Extra padding to add on the inside of a region.</dd>

<dt>Ttk_Box <b>parcel</b> (in)</dt>

<dd>A rectangular region, allocated from a cavity.</dd>

<dt>int <b>relief</b> (in)</dt>

<dd>One of the standard Tk relief options (TK_RELIEF_RAISED,
TK_RELIEF_SUNKEN, etc.). See <b><a href=
"../TkLib/GetRelief.htm">Tk_GetReliefFromObj</a></b>.</dd>

<dt>short <b>right</b> (in)</dt>

<dd>Extra padding (in pixles) to add to the right side of a
region.</dd>

<dt>Ttk_Side <b>side</b> (in)</dt>

<dd>One of <b>TTK_SIDE_LEFT</b>, <b>TTK_SIDE_TOP</b>,
<b>TTK_SIDE_RIGHT</b>, or <b>TTK_SIDE_BOTTOM</b>.</dd>

<dt>unsigned <b>sticky</b> (in)</dt>

<dd>A bitmask containing one or more of the bits <b>TTK_STICK_W</b>
(west, or left), <b>TTK_STICK_E</b> (east, or right,
<b>TTK_STICK_N</b> (north, or top), and <b>TTK_STICK_S</b> (south,
or bottom). <b>TTK_FILL_X</b> is defined as a synonym for
(TTK_STICK_W|TTK_STICK_E), <b>TTK_FILL_Y</b> is a synonym for
(TTK_STICK_N|TTK_STICK_S), and <b>TTK_FILL_BOTH</b> and
<b>TTK_STICK_ALL</b> are synonyms for (TTK_FILL_X|TTK_FILL_Y). See
also: <i>grid(n)</i>.</dd>

<dt>Tk_Window <b>tkwin</b> (in)</dt>

<dd>Window whose screen geometry determines the conversion between
absolute units and pixels.</dd>

<dt>short <b>top</b> (in)</dt>

<dd>Extra padding at the top of a region.</dd>

<dt>int <b>width</b> (in)</dt>

<dd>The width in pixels of a region.</dd>

<dt>int <b>x</b> (in)</dt>

<dd>X coordinate of upper-left corner of region.</dd>

<dt>int <b>y</b> (in)</dt>

<dd>Y coordinate of upper-left corner of region.</dd>
</dl>

<h3><a name="M5">BOXES</a></h3>

The <b>Ttk_Box</b> structure represents a rectangular region of a
window: 

<pre>
typedef struct {
    int <i>x</i>;
    int <i>y</i>;
    int <i>width</i>;
    int <i>height</i>;
} <b>Ttk_Box</b>;
</pre>

All coordinates are relative to the window. 

<p><b>Ttk_MakeBox</b> is a convenience routine that contsructs a
<b>Ttk_Box</b> structure representing a region <i>width</i> pixels
wide, <i>height</i> pixels tall, at the specified <i>x, y</i>
coordinates.</p>

<p><b>Ttk_PadBox</b> returns a new box located inside the specified
<i>parcel</i>, shrunken according to the left, top, right, and
bottom margins specified by <i>padding</i>.</p>

<p><b>Ttk_ExpandBox</b> is the inverse of <b>Ttk_PadBox</b>: it
returns a new box surrounding the specified <i>parcel</i>, expanded
according to the left, top, right, and bottom margins specified by
<i>padding</i>.</p>

<p><b>Ttk_PackBox</b> allocates a parcel <i>width</i> by
<i>height</i> pixels wide on the specified <i>side</i> of the
<i>cavity</i>, and shrinks the <i>cavity</i> accordingly.</p>

<p><b>Ttk_StickBox</b> places a box with the requested <i>width</i>
and <i>height</i> inside the <i>parcel</i> according to the
<i>sticky</i> bits.</p>

<p><b>Ttk_PlaceBox</b> combines <b>Ttk_PackBox</b> and
<b>Ttk_StickBox</b>: it allocates a parcel on the specified
<i>side</i> of the <i>cavity</i>, places a box of the requested
size inside the parcel according to <i>sticky</i>, and shrinks the
<i>cavity</i>.</p>

<p><b>Ttk_AnchorBox</b> places a box with the requested
<i>width</i> and <i>height</i> inside the <i>parcel</i> according
to the specified <i>anchor</i> option.</p>

<p><b>Ttk_BoxContains</b> tests if the specified <i>x, y</i>
coordinate lies within the rectangular region <i>box</i>.</p>

<h3><a name="M6">PADDDING</a></h3>

The <b>Ttk_Padding</b> structure is used to represent borders,
internal padding, and external margins: 

<pre>
typedef struct {
    short <i>left</i>;
    short <i>top</i>;
    short <i>right</i>;
    short <i>bottom</i>;
} <b>Ttk_Padding</b>;
</pre>

<p><b>Ttk_MakePadding</b> is a convenience routine that contsructs
a <b>Ttk_Padding</b> structure with the specified left, top, right,
and bottom components.</p>

<p><b>Ttk_UniformPadding</b> constructs a <b>Ttk_Padding</b>
structure with all components equal to the specified
<i>border</i>.</p>

<p><b>Ttk_AddPadding</b> adds two <b>Ttk_Padding</b>s together and
returns a combined padding containing the sum of the individual
padding components.</p>

<p><b>Ttk_RelievePadding</b> adds an extra 2 pixels of padding to
<i>padding</i> according to the specified <i>relief</i>. If
<i>relief</i> is <b>TK_RELIEF_SUNKEN</b>, adds two pixels at the
top and left so the inner region is shifted down and to the left.
If it is <b>TK_RELIEF_RAISED</b>, adds two pixels at the bottom and
right so the inner region is shifted up and to the right.
Otherwise, adds 1 pixel on all sides. This is typically used in
element geometry procedures to simulate a &ldquo;pressed-in&rdquo;
look for pushbuttons.</p>

<h3><a name="M7">CONVERSION ROUTINES</a></h3>

<b>Ttk_GetPaddingFromObj</b> converts the string in <i>objPtr</i>
to a <b>Ttk_Padding</b> structure. The string representation is a
list of up to four length specifications &ldquo;<i>left top right
bottom</i>&rdquo;. If fewer than four elements are specified,
<i>bottom</i> defaults to <i>top</i>, <i>right</i> defaults to
<i>left</i>, and <i>top</i> defaults to <i>left</i>. See
<b>Tk_GetPixelsFromObj(3)</b> for the syntax of length
specifications. 

<p><b>Ttk_GetBorderFromObj</b> is the same as
<b>Ttk_GetPaddingFromObj</b> except that the lengths are specified
as integers (i.e., resolution-dependant values like <i>3m</i> are
not allowed).</p>

<p><b>Ttk_GetStickyFromObj</b> converts the string in <i>objPtr</i>
to a <i>sticky</i> bitmask. The string contains zero or more of the
characters <b>n</b>, <b>s</b>, <b>e</b>, or <b>w</b>.</p>

<h3><a name="M8">SEE ALSO</a></h3>

<b><a href="../TkLib/GetRelief.htm">Tk_GetReliefFromObj</a></b>,
<b><a href="../TkLib/GetPixels.htm">Tk_GetPixelsFromObj</a></b>,
<b><a href="../TkLib/GetAnchor.htm">Tk_GetAnchorFromObj</a></b> 

<h3><a name="M9">KEYWORDS</a></h3>

<a href="../Keywords/G.htm#geometry">geometry</a>, <a href=
"../Keywords/P.htm#padding">padding</a>, <a href=
"../Keywords/M.htm#margins">margins</a>, <a href=
"../Keywords/B.htm#box">box</a>, <a href=
"../Keywords/R.htm#region">region</a>, <a href=
"../Keywords/S.htm#sticky">sticky</a>, <a href=
"../Keywords/R.htm#relief">relief</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2004 Joe English</div>
</body>
</html>

