<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - fileevent manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> fileevent</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

fileevent - Execute a script when a channel becomes readable or
writable 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>fileevent</b> <i>channelId</i> <b>readable</b>
?<i>script</i>?<br>
<b>fileevent</b> <i>channelId</i> <b>writable</b>
?<i>script</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

This command is used to create <i>file event handlers</i>. A file
event handler is a binding between a channel and a script, such
that the script is evaluated whenever the channel becomes readable
or writable. File event handlers are most commonly used to allow
data to be received from another process on an event-driven basis,
so that the receiver can continue to interact with the user while
waiting for the data to arrive. If an application invokes <b><a
href="../TclCmd/gets.htm">gets</a></b> or <b><a href=
"../TclCmd/read.htm">read</a></b> on a blocking channel when there
is no input data available, the process will block; until the input
data arrives, it will not be able to service other events, so it
will appear to the user to &ldquo;freeze up&rdquo;. With
<b>fileevent</b>, the process can tell when data is present and
only invoke <b><a href="../TclCmd/gets.htm">gets</a></b> or <b><a
href="../TclCmd/read.htm">read</a></b> when they will not block. 

<p>The <i>channelId</i> argument to <b>fileevent</b> refers to an
open channel such as a Tcl standard channel (<b>stdin</b>,
<b>stdout</b>, or <b>stderr</b>), the return value from an
invocation of <b><a href="../TclCmd/open.htm">open</a></b> or <b><a
href="../TclCmd/socket.htm">socket</a></b>, or the result of a
channel creation command provided by a Tcl extension.</p>

<p>If the <i>script</i> argument is specified, then
<b>fileevent</b> creates a new event handler: <i>script</i> will be
evaluated whenever the channel becomes readable or writable
(depending on the second argument to <b>fileevent</b>). In this
case <b>fileevent</b> returns an empty string. The <b>readable</b>
and <b>writable</b> event handlers for a file are independent, and
may be created and deleted separately. However, there may be at
most one <b>readable</b> and one <b>writable</b> handler for a file
at a given time in a given interpreter. If <b>fileevent</b> is
called when the specified handler already exists in the invoking
interpreter, the new script replaces the old one.</p>

<p>If the <i>script</i> argument is not specified, <b>fileevent</b>
returns the current script for <i>channelId</i>, or an empty string
if there is none. If the <i>script</i> argument is specified as an
empty string then the event handler is deleted, so that no script
will be invoked. A file event handler is also deleted automatically
whenever its channel is closed or its interpreter is deleted.</p>

<p>A channel is considered to be readable if there is unread data
available on the underlying device. A channel is also considered to
be readable if there is unread data in an input buffer, except in
the special case where the most recent attempt to read from the
channel was a <b><a href="../TclCmd/gets.htm">gets</a></b> call
that could not find a complete line in the input buffer. This
feature allows a file to be read a line at a time in nonblocking
mode using events. A channel is also considered to be readable if
an end of file or error condition is present on the underlying file
or device. It is important for <i>script</i> to check for these
conditions and handle them appropriately; for example, if there is
no special check for end of file, an infinite loop may occur where
<i>script</i> reads no data, returns, and is immediately invoked
again.</p>

<p>A channel is considered to be writable if at least one byte of
data can be written to the underlying file or device without
blocking, or if an error condition is present on the underlying
file or device.</p>

<p>Event-driven I/O works best for channels that have been placed
into nonblocking mode with the <b><a href=
"../TclCmd/fconfigure.htm">fconfigure</a></b> command. In blocking
mode, a <b><a href="../TclCmd/puts.htm">puts</a></b> command may
block if you give it more data than the underlying file or device
can accept, and a <b><a href="../TclCmd/gets.htm">gets</a></b> or
<b><a href="../TclCmd/read.htm">read</a></b> command will block if
you attempt to read more data than is ready; no events will be
processed while the commands block. In nonblocking mode <b><a href=
"../TclCmd/puts.htm">puts</a></b>, <b><a href=
"../TclCmd/read.htm">read</a></b>, and <b><a href=
"../TclCmd/gets.htm">gets</a></b> never block. See the
documentation for the individual commands for information on how
they handle blocking and nonblocking channels.</p>

<p>The script for a file event is executed at global level (outside
the context of any Tcl procedure) in the interpreter in which the
<b>fileevent</b> command was invoked. If an error occurs while
executing the script then the command registered with <b><a href=
"../TclCmd/interp.htm">interp bgerror</a></b> is used to report the
error. In addition, the file event handler is deleted if it ever
returns an error; this is done in order to prevent infinite loops
due to buggy handlers.</p>

<h3><a name="M5">EXAMPLE</a></h3>

In this setup <b>GetData</b> will be called with the channel as an
argument whenever $chan becomes readable. 

<pre>
proc GetData {chan} {
    if {![eof $chan]} {
        puts [gets $chan]
    }
}

<b>fileevent</b> $chan readable [list GetData $chan]
</pre>

<h3><a name="M6">CREDITS</a></h3>

<b>fileevent</b> is based on the <b>addinput</b> command created by
Mark Diekhans. 

<h3><a name="M7">SEE ALSO</a></h3>

<b><a href="../TclCmd/fconfigure.htm">fconfigure</a></b>, <b><a
href="../TclCmd/gets.htm">gets</a></b>, <b><a href=
"../TclCmd/interp.htm">interp</a></b>, <b><a href=
"../TclCmd/puts.htm">puts</a></b>, <b><a href=
"../TclCmd/read.htm">read</a></b>, <b><a href=
"../TclLib/StdChannels.htm">Tcl_StandardChannels</a></b> 

<h3><a name="M8">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#asynchronous I/O">asynchronous I/O</a>,
<a href="../Keywords/B.htm#blocking">blocking</a>, <a href=
"../Keywords/C.htm#channel">channel</a>, <a href=
"../Keywords/E.htm#event handler">event handler</a>, <a href=
"../Keywords/N.htm#nonblocking">nonblocking</a>, <a href=
"../Keywords/R.htm#readable">readable</a>, <a href=
"../Keywords/S.htm#script">script</a>, <a href=
"../Keywords/W.htm#writable.">writable.</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1994 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

