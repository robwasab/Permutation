<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_Eval manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> Eval</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="Eval.htm#M2" name="L248">NAME</a> 

<dl>
<dd>Tcl_EvalObjEx, Tcl_EvalFile, Tcl_EvalObjv, Tcl_Eval,
Tcl_EvalEx, Tcl_GlobalEval, Tcl_GlobalEvalObj, Tcl_VarEval,
Tcl_VarEvalVA - execute Tcl scripts</dd>
</dl>
</dd>

<dd><a href="Eval.htm#M3" name="L249">SYNOPSIS</a></dd>

<dd><a href="Eval.htm#M4" name="L250">ARGUMENTS</a></dd>

<dd><a href="Eval.htm#M5" name="L251">DESCRIPTION</a></dd>

<dd><a href="Eval.htm#M6" name="L252">FLAG BITS</a> 

<dl class="flag bits">
<dd><a href="Eval.htm#M7" name=
"L253"><b>TCL_EVAL_DIRECT</b></a></dd>

<dd><a href="Eval.htm#M8" name=
"L254"><b>TCL_EVAL_GLOBAL</b></a></dd>
</dl>
</dd>

<dd><a href="Eval.htm#M9" name="L255">MISCELLANEOUS
DETAILS</a></dd>

<dd><a href="Eval.htm#M10" name="L256">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_EvalObjEx, Tcl_EvalFile, Tcl_EvalObjv, Tcl_Eval, Tcl_EvalEx,
Tcl_GlobalEval, Tcl_GlobalEvalObj, Tcl_VarEval, Tcl_VarEvalVA -
execute Tcl scripts 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
int<br>
<b>Tcl_EvalObjEx</b>(<i>interp, objPtr, flags</i>)<br>
int<br>
<b>Tcl_EvalFile</b>(<i>interp, fileName</i>)<br>
int<br>
<b>Tcl_EvalObjv</b>(<i>interp, objc, objv, flags</i>)<br>
int<br>
<b>Tcl_Eval</b>(<i>interp, script</i>)<br>
int<br>
<b>Tcl_EvalEx</b>(<i>interp, script, numBytes, flags</i>)<br>
int<br>
<b>Tcl_GlobalEval</b>(<i>interp, script</i>)<br>
int<br>
<b>Tcl_GlobalEvalObj</b>(<i>interp, objPtr</i>)<br>
int<br>
<b>Tcl_VarEval</b>(<i>interp, part, part, ...</i> <b>(char *)
NULL</b>)<br>
int<br>
<b>Tcl_VarEvalVA</b>(<i>interp, argList</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which to execute the script. The interpreter's
result is modified to hold the result or error message from the
script.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>A Tcl object containing the script to execute.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>ORed combination of flag bits that specify additional options.
<b>TCL_EVAL_GLOBAL</b> and <b>TCL_EVAL_DIRECT</b> are currently
supported.</dd>

<dt>const char <b>*fileName</b> (in)</dt>

<dd>Name of a file containing a Tcl script.</dd>

<dt>int <b>objc</b> (in)</dt>

<dd>The number of objects in the array pointed to by <i>objPtr</i>;
this is also the number of words in the command.</dd>

<dt>Tcl_Obj <b>**objv</b> (in)</dt>

<dd>Points to an array of pointers to objects; each object holds
the value of a single word in the command to execute.</dd>

<dt>int <b>numBytes</b> (in)</dt>

<dd>The number of bytes in <i>script</i>, not including any null
terminating character. If -1, then all characters up to the first
null byte are used.</dd>

<dt>const char <b>*script</b> (in)</dt>

<dd>Points to first byte of script to execute (null-terminated and
UTF-8).</dd>

<dt>char <b>*part</b> (in)</dt>

<dd>String forming part of a Tcl script.</dd>

<dt>va_list <b>argList</b> (in)</dt>

<dd>An argument list which must have been initialized using
<b>va_start</b>, and cleared using <b>va_end</b>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

The procedures described here are invoked to execute Tcl scripts in
various forms. <b>Tcl_EvalObjEx</b> is the core procedure and is
used by many of the others. It executes the commands in the script
stored in <i>objPtr</i> until either an error occurs or the end of
the script is reached. If this is the first time <i>objPtr</i> has
been executed, its commands are compiled into bytecode instructions
which are then executed. The bytecodes are saved in <i>objPtr</i>
so that the compilation step can be skipped if the object is
evaluated again in the future. 

<p>The return value from <b>Tcl_EvalObjEx</b> (and all the other
procedures described here) is a Tcl completion code with one of the
values <b>TCL_OK</b>, <b>TCL_ERROR</b>, <b>TCL_RETURN</b>,
<b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>, or possibly some other
integer value originating in an extension. In addition, a result
value or error message is left in <i>interp</i>'s result; it can be
retrieved using <b><a href=
"../TclLib/SetResult.htm">Tcl_GetObjResult</a></b>.</p>

<p><b>Tcl_EvalFile</b> reads the file given by <i>fileName</i> and
evaluates its contents as a Tcl script. It returns the same
information as <b>Tcl_EvalObjEx</b>. If the file could not be read
then a Tcl error is returned to describe why the file could not be
read. The eofchar for files is &ldquo;\32&rdquo; (^Z) for all
platforms. If you require a &ldquo;^Z&rdquo; in code for string
comparison, you can use &ldquo;\032&rdquo; or &ldquo;\u001a&rdquo;,
which will be safely substituted by the Tcl interpreter into
&ldquo;^Z&rdquo;.</p>

<p><b>Tcl_EvalObjv</b> executes a single pre-parsed command instead
of a script. The <i>objc</i> and <i>objv</i> arguments contain the
values of the words for the Tcl command, one word in each object in
<i>objv</i>. <b>Tcl_EvalObjv</b> evaluates the command and returns
a completion code and result just like <b>Tcl_EvalObjEx</b>. The
caller of <b>Tcl_EvalObjv</b> has to manage the reference count of
the elements of <i>objv</i>, insuring that the objects are valid
until <b>Tcl_EvalObjv</b> returns.</p>

<p><b>Tcl_Eval</b> is similar to <b>Tcl_EvalObjEx</b> except that
the script to be executed is supplied as a string instead of an
object and no compilation occurs. The string should be a proper
UTF-8 string as converted by <b><a href=
"../TclLib/Encoding.htm">Tcl_ExternalToUtfDString</a></b> or <b><a
href="../TclLib/Encoding.htm">Tcl_ExternalToUtf</a></b> when it is
known to possibly contain upper ASCII characters whose possible
combinations might be a UTF-8 special code. The string is parsed
and executed directly (using <b>Tcl_EvalObjv</b>) instead of
compiling it and executing the bytecodes. In situations where it is
known that the script will never be executed again, <b>Tcl_Eval</b>
may be faster than <b>Tcl_EvalObjEx</b>. <b>Tcl_Eval</b> returns a
completion code and result just like <b>Tcl_EvalObjEx</b>. Note:
for backward compatibility with versions before Tcl 8.0,
<b>Tcl_Eval</b> copies the object result in <i>interp</i> to
<i>interp-&gt;result</i> (use is deprecated) where it can be
accessed directly. This makes <b>Tcl_Eval</b> somewhat slower than
<b>Tcl_EvalEx</b>, which does not do the copy.</p>

<p><b>Tcl_EvalEx</b> is an extended version of <b>Tcl_Eval</b> that
takes additional arguments <i>numBytes</i> and <i>flags</i>. For
the efficiency reason given above, <b>Tcl_EvalEx</b> is generally
preferred over <b>Tcl_Eval</b>.</p>

<p><b>Tcl_GlobalEval</b> and <b>Tcl_GlobalEvalObj</b> are older
procedures that are now deprecated. They are similar to
<b>Tcl_EvalEx</b> and <b>Tcl_EvalObjEx</b> except that the script
is evaluated in the global namespace and its variable context
consists of global variables only (it ignores any Tcl procedures
that are active). These functions are equivalent to using the
<b>TCL_EVAL_GLOBAL</b> flag (see below).</p>

<p><b>Tcl_VarEval</b> takes any number of string arguments of any
length, concatenates them into a single string, then calls
<b>Tcl_Eval</b> to execute that string as a Tcl command. It returns
the result of the command and also modifies
<i>interp-&gt;result</i> in the same way as <b>Tcl_Eval</b>. The
last argument to <b>Tcl_VarEval</b> must be NULL to indicate the
end of arguments. <b>Tcl_VarEval</b> is now deprecated.</p>

<p><b>Tcl_VarEvalVA</b> is the same as <b>Tcl_VarEval</b> except
that instead of taking a variable number of arguments it takes an
argument list. Like <b>Tcl_VarEval</b>, <b>Tcl_VarEvalVA</b> is
deprecated.</p>

<h3><a name="M6">FLAG BITS</a></h3>

Any ORed combination of the following values may be used for the
<i>flags</i> argument to procedures such as <b>Tcl_EvalObjEx</b>: 

<dl class="flag bits">
<dt><a name="M7"><b>TCL_EVAL_DIRECT</b></a></dt>

<dd>This flag is only used by <b>Tcl_EvalObjEx</b>; it is ignored
by other procedures. If this flag bit is set, the script is not
compiled to bytecodes; instead it is executed directly as is done
by <b>Tcl_EvalEx</b>. The <b>TCL_EVAL_DIRECT</b> flag is useful in
situations where the contents of an object are going to change
immediately, so the bytecodes will not be reused in a future
execution. In this case, it is faster to execute the script
directly.</dd>

<dt><a name="M8"><b>TCL_EVAL_GLOBAL</b></a></dt>

<dd>If this flag is set, the script is processed at global level.
This means that it is evaluated in the global namespace and its
variable context consists of global variables only (it ignores any
Tcl procedures at are active).</dd>
</dl>

<h3><a name="M9">MISCELLANEOUS DETAILS</a></h3>

During the processing of a Tcl command it is legal to make nested
calls to evaluate other commands (this is how procedures and some
control structures are implemented). If a code other than
<b>TCL_OK</b> is returned from a nested <b>Tcl_EvalObjEx</b>
invocation, then the caller should normally return immediately,
passing that same return code back to its caller, and so on until
the top-level application is reached. A few commands, like <b><a
href="../TclCmd/for.htm">for</a></b>, will check for certain return
codes, like <b>TCL_BREAK</b> and <b>TCL_CONTINUE</b>, and process
them specially without returning. 

<p><b>Tcl_EvalObjEx</b> keeps track of how many nested
<b>Tcl_EvalObjEx</b> invocations are in progress for <i>interp</i>.
If a code of <b>TCL_RETURN</b>, <b>TCL_BREAK</b>, or
<b>TCL_CONTINUE</b> is about to be returned from the topmost
<b>Tcl_EvalObjEx</b> invocation for <i>interp</i>, it converts the
return code to <b>TCL_ERROR</b> and sets <i>interp</i>'s result to
an error message indicating that the <b><a href=
"../TclCmd/return.htm">return</a></b>, <b><a href=
"../TclCmd/break.htm">break</a></b>, or <b><a href=
"../TclCmd/continue.htm">continue</a></b> command was invoked in an
inappropriate place. This means that top-level applications should
never see a return code from <b>Tcl_EvalObjEx</b> other then
<b>TCL_OK</b> or <b>TCL_ERROR</b>.</p>

<h3><a name="M10">KEYWORDS</a></h3>

<a href="../Keywords/E.htm#execute">execute</a>, <a href=
"../Keywords/F.htm#file">file</a>, <a href=
"../Keywords/G.htm#global">global</a>, <a href=
"../Keywords/O.htm#object">object</a>, <a href=
"../Keywords/R.htm#result">result</a>, <a href=
"../Keywords/S.htm#script">script</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1997 Sun Microsystems, Inc.
Copyright &copy; 2000 Scriptics Corporation.</div>
</body>
</html>

