<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_TraceCommand manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> TraceCmd</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="TraceCmd.htm#M2" name="L758">NAME</a> 

<dl>
<dd>Tcl_CommandTraceInfo, Tcl_TraceCommand, Tcl_UntraceCommand -
monitor renames and deletes of a command</dd>
</dl>
</dd>

<dd><a href="TraceCmd.htm#M3" name="L759">SYNOPSIS</a></dd>

<dd><a href="TraceCmd.htm#M4" name="L760">ARGUMENTS</a></dd>

<dd><a href="TraceCmd.htm#M5" name="L761">DESCRIPTION</a> 

<dl class="description">
<dd><a href="TraceCmd.htm#M6" name=
"L762"><b>TCL_TRACE_RENAME</b></a></dd>

<dd><a href="TraceCmd.htm#M7" name=
"L763"><b>TCL_TRACE_DELETE</b></a></dd>
</dl>
</dd>

<dd><a href="TraceCmd.htm#M8" name="L764">CALLING COMMANDS DURING
TRACES</a></dd>

<dd><a href="TraceCmd.htm#M9" name="L765">MULTIPLE TRACES</a></dd>

<dd><a href="TraceCmd.htm#M10" name="L766">TCL_TRACE_DESTROYED
FLAG</a></dd>

<dd><a href="TraceCmd.htm#M11" name=
"L767">TCL_INTERP_DESTROYED</a></dd>

<dd><a href="TraceCmd.htm#M12" name="L768">BUGS</a></dd>

<dd><a href="TraceCmd.htm#M13" name="L769">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_CommandTraceInfo, Tcl_TraceCommand, Tcl_UntraceCommand -
monitor renames and deletes of a command 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
ClientData<br>
<b>Tcl_CommandTraceInfo(</b><i>interp, cmdName, flags, proc,
prevClientData</i><b>)</b><br>
int<br>
<b>Tcl_TraceCommand(</b><i>interp, cmdName, flags, proc,
clientData</i><b>)</b><br>
void<br>
<b>Tcl_UntraceCommand(</b><i>interp, cmdName, flags, proc,
clientData</i><b>)</b><br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter containing the command.</dd>

<dt>const char <b>*cmdName</b> (in)</dt>

<dd>Name of command.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>OR'ed collection of the values <b>TCL_TRACE_RENAME</b> and
<b>TCL_TRACE_DELETE</b>.</dd>

<dt>Tcl_CommandTraceProc <b>*proc</b> (in)</dt>

<dd>Procedure to call when specified operations occur to
<i>cmdName</i>.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary argument to pass to <i>proc</i>.</dd>

<dt>ClientData <b>prevClientData</b> (in)</dt>

<dd>If non-NULL, gives last value returned by
<b>Tcl_CommandTraceInfo</b>, so this call will return information
about next trace. If NULL, this call will return information about
first trace.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tcl_TraceCommand</b> allows a C procedure to monitor operations
performed on a Tcl command, so that the C procedure is invoked
whenever the command is renamed or deleted. If the trace is created
successfully then <b>Tcl_TraceCommand</b> returns <b>TCL_OK</b>. If
an error occurred (e.g. <i>cmdName</i> specifies a non-existent
command) then <b>TCL_ERROR</b> is returned and an error message is
left in the interpreter's result. 

<p>The <i>flags</i> argument to <b>Tcl_TraceCommand</b> indicates
when the trace procedure is to be invoked. It consists of an OR'ed
combination of any of the following values:</p>

<dl class="description">
<dt><a name="M6"><b>TCL_TRACE_RENAME</b></a></dt>

<dd>Invoke <i>proc</i> whenever the command is renamed.</dd>

<dt><a name="M7"><b>TCL_TRACE_DELETE</b></a></dt>

<dd>Invoke <i>proc</i> when the command is deleted.</dd>
</dl>

<p>Whenever one of the specified operations occurs to the command,
<i>proc</i> will be invoked. It should have arguments and result
that match the type <b>Tcl_CommandTraceProc</b>:</p>

<pre>
typedef void Tcl_CommandTraceProc(
        ClientData <i>clientData</i>,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
        const char *<i>oldName</i>,
        const char *<i>newName</i>,
        int <i>flags</i>);
</pre>

The <i>clientData</i> and <i>interp</i> parameters will have the
same values as those passed to <b>Tcl_TraceCommand</b> when the
trace was created. <i>ClientData</i> typically points to an
application-specific data structure that describes what to do when
<i>proc</i> is invoked. <i>OldName</i> gives the name of the
command being renamed, and <i>newName</i> gives the name that the
command is being renamed to (or an empty string or NULL when the
command is being deleted.) <i>Flags</i> is an OR'ed combination of
bits potentially providing several pieces of information. One of
the bits <b>TCL_TRACE_RENAME</b> and <b>TCL_TRACE_DELETE</b> will
be set in <i>flags</i> to indicate which operation is being
performed on the command. The bit <b>TCL_TRACE_DESTROYED</b> will
be set in <i>flags</i> if the trace is about to be destroyed; this
information may be useful to <i>proc</i> so that it can clean up
its own internal data structures (see the section
<b>TCL_TRACE_DESTROYED</b> below for more details). Lastly, the bit
<b>TCL_INTERP_DESTROYED</b> will be set if the entire interpreter
is being destroyed. When this bit is set, <i>proc</i> must be
especially careful in the things it does (see the section
<b>TCL_INTERP_DESTROYED</b> below). 

<p><b>Tcl_UntraceCommand</b> may be used to remove a trace. If the
command specified by <i>interp</i>, <i>cmdName</i>, and
<i>flags</i> has a trace set with <i>flags</i>, <i>proc</i>, and
<i>clientData</i>, then the corresponding trace is removed. If no
such trace exists, then the call to <b>Tcl_UntraceCommand</b> has
no effect. The same bits are valid for <i>flags</i> as for calls to
<b>Tcl_TraceCommand</b>.</p>

<p><b>Tcl_CommandTraceInfo</b> may be used to retrieve information
about traces set on a given command. The return value from
<b>Tcl_CommandTraceInfo</b> is the <i>clientData</i> associated
with a particular trace. The trace must be on the command specified
by the <i>interp</i>, <i>cmdName</i>, and <i>flags</i> arguments
(note that currently the flags are ignored; <i>flags</i> should be
set to 0 for future compatibility) and its trace procedure must the
same as the <i>proc</i> argument. If the <i>prevClientData</i>
argument is NULL then the return value corresponds to the first
(most recently created) matching trace, or NULL if there are no
matching traces. If the <i>prevClientData</i> argument is not NULL,
then it should be the return value from a previous call to
<b>Tcl_CommandTraceInfo</b>. In this case, the new return value
will correspond to the next matching trace after the one whose
<i>clientData</i> matches <i>prevClientData</i>, or NULL if no
trace matches <i>prevClientData</i> or if there are no more
matching traces after it. This mechanism makes it possible to step
through all of the traces for a given command that have the same
<i>proc</i>.</p>

<h3><a name="M8">CALLING COMMANDS DURING TRACES</a></h3>

During rename traces, the command being renamed is visible with
both names simultaneously, and the command still exists during
delete traces (if <b>TCL_INTERP_DESTROYED</b> is not set). However,
there is no mechanism for signaling that an error occurred in a
trace procedure, so great care should be taken that errors do not
get silently lost. 

<h3><a name="M9">MULTIPLE TRACES</a></h3>

It is possible for multiple traces to exist on the same command.
When this happens, all of the trace procedures will be invoked on
each access, in order from most-recently-created to
least-recently-created. Attempts to delete the command during a
delete trace will fail silently, since the command is already
scheduled for deletion anyway. If the command being renamed is
renamed by one of its rename traces, that renaming takes precedence
over the one that triggered the trace and the collection of traces
will not be reexecuted; if several traces rename the command, the
last renaming takes precedence. 

<h3><a name="M10">TCL_TRACE_DESTROYED FLAG</a></h3>

In a delete callback to <i>proc</i>, the <b>TCL_TRACE_DESTROYED</b>
bit is set in <i>flags</i>. 

<h3><a name="M11">TCL_INTERP_DESTROYED</a></h3>

When an interpreter is destroyed, unset traces are called for all
of its commands. The <b>TCL_INTERP_DESTROYED</b> bit will be set in
the <i>flags</i> argument passed to the trace procedures. Trace
procedures must be extremely careful in what they do if the
<b>TCL_INTERP_DESTROYED</b> bit is set. It is not safe for the
procedures to invoke any Tcl procedures on the interpreter, since
its state is partially deleted. All that trace procedures should do
under these circumstances is to clean up and free their own
internal data structures. 

<h3><a name="M12">BUGS</a></h3>

Tcl does not do any error checking to prevent trace procedures from
misusing the interpreter during traces with
<b>TCL_INTERP_DESTROYED</b> set. 

<h3><a name="M13">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#clientData">clientData</a>, <a href=
"../Keywords/T.htm#trace">trace</a>, <a href=
"../Keywords/C.htm#command">command</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2002 Donal K. Fellows</div>
</body>
</html>

