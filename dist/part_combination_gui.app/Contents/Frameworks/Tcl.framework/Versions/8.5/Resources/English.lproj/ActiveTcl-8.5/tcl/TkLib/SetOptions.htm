<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_SetOptions manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> SetOptions</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="SetOptions.htm#M2" name="L550">NAME</a> 

<dl>
<dd>Tk_CreateOptionTable, Tk_DeleteOptionTable, Tk_InitOptions,
Tk_SetOptions, Tk_FreeSavedOptions, Tk_RestoreSavedOptions,
Tk_GetOptionValue, Tk_GetOptionInfo, Tk_FreeConfigOptions,
Tk_Offset - process configuration options</dd>
</dl>
</dd>

<dd><a href="SetOptions.htm#M3" name="L551">SYNOPSIS</a></dd>

<dd><a href="SetOptions.htm#M4" name="L552">ARGUMENTS</a></dd>

<dd><a href="SetOptions.htm#M5" name="L553">DESCRIPTION</a></dd>

<dd><a href="SetOptions.htm#M6" name="L554">TEMPLATES</a> 

<dl class="templates">
<dd><a href="SetOptions.htm#M7" name=
"L555"><b>TK_OPTION_ANCHOR</b></a></dd>

<dd><a href="SetOptions.htm#M8" name=
"L556"><b>TK_OPTION_BITMAP</b></a></dd>

<dd><a href="SetOptions.htm#M9" name=
"L557"><b>TK_OPTION_BOOLEAN</b></a></dd>

<dd><a href="SetOptions.htm#M10" name=
"L558"><b>TK_OPTION_BORDER</b></a></dd>

<dd><a href="SetOptions.htm#M11" name=
"L559"><b>TK_OPTION_COLOR</b></a></dd>

<dd><a href="SetOptions.htm#M12" name=
"L560"><b>TK_OPTION_CURSOR</b></a></dd>

<dd><a href="SetOptions.htm#M13" name=
"L561"><b>TK_OPTION_CUSTOM</b></a></dd>

<dd><a href="SetOptions.htm#M14" name=
"L562"><b>TK_OPTION_DOUBLE</b></a></dd>

<dd><a href="SetOptions.htm#M15" name=
"L563"><b>TK_OPTION_END</b></a></dd>

<dd><a href="SetOptions.htm#M16" name=
"L564"><b>TK_OPTION_FONT</b></a></dd>

<dd><a href="SetOptions.htm#M17" name=
"L565"><b>TK_OPTION_INT</b></a></dd>

<dd><a href="SetOptions.htm#M18" name=
"L566"><b>TK_OPTION_JUSTIFY</b></a></dd>

<dd><a href="SetOptions.htm#M19" name=
"L567"><b>TK_OPTION_PIXELS</b></a></dd>

<dd><a href="SetOptions.htm#M20" name=
"L568"><b>TK_OPTION_RELIEF</b></a></dd>

<dd><a href="SetOptions.htm#M21" name=
"L569"><b>TK_OPTION_STRING</b></a></dd>

<dd><a href="SetOptions.htm#M22" name=
"L570"><b>TK_OPTION_STRING_TABLE</b></a></dd>

<dd><a href="SetOptions.htm#M23" name=
"L571"><b>TK_OPTION_SYNONYM</b></a></dd>

<dd><a href="SetOptions.htm#M24" name=
"L572"><b>TK_OPTION_WINDOW</b></a></dd>
</dl>
</dd>

<dd><a href="SetOptions.htm#M25" name="L573">STORAGE MANAGEMENT
ISSUES</a></dd>

<dd><a href="SetOptions.htm#M26" name="L574">OBJOFFSET VS.
INTERNALOFFSET</a></dd>

<dd><a href="SetOptions.htm#M27" name="L575">CUSTOM OPTION
TYPES</a> 

<dl class="custom option types">
<dd><a href="SetOptions.htm#M28" name=
"L576"><i>clientData</i></a></dd>

<dd><a href="SetOptions.htm#M29" name="L577"><i>interp</i></a></dd>

<dd><a href="SetOptions.htm#M30" name="L578"><i>Tkwin</i></a></dd>

<dd><a href="SetOptions.htm#M31" name=
"L579"><i>valuePtr</i></a></dd>

<dd><a href="SetOptions.htm#M32" name=
"L580"><i>recordPtr</i></a></dd>

<dd><a href="SetOptions.htm#M33" name=
"L581"><i>internalOffset</i></a></dd>

<dd><a href="SetOptions.htm#M34" name=
"L582"><i>saveInternalPtr</i></a></dd>

<dd><a href="SetOptions.htm#M35" name="L583"><i>flags</i></a></dd>
</dl>
</dd>

<dd><a href="SetOptions.htm#M36" name="L584">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tk_CreateOptionTable, Tk_DeleteOptionTable, Tk_InitOptions,
Tk_SetOptions, Tk_FreeSavedOptions, Tk_RestoreSavedOptions,
Tk_GetOptionValue, Tk_GetOptionInfo, Tk_FreeConfigOptions,
Tk_Offset - process configuration options 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
Tk_OptionTable<br>
<b>Tk_CreateOptionTable(</b><i>interp, templatePtr</i><b>)</b><br>
<b>Tk_DeleteOptionTable(</b><i>optionTable</i><b>)</b><br>
int<br>
<b>Tk_InitOptions(</b><i>interp, recordPtr, optionTable,
tkwin</i><b>)</b><br>
int<br>
<b>Tk_SetOptions(</b><i>interp, recordPtr, optionTable, objc, objv,
tkwin, savePtr, maskPtr</i><b>)</b><br>
<b>Tk_FreeSavedOptions(</b><i>savedPtr</i><b>)</b><br>
<b>Tk_RestoreSavedOptions(</b><i>savedPtr</i><b>)</b><br>
Tcl_Obj *<br>
<b>Tk_GetOptionValue(</b><i>interp, recordPtr, optionTable,
namePtr, tkwin</i><b>)</b><br>
Tcl_Obj *<br>
<b>Tk_GetOptionInfo(</b><i>interp, recordPtr, optionTable, namePtr,
tkwin</i><b>)</b><br>
<b>Tk_FreeConfigOptions(</b><i>recordPtr, optionTable,
tkwin</i><b>)</b><br>
int<br>
<b>Tk_Offset(</b><i>type, field</i><b>)</b><br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>A Tcl interpreter. Most procedures use this only for returning
error messages; if it is NULL then no error messages are returned.
For <b>Tk_CreateOptionTable</b> the value cannot be NULL; it gives
the interpreter in which the option table will be used.</dd>

<dt>const Tk_OptionSpec <b>*templatePtr</b> (in)</dt>

<dd>Points to an array of static information that describes the
configuration options that are supported. Used to build a
Tk_OptionTable. The information pointed to by this argument must
exist for the lifetime of the Tk_OptionTable.</dd>

<dt>Tk_OptionTable <b>optionTable</b> (in)</dt>

<dd>Token for an option table. Must have been returned by a
previous call to <b>Tk_CreateOptionTable</b>.</dd>

<dt>char <b>*recordPtr</b> (in/out)</dt>

<dd>Points to structure in which values of configuration options
are stored; fields of this record are modified by procedures such
as <b>Tk_SetOptions</b> and read by procedures such as
<b>Tk_GetOptionValue</b>.</dd>

<dt>Tk_Window <b>tkwin</b> (in)</dt>

<dd>For options such as <b>TK_OPTION_COLOR</b>, this argument
indicates the window in which the option will be used. If
<i>optionTable</i> uses no window-dependent options, then a NULL
value may be supplied for this argument.</dd>

<dt>int <b>objc</b> (in)</dt>

<dd>Number of values in <i>objv</i>.</dd>

<dt>Tcl_Obj <b>*const objv[]</b> (in)</dt>

<dd>Command-line arguments for setting configuring options.</dd>

<dt>Tk_SavedOptions <b>*savePtr</b> (out)</dt>

<dd>If not NULL, the structure pointed to by this argument is
filled in with the old values of any options that were modified and
old values are restored automatically if an error occurs in
<b>Tk_SetOptions</b>.</dd>

<dt>int <b>*maskPtr</b> (out)</dt>

<dd>If not NULL, the word pointed to by <i>maskPtr</i> is filled in
with the bit-wise OR of the <i>typeMask</i> fields for the options
that were modified.</dd>

<dt>Tk_SavedOptions <b>*savedPtr</b> (in/out)</dt>

<dd>Points to a structure previously filled in by
<b>Tk_SetOptions</b> with old values of modified options.</dd>

<dt>Tcl_Obj <b>*namePtr</b> (in)</dt>

<dd>The value of this object is the name of a particular option. If
NULL is passed to <b>Tk_GetOptionInfo</b> then information is
returned for all options. Must not be NULL when
<b>Tk_GetOptionValue</b> is called.</dd>

<dt>type name <b>type</b> (in)</dt>

<dd>The name of the type of a record.</dd>

<dt>field name <b>field</b> (in)</dt>

<dd>The name of a field in records of type <i>type</i>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

These procedures handle most of the details of parsing
configuration options such as those for Tk widgets. Given a
description of what options are supported, these procedures handle
all the details of parsing options and storing their values into a
C structure associated with the widget or object. The procedures
were designed primarily for widgets in Tk, but they can also be
used for other kinds of objects that have configuration options. In
the rest of this manual page &ldquo;widget&rdquo; will be used to
refer to the object whose options are being managed; in practice
the object may not actually be a widget. The term &ldquo;widget
record&rdquo; is used to refer to the C-level structure in which
information about a particular widget or object is stored. 

<p>Note: the easiest way to learn how to use these procedures is to
look at a working example. In Tk, the simplest example is the code
that implements the button family of widgets, which is in
<b>tkButton.c</b>. Other examples are in <b>tkSquare.c</b> and
<b>tkMenu.c</b>.</p>

<p>In order to use these procedures, the code that implements the
widget must contain a static array of Tk_OptionSpec structures.
This is a template that describes the various options supported by
that class of widget; there is a separate template for each kind of
widget. The template contains information such as the name of each
option, its type, its default value, and where the value of the
option is stored in the widget record. See TEMPLATES below for more
detail.</p>

<p>In order to process configuration options efficiently, the
static template must be augmented with additional information that
is available only at runtime. The procedure
<b>Tk_CreateOptionTable</b> creates this dynamic information from
the template and returns a Tk_OptionTable token that describes both
the static and dynamic information. All of the other procedures,
such as <b>Tk_SetOptions</b>, take a Tk_OptionTable token as
argument. Typically, <b>Tk_CreateOptionTable</b> is called the
first time that a widget of a particular class is created and the
resulting Tk_OptionTable is used in the future for all widgets of
that class. A Tk_OptionTable may be used only in a single
interpreter, given by the <i>interp</i> argument to
<b>Tk_CreateOptionTable</b>. When an option table is no longer
needed <b>Tk_DeleteOptionTable</b> should be called to free all of
its resources. All of the option tables for a Tcl interpreter are
freed automatically if the interpreter is deleted.</p>

<p><b>Tk_InitOptions</b> is invoked when a new widget is created to
set the default values for all of the widget's configuration
options. <b>Tk_InitOptions</b> is passed a token for an option
table (<i>optionTable</i>) and a pointer to a widget record
(<i>recordPtr</i>), which is the C structure that holds information
about this widget. <b>Tk_InitOptions</b> uses the information in
the option table to choose an appropriate default for each option,
then it stores the default value directly into the widget record,
overwriting any information that was already present in the widget
record. <b>Tk_InitOptions</b> normally returns <b>TCL_OK</b>. If an
error occurred while setting the default values (e.g., because a
default value was erroneous) then <b>TCL_ERROR</b> is returned and
an error message is left in <i>interp</i>'s result if <i>interp</i>
is not NULL.</p>

<p><b>Tk_SetOptions</b> is invoked to modify configuration options
based on information specified in a Tcl command. The command might
be one that creates a new widget, or a command that modifies
options on an existing widget. The <i>objc</i> and <i>objv</i>
arguments describe the values of the arguments from the Tcl
command. <i>Objv</i> must contain an even number of objects: the
first object of each pair gives the name of an option and the
second object gives the new value for that option.
<b>Tk_SetOptions</b> looks up each name in <i>optionTable</i>,
checks that the new value of the option conforms to the type in
<i>optionTable</i>, and stores the value of the option into the
widget record given by <i>recordPtr</i>. <b>Tk_SetOptions</b>
normally returns <b>TCL_OK</b>. If an error occurred (such as an
unknown option name or an illegal option value) then
<b>TCL_ERROR</b> is returned and an error message is left in
<i>interp</i>'s result if <i>interp</i> is not NULL.</p>

<p><b>Tk_SetOptions</b> has two additional features. First, if the
<i>maskPtr</i> argument is not NULL then it points to an integer
value that is filled in with information about the options that
were modified. For each option in the template passed to
<b>Tk_CreateOptionTable</b> there is a <i>typeMask</i> field. The
bits of this field are defined by the code that implements the
widget; for example, each bit might correspond to a particular
configuration option. Alternatively, bits might be used
functionally. For example, one bit might be used for redisplay: all
options that affect the widget's display, such that changing the
option requires the widget to be redisplayed, might have that bit
set. Another bit might indicate that the geometry of the widget
must be recomputed, and so on. <b>Tk_SetOptions</b> OR's together
the <i>typeMask</i> fields from all the options that were modified
and returns this value at *<i>maskPtr</i>; the caller can then use
this information to optimize itself so that, for example, it does
not redisplay the widget if the modified options do not affect the
widget's appearance.</p>

<p>The second additional feature of <b>Tk_SetOptions</b> has to do
with error recovery. If an error occurs while processing
configuration options, this feature makes it possible to restore
all the configuration options to their previous values. Errors can
occur either while processing options in <b>Tk_SetOptions</b> or
later in the caller. In many cases the caller does additional
processing after <b>Tk_SetOptions</b> returns; for example, it
might use an option value to set a trace on a variable and may
detect an error if the variable is an array instead of a scalar.
Error recovery is enabled by passing in a non-NULL value for the
<i>savePtr</i> argument to <b>Tk_SetOptions</b>; this should be a
pointer to an uninitialized Tk_SavedOptions structure on the
caller's stack. <b>Tk_SetOptions</b> overwrites the structure
pointed to by <i>savePtr</i> with information about the old values
of any options modified by the procedure. If <b>Tk_SetOptions</b>
returns successfully, the caller uses the structure in one of two
ways. If the caller completes its processing of the new options
without any errors, then it must pass the structure to
<b>Tk_FreeSavedOptions</b> so that the old values can be freed. If
the caller detects an error in its processing of the new options,
then it should pass the structure to <b>Tk_RestoreSavedOptions</b>,
which will copy the old values back into the widget record and free
the new values. If <b>Tk_SetOptions</b> detects an error then it
automatically restores any options that had already been modified
and leaves *<i>savePtr</i> in an empty state: the caller need not
call either <b>Tk_FreeSavedOptions</b> or
<b>Tk_RestoreSavedOptions</b>. If the <i>savePtr</i> argument to
<b>Tk_SetOptions</b> is NULL then <b>Tk_SetOptions</b> frees each
old option value immediately when it sets a new value for the
option. In this case, if an error occurs in the third option, the
old values for the first two options cannot be restored.</p>

<p><b>Tk_GetOptionValue</b> returns the current value of a
configuration option for a particular widget. The <i>namePtr</i>
argument contains the name of an option; <b>Tk_GetOptionValue</b>
uses <i>optionTable</i> to lookup the option and extract its value
from the widget record pointed to by <i>recordPtr</i>, then it
returns an object containing that value. If an error occurs (e.g.,
because <i>namePtr</i> contains an unknown option name) then NULL
is returned and an error message is left in <i>interp</i>'s result
unless <i>interp</i> is NULL.</p>

<p><b>Tk_GetOptionInfo</b> returns information about configuration
options in a form suitable for <b>configure</b> widget commands. If
the <i>namePtr</i> argument is not NULL, it points to an object
that gives the name of a configuration option;
<b>Tk_GetOptionInfo</b> returns an object containing a list with
five elements, which are the name of the option, the name and class
used for the option in the option database, the default value for
the option, and the current value for the option. If the
<i>namePtr</i> argument is NULL, then <b>Tk_GetOptionInfo</b>
returns information about all options in the form of a list of
lists; each sublist describes one option. Synonym options are
handled differently depending on whether <i>namePtr</i> is NULL: if
<i>namePtr</i> is NULL then the sublist for each synonym option has
only two elements, which are the name of the option and the name of
the other option that it refers to; if <i>namePtr</i> is non-NULL
and names a synonym option then the object returned is the
five-element list for the other option that the synonym refers to.
If an error occurs (e.g., because <i>namePtr</i> contains an
unknown option name) then NULL is returned and an error message is
left in <i>interp</i>'s result unless <i>interp</i> is NULL.</p>

<p><b>Tk_FreeConfigOptions</b> must be invoked when a widget is
deleted. It frees all of the resources associated with any of the
configuration options defined in <i>recordPtr</i> by
<i>optionTable</i>.</p>

<p>The <b>Tk_Offset</b> macro is provided as a safe way of
generating the <i>objOffset</i> and <i>internalOffset</i> values
for entries in Tk_OptionSpec structures. It takes two arguments:
the name of a type of record, and the name of a field in that
record. It returns the byte offset of the named field in records of
the given type.</p>

<h3><a name="M6">TEMPLATES</a></h3>

The array of Tk_OptionSpec structures passed to
<b>Tk_CreateOptionTable</b> via its <i>templatePtr</i> argument
describes the configuration options supported by a particular class
of widgets. Each structure specifies one configuration option and
has the following fields: 

<pre>
typedef struct {
    Tk_OptionType <i>type</i>;
    const char *<i>optionName</i>;
    const char *<i>dbName</i>;
    const char *<i>dbClass</i>;
    const char *<i>defValue</i>;
    int <i>objOffset</i>;
    int <i>internalOffset</i>;
    int <i>flags</i>;
    ClientData <i>clientData</i>;
    int <i>typeMask</i>;
} <b>Tk_OptionSpec</b>;
</pre>

The <i>type</i> field indicates what kind of configuration option
this is (e.g. <b>TK_OPTION_COLOR</b> for a color value, or
<b>TK_OPTION_INT</b> for an integer value). <i>Type</i> determines
how the value of the option is parsed (more on this below). The
<i>optionName</i> field is a string such as <b>-font</b> or
<b>-bg</b>; it is the name used for the option in Tcl commands and
passed to procedures via the <i>objc</i> or <i>namePtr</i>
arguments. The <i>dbName</i> and <i>dbClass</i> fields are used by
<b>Tk_InitOptions</b> to look up a default value for this option in
the option database; if <i>dbName</i> is NULL then the option
database is not used by <b>Tk_InitOptions</b> for this option. The
<i>defValue</i> field specifies a default value for this
configuration option if no value is specified in the option
database. The <i>objOffset</i> and <i>internalOffset</i> fields
indicate where to store the value of this option in widget records
(more on this below); values for the <i>objOffset</i> and
<i>internalOffset</i> fields should always be generated with the
<b>Tk_Offset</b> macro. The <i>flags</i> field contains additional
information to control the processing of this configuration option
(see below for details). <i>ClientData</i> provides additional
type-specific data needed by certain types. For instance, for
<b>TK_OPTION_COLOR</b> types, <i>clientData</i> is a string giving
the default value to use on monochrome displays. See the
descriptions of the different types below for details. The last
field, <i>typeMask</i>, is used by <b>Tk_SetOptions</b> to return
information about which options were modified; see the description
of <b>Tk_SetOptions</b> above for details. 

<p>When <b>Tk_InitOptions</b> and <b>Tk_SetOptions</b> store the
value of an option into the widget record, they can do it in either
of two ways. If the <i>objOffset</i> field of the Tk_OptionSpec is
greater than or equal to zero, then the value of the option is
stored as a (Tcl_Obj *) at the location in the widget record given
by <i>objOffset</i>. If the <i>internalOffset</i> field of the
Tk_OptionSpec is greater than or equal to zero, then the value of
the option is stored in a type-specific internal form at the
location in the widget record given by <i>internalOffset</i>. For
example, if the option's type is <b>TK_OPTION_INT</b> then the
internal form is an integer. If the <i>objOffset</i> or
<i>internalOffset</i> field is negative then the value is not
stored in that form. At least one of the offsets must be greater
than or equal to zero.</p>

<p>The <i>flags</i> field consists of one or more bits ORed
together. At present only a single flag is supported:
<b>TK_OPTION_NULL_OK</b>. If this bit is set for an option then an
empty string will be accepted as the value for the option and the
resulting internal form will be a NULL pointer, a zero value, or
<b>None</b>, depending on the type of the option. If the flag is
not set then empty strings will result in errors.
<b>TK_OPTION_NULL_OK</b> is typically used to allow a feature to be
turned off entirely, e.g. set a cursor value to <b>None</b> so that
a window simply inherits its parent's cursor. Not all option types
support the <b>TK_OPTION_NULL_OK</b> flag; for those that do, there
is an explicit indication of that fact in the descriptions
below.</p>

<p>The <i>type</i> field of each Tk_OptionSpec structure determines
how to parse the value of that configuration option. The legal
value for <i>type</i>, and the corresponding actions, are described
below. If the type requires a <i>tkwin</i> value to be passed into
procedures like <b>Tk_SetOptions</b>, or if it uses the
<i>clientData</i> field of the Tk_OptionSpec, then it is indicated
explicitly; if not mentioned, the type requires neither
<i>tkwin</i> nor <i>clientData</i>.</p>

<dl class="templates">
<dt><a name="M7"><b>TK_OPTION_ANCHOR</b></a></dt>

<dd>The value must be a standard anchor position such as <b>ne</b>
or <b>center</b>. The internal form is a Tk_Anchor value like the
ones returned by <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchorFromObj</a></b>.</dd>

<dt><a name="M8"><b>TK_OPTION_BITMAP</b></a></dt>

<dd>The value must be a standard Tk bitmap name. The internal form
is a Pixmap token like the ones returned by <b><a href=
"../TkLib/GetBitmap.htm">Tk_AllocBitmapFromObj</a></b>. This option
type requires <i>tkwin</i> to be supplied to procedures such as
<b>Tk_SetOptions</b>, and it supports the <b>TK_OPTION_NULL_OK</b>
flag.</dd>

<dt><a name="M9"><b>TK_OPTION_BOOLEAN</b></a></dt>

<dd>The value must be a standard boolean value such as <b>true</b>
or <b>no</b>. The internal form is an integer with value 0 or
1.</dd>

<dt><a name="M10"><b>TK_OPTION_BORDER</b></a></dt>

<dd>The value must be a standard color name such as <b>red</b> or
<b>#ff8080</b>. The internal form is a Tk_3DBorder token like the
ones returned by <b><a href=
"../TkLib/3DBorder.htm">Tk_Alloc3DBorderFromObj</a></b>. This
option type requires <i>tkwin</i> to be supplied to procedures such
as <b>Tk_SetOptions</b>, and it supports the
<b>TK_OPTION_NULL_OK</b> flag.</dd>

<dt><a name="M11"><b>TK_OPTION_COLOR</b></a></dt>

<dd>The value must be a standard color name such as <b>red</b> or
<b>#ff8080</b>. The internal form is an (XColor *) token like the
ones returned by <b><a href=
"../TkLib/GetColor.htm">Tk_AllocColorFromObj</a></b>. This option
type requires <i>tkwin</i> to be supplied to procedures such as
<b>Tk_SetOptions</b>, and it supports the <b>TK_OPTION_NULL_OK</b>
flag.</dd>

<dt><a name="M12"><b>TK_OPTION_CURSOR</b></a></dt>

<dd>The value must be a standard cursor name such as <b>cross</b>
or <b>@foo</b>. The internal form is a Tk_Cursor token like the
ones returned by <b><a href=
"../TkLib/GetCursor.htm">Tk_AllocCursorFromObj</a></b>. This option
type requires <i>tkwin</i> to be supplied to procedures such as
<b>Tk_SetOptions</b>, and when the option is set the cursor for the
window is changed by calling <b>XDefineCursor</b>. This option type
also supports the <b>TK_OPTION_NULL_OK</b> flag.</dd>

<dt><a name="M13"><b>TK_OPTION_CUSTOM</b></a></dt>

<dd>This option allows applications to define new option types. The
clientData field of the entry points to a structure defining the
new option type. See the section <b>CUSTOM OPTION TYPES</b> below
for details.</dd>

<dt><a name="M14"><b>TK_OPTION_DOUBLE</b></a></dt>

<dd>The string value must be a floating-point number in the format
accepted by <b>strtol</b>. The internal form is a C <b>double</b>
value. This option type supports the <b>TK_OPTION_NULL_OK</b> flag;
if a NULL value is set, the internal representation is set to
zero.</dd>

<dt><a name="M15"><b>TK_OPTION_END</b></a></dt>

<dd>Marks the end of the template. There must be a Tk_OptionSpec
structure with <i>type</i> <b>TK_OPTION_END</b> at the end of each
template. If the <i>clientData</i> field of this structure is not
NULL, then it points to an additional array of Tk_OptionSpec's,
which is itself terminated by another <b>TK_OPTION_END</b> entry.
Templates may be chained arbitrarily deeply. This feature allows
common options to be shared by several widget classes.</dd>

<dt><a name="M16"><b>TK_OPTION_FONT</b></a></dt>

<dd>The value must be a standard font name such as <b>Times 16</b>.
The internal form is a Tk_Font handle like the ones returned by
<b><a href="../TkLib/GetFont.htm">Tk_AllocFontFromObj</a></b>. This
option type requires <i>tkwin</i> to be supplied to procedures such
as <b>Tk_SetOptions</b>, and it supports the
<b>TK_OPTION_NULL_OK</b> flag.</dd>

<dt><a name="M17"><b>TK_OPTION_INT</b></a></dt>

<dd>The string value must be an integer in the format accepted by
<b>strtol</b> (e.g. <b>0</b> and <b>0x</b> prefixes may be used to
specify octal or hexadecimal numbers, respectively). The internal
form is a C <b>int</b> value.</dd>

<dt><a name="M18"><b>TK_OPTION_JUSTIFY</b></a></dt>

<dd>The value must be a standard justification value such as
<b>left</b>. The internal form is a Tk_Justify like the values
returned by <b><a href=
"../TkLib/GetJustify.htm">Tk_GetJustifyFromObj</a></b>.</dd>

<dt><a name="M19"><b>TK_OPTION_PIXELS</b></a></dt>

<dd>The value must specify a screen distance such as <b>2i</b> or
<b>6.4</b>. The internal form is an integer value giving a distance
in pixels, like the values returned by <b><a href=
"../TkLib/GetPixels.htm">Tk_GetPixelsFromObj</a></b>. Note: if the
<i>objOffset</i> field is not used then information about the
original value of this option will be lost. See <b>OBJOFFSET VS.
INTERNALOFFSET</b> below for details. This option type supports the
<b>TK_OPTION_NULL_OK</b> flag; if a NULL value is set, the internal
representation is set to zero.</dd>

<dt><a name="M20"><b>TK_OPTION_RELIEF</b></a></dt>

<dd>The value must be standard relief such as <b>raised</b>. The
internal form is an integer relief value such as
<b>TK_RELIEF_RAISED</b>. This option type supports the
<b>TK_OPTION_NULL_OK</b> flag; if the empty string is specified as
the value for the option, the integer relief value is set to
<b>TK_RELIEF_NULL</b>.</dd>

<dt><a name="M21"><b>TK_OPTION_STRING</b></a></dt>

<dd>The value may be any string. The internal form is a (char *)
pointer that points to a dynamically allocated copy of the value.
This option type supports the <b>TK_OPTION_NULL_OK</b> flag.</dd>

<dt><a name="M22"><b>TK_OPTION_STRING_TABLE</b></a></dt>

<dd>For this type, <i>clientData</i> is a pointer to an array of
strings suitable for passing to <b><a href=
"../TclLib/GetIndex.htm">Tcl_GetIndexFromObj</a></b>. The value
must be one of the strings in the table, or a unique abbreviation
of one of the strings. The internal form is an integer giving the
index into the table of the matching string, like the return value
from <b><a href=
"../TclLib/StringObj.htm">Tcl_GetStringFromObj</a></b>.</dd>

<dt><a name="M23"><b>TK_OPTION_SYNONYM</b></a></dt>

<dd>This type is used to provide alternative names for an option
(for example, <b>-bg</b> is often used as a synonym for
<b>-background</b>). The <b>clientData</b> field is a string that
gives the name of another option in the same table. Whenever the
synonym option is used, the information from the other option will
be used instead.</dd>

<dt><a name="M24"><b>TK_OPTION_WINDOW</b></a></dt>

<dd>The value must be a window path name. The internal form is a
<b>Tk_Window</b> token for the window. This option type requires
<i>tkwin</i> to be supplied to procedures such as
<b>Tk_SetOptions</b> (in order to identify the application), and it
supports the <b>TK_OPTION_NULL_OK</b> flag.</dd>
</dl>

<h3><a name="M25">STORAGE MANAGEMENT ISSUES</a></h3>

If a field of a widget record has its offset stored in the
<i>objOffset</i> or <i>internalOffset</i> field of a Tk_OptionSpec
structure then the procedures described here will handle all of the
storage allocation and resource management issues associated with
the field. When the value of an option is changed,
<b>Tk_SetOptions</b> (or <b>Tk_FreeSavedOptions</b>) will
automatically free any resources associated with the old value,
such as Tk_Fonts for <b>TK_OPTION_FONT</b> options or dynamically
allocated memory for <b>TK_OPTION_STRING</b> options. For an option
stored as an object using the <i>objOffset</i> field of a
Tk_OptionSpec, the widget record shares the object pointed to by
the <i>objv</i> value from the call to <b>Tk_SetOptions</b>. The
reference count for this object is incremented when a pointer to it
is stored in the widget record and decremented when the option is
modified. When the widget is deleted <b>Tk_FreeConfigOptions</b>
should be invoked; it will free the resources associated with all
options and decrement reference counts for any objects. 

<p>However, the widget code is responsible for storing NULL or
<b>None</b> in all pointer and token fields before invoking
<b>Tk_InitOptions</b>. This is needed to allow proper cleanup in
the rare case where an error occurs in <b>Tk_InitOptions</b>.</p>

<h3><a name="M26">OBJOFFSET VS. INTERNALOFFSET</a></h3>

In most cases it is simplest to use the <i>internalOffset</i> field
of a Tk_OptionSpec structure and not the <i>objOffset</i> field.
This makes the internal form of the value immediately available to
the widget code so the value does not have to be extracted from an
object each time it is used. However, there are two cases where the
<i>objOffset</i> field is useful. The first case is for
<b>TK_OPTION_PIXELS</b> options. In this case, the internal form is
an integer pixel value that is valid only for a particular screen.
If the value of the option is retrieved, it will be returned as a
simple number. For example, after the command <b>.b configure
-borderwidth 2m</b>, the command <b>.b configure -borderwidth</b>
might return 7, which is the integer pixel value corresponding to
<b>2m</b>. Unfortunately, this loses the original
screen-independent value. Thus for <b>TK_OPTION_PIXELS</b> options
it is better to use the <i>objOffset</i> field. In this case the
original value of the option is retained in the object and can be
returned when the option is retrieved. In most cases it is
convenient to use the <i>internalOffset</i> field as well, so that
the integer value is immediately available for use in the widget
code (alternatively, <b><a href=
"../TkLib/GetPixels.htm">Tk_GetPixelsFromObj</a></b> can be used to
extract the integer value from the object whenever it is needed).
Note: the problem of losing information on retrievals exists only
for <b>TK_OPTION_PIXELS</b> options. 

<p>The second reason to use the <i>objOffset</i> field is in order
to implement new types of options not supported by these
procedures. To implement a new type of option, you can use
<b>TK_OPTION_STRING</b> as the type in the Tk_OptionSpec structure
and set the <i>objOffset</i> field but not the
<i>internalOffset</i> field. Then, after calling
<b>Tk_SetOptions</b>, convert the object to internal form
yourself.</p>

<h3><a name="M27">CUSTOM OPTION TYPES</a></h3>

Applications can extend the built-in configuration types with
additional configuration types by writing procedures to parse,
print, free, and restore saved copies of the type and creating a
structure pointing to those procedures: 

<pre>
typedef struct Tk_ObjCustomOption {
    char *name;
    Tk_CustomOptionSetProc *<i>setProc</i>;
    Tk_CustomOptionGetProc *<i>getProc</i>;
    Tk_CustomOptionRestoreProc *<i>restoreProc</i>;
    Tk_CustomOptionFreeProc *<i>freeProc</i>;
    ClientData <i>clientData</i>;
} <b>Tk_ObjCustomOption</b>;

typedef int <b>Tk_CustomOptionSetProc</b>(
    ClientData <i>clientData</i>,
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tk_Window <i>tkwin</i>,
    Tcl_Obj **<i>valuePtr</i>,
    char *<i>recordPtr</i>,
    int <i>internalOffset</i>,
    char *<i>saveInternalPtr</i>,
    int <i>flags</i>);

typedef Tcl_Obj *<b>Tk_CustomOptionGetProc</b>(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>recordPtr</i>,
    int <i>internalOffset</i>);

typedef void <b>Tk_CustomOptionRestoreProc</b>(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>internalPtr</i>,
    char *<i>saveInternalPtr</i>);

typedef void <b>Tk_CustomOptionFreeProc</b>(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>internalPtr</i>);
</pre>

<p>The Tk_ObjCustomOption structure contains six fields: a name for
the custom option type; pointers to the four procedures; and a
<i>clientData</i> value to be passed to those procedures when they
are invoked. The <i>clientData</i> value typically points to a
structure containing information that is needed by the procedures
when they are parsing and printing options. <i>RestoreProc</i> and
<i>freeProc</i> may be NULL, indicating that no function should be
called for those operations.</p>

<p>The <i>setProc</i> procedure is invoked by <b>Tk_SetOptions</b>
to convert a Tcl_Obj into an internal representation and store the
resulting value in the widget record. The arguments are:</p>

<dl class="custom option types">
<dt><a name="M28"><i>clientData</i></a></dt>

<dd>A copy of the <i>clientData</i> field in the Tk_ObjCustomOption
structure.</dd>

<dt><a name="M29"><i>interp</i></a></dt>

<dd>A pointer to a Tcl interpreter, used for error reporting.</dd>

<dt><a name="M30"><i>Tkwin</i></a></dt>

<dd>A copy of the <i>tkwin</i> argument to
<b>Tk_SetOptions</b></dd>

<dt><a name="M31"><i>valuePtr</i></a></dt>

<dd>A pointer to a reference to a Tcl_Obj describing the new value
for the option; it could have been specified explicitly in the call
to <b>Tk_SetOptions</b> or it could come from the option database
or a default. If the objOffset for the option is non-negative (the
option value is stored as a (Tcl_Obj *) in the widget record), the
Tcl_Obj pointer referenced by <i>valuePtr</i> is the pointer that
will be stored at the objOffset for the option. <i>SetProc</i> may
modify the value if necessary; for example, <i>setProc</i> may
change the value to NULL to support the <b>TK_OPTION_NULL_OK</b>
flag.</dd>

<dt><a name="M32"><i>recordPtr</i></a></dt>

<dd>A pointer to the start of the widget record to modify.</dd>

<dt><a name="M33"><i>internalOffset</i></a></dt>

<dd>Offset in bytes from the start of the widget record to the
location where the internal representation of the option value is
to be placed.</dd>

<dt><a name="M34"><i>saveInternalPtr</i></a></dt>

<dd>A pointer to storage allocated in a Tk_SavedOptions structure
for the internal representation of the original option value.
Before setting the option to its new value, <i>setProc</i> should
set the value referenced by <i>saveInternalPtr</i> to the original
value of the option in order to support
<b>Tk_RestoreSavedOptions</b>.</dd>

<dt><a name="M35"><i>flags</i></a></dt>

<dd>A copy of the <i>flags</i> field in the Tk_OptionSpec structure
for the option</dd>
</dl>

<p><i>SetProc</i> returns a standard Tcl result: <b>TCL_OK</b> to
indicate successful processing, or <b>TCL_ERROR</b> to indicate a
failure of any kind. An error message may be left in the Tcl
interpreter given by <i>interp</i> in the case of an error.</p>

<p>The <i>getProc</i> procedure is invoked by
<b>Tk_GetOptionValue</b> and <b>Tk_GetOptionInfo</b> to retrieve a
Tcl_Obj representation of the internal representation of an option.
The <i>clientData</i> argument is a copy of the <i>clientData</i>
field in the Tk_ObjCustomOption structure. <i>Tkwin</i> is a copy
of the <i>tkwin</i> argument to <b>Tk_GetOptionValue</b> or
<b>Tk_GetOptionInfo</b>. <i>RecordPtr</i> is a pointer to the
beginning of the widget record to query. <i>InternalOffset</i> is
the offset in bytes from the beginning of the widget record to the
location where the internal representation of the option value is
stored. <i>GetProc</i> must return a pointer to a Tcl_Obj
representing the value of the option.</p>

<p>The <i>restoreProc</i> procedure is invoked by
<b>Tk_RestoreSavedOptions</b> to restore a previously saved
internal representation of a custom option value. The
<i>clientData</i> argument is a copy of the <i>clientData</i> field
in the Tk_ObjCustomOption structure. <i>Tkwin</i> is a copy of the
<i>tkwin</i> argument to <b>Tk_GetOptionValue</b> or
<b>Tk_GetOptionInfo</b>. <i>InternalPtr</i> is a pointer to the
location where internal representation of the option value is
stored. <i>SaveInternalPtr</i> is a pointer to the saved value.
<i>RestoreProc</i> must copy the value from <i>saveInternalPtr</i>
to <i>internalPtr</i> to restore the value. <i>RestoreProc</i> need
not free any memory associated with either <i>internalPtr</i> or
<i>saveInternalPtr</i>; <i>freeProc</i> will be invoked to free
that memory if necessary. <i>RestoreProc</i> has no return
value.</p>

<p>The <i>freeProc</i> procedure is invoked by <b>Tk_SetOptions</b>
and <b>Tk_FreeSavedOptions</b> to free any storage allocated for
the internal representation of a custom option. The
<i>clientData</i> argument is a copy of the <i>clientData</i> field
in the Tk_ObjCustomOption structure. <i>Tkwin</i> is a copy of the
<i>tkwin</i> argument to <b>Tk_GetOptionValue</b> or
<b>Tk_GetOptionInfo</b>. <i>InternalPtr</i> is a pointer to the
location where the internal representation of the option value is
stored. The <i>freeProc</i> must free any storage associated with
the option. <i>FreeProc</i> has no return value.</p>

<h3><a name="M36">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#anchor">anchor</a>, <a href=
"../Keywords/B.htm#bitmap">bitmap</a>, <a href=
"../Keywords/B.htm#boolean">boolean</a>, <a href=
"../Keywords/B.htm#border">border</a>, <a href=
"../Keywords/C.htm#color">color</a>, <a href=
"../Keywords/C.htm#configuration option">configuration option</a>,
<a href="../Keywords/C.htm#cursor">cursor</a>, <a href=
"../Keywords/D.htm#double">double</a>, <a href=
"../Keywords/F.htm#font">font</a>, <a href=
"../Keywords/I.htm#integer">integer</a>, <a href=
"../Keywords/J.htm#justify">justify</a>, <a href=
"../Keywords/P.htm#pixels">pixels</a>, <a href=
"../Keywords/R.htm#relief">relief</a>, <a href=
"../Keywords/S.htm#screen distance">screen distance</a>, <a href=
"../Keywords/S.htm#synonym">synonym</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1998 Sun Microsystems, Inc.</div>
</body>
</html>

