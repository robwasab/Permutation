<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_LimitCheck manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> Limit</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_LimitAddHandler, Tcl_LimitCheck, Tcl_LimitExceeded,
Tcl_LimitGetCommands, Tcl_LimitGetGranularity, Tcl_LimitGetTime,
Tcl_LimitReady, Tcl_LimitRemoveHandler, Tcl_LimitSetCommands,
Tcl_LimitSetGranularity, Tcl_LimitSetTime, Tcl_LimitTypeEnabled,
Tcl_LimitTypeExceeded, Tcl_LimitTypeReset, Tcl_LimitTypeSet -
manage and check resource limits on interpreters 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
int<br>
<b>Tcl_LimitCheck</b>(<i>interp</i>)<br>
int<br>
<b>Tcl_LimitReady</b>(<i>interp</i>)<br>
int<br>
<b>Tcl_LimitExceeded</b>(<i>interp</i>)<br>
int<br>
<b>Tcl_LimitTypeExceeded</b>(<i>interp, type</i>)<br>
int<br>
<b>Tcl_LimitTypeEnabled</b>(<i>interp, type</i>)<br>
void<br>
<b>Tcl_LimitTypeSet</b>(<i>interp, type</i>)<br>
void<br>
<b>Tcl_LimitTypeReset</b>(<i>interp, type</i>)<br>
int<br>
<b>Tcl_LimitGetCommands</b>(<i>interp</i>)<br>
void<br>
<b>Tcl_LimitSetCommands</b>(<i>interp, commandLimit</i>)<br>
void<br>
<b>Tcl_LimitGetTime</b>(<i>interp, timeLimitPtr</i>)<br>
void<br>
<b>Tcl_LimitSetTime</b>(<i>interp, timeLimitPtr</i>)<br>
int<br>
<b>Tcl_LimitGetGranularity</b>(<i>interp, type</i>)<br>
void<br>
<b>Tcl_LimitSetGranularity</b>(<i>interp, type,
granularity</i>)<br>
void<br>
<b>Tcl_LimitAddHandler</b>(<i>interp, type, handlerProc,
clientData, deleteProc</i>)<br>
void<br>
<b>Tcl_LimitRemoveHandler</b>(<i>interp, type, handlerProc,
clientData</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter that the limit being managed applies to or that
will have its limits checked.</dd>

<dt>int <b>type</b> (in)</dt>

<dd>The type of limit that the operation refers to. This must be
either <b>TCL_LIMIT_COMMANDS</b> or <b>TCL_LIMIT_TIME</b>.</dd>

<dt>int <b>commandLimit</b> (in)</dt>

<dd>The maximum number of commands (as reported by <b><a href=
"../TclCmd/info.htm">info cmdcount</a></b>) that may be executed in
the interpreter.</dd>

<dt>Tcl_Time <b>*timeLimitPtr</b> (in/out)</dt>

<dd>A pointer to a structure that will either have the new time
limit read from (<b>Tcl_LimitSetTime</b>) or the current time limit
written to (<b>Tcl_LimitGetTime</b>).</dd>

<dt>int <b>granularity</b> (in)</dt>

<dd>Divisor that indicates how often a particular limit should
really be checked. Must be at least 1.</dd>

<dt>Tcl_LimitHandlerProc <b>*handlerProc</b> (in)</dt>

<dd>Function to call when a particular limit is exceeded. If the
<i>handlerProc</i> removes or raises the limit during its
processing, the limited interpreter will be permitted to continue
to process after the handler returns. Many handlers may be attached
to the same interpreter limit; their order of execution is not
defined, and they must be identified by <i>handlerProc</i> and
<i>clientData</i> when they are deleted.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary pointer-sized word used to pass some context to the
<i>handlerProc</i> function.</dd>

<dt>Tcl_LimitHandlerDeleteProc <b>*deleteProc</b> (in)</dt>

<dd>Function to call whenever a handler is deleted. May be NULL if
the <i>clientData</i> requires no deletion.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

Tcl's interpreter resource limit subsystem allows for close control
over how much computation time a script may use, and is useful for
cases where a program is divided into multiple pieces where some
parts are more trusted than others (e.g. web application servers). 

<p>Every interpreter may have a limit on the wall-time for
execution, and a limit on the number of commands that the
interpreter may execute. Since checking of these limits is
potentially expensive (especially the time limit), each limit also
has a checking granularity, which is a divisor for an internal
count of the number of points in the core where a check may be
performed (which is immediately before executing a command and at
an unspecified frequency between running commands, which can happen
in empty-bodied <b><a href="../TclCmd/while.htm">while</a></b>
loops).</p>

<p>The final component of the limit engine is a callback scheme
which allows for notifications of when a limit has been exceeded.
These callbacks can just provide logging, or may allocate more
resources to the interpreter to permit it to continue processing
longer.</p>

<p>When a limit is exceeded (and the callbacks have run; the order
of execution of the callbacks is unspecified) execution in the
limited interpreter is stopped by raising an error and setting a
flag that prevents the <b><a href=
"../TclCmd/catch.htm">catch</a></b> command in that interpreter
from trapping that error. It is up to the context that started
execution in that interpreter (typically a master interpreter) to
handle the error.</p>

<h3><a name="M6">LIMIT CHECKING API</a></h3>

To check the resource limits for an interpreter, call
<b>Tcl_LimitCheck</b>, which returns <b>TCL_OK</b> if the limit was
not exceeded (after processing callbacks) and <b>TCL_ERROR</b> if
the limit was exceeded (in which case an error message is also
placed in the interpreter result). That function should only be
called when <b>Tcl_LimitReady</b> returns non-zero so that
granularity policy is enforced. This API is designed to be similar
in usage to <b><a href="../TclLib/Async.htm">Tcl_AsyncReady</a></b>
and <b><a href="../TclLib/Async.htm">Tcl_AsyncInvoke</a></b>. 

<p>When writing code that may behave like <b><a href=
"../TclCmd/catch.htm">catch</a></b> in respect of errors, you
should only trap an error if <b>Tcl_LimitExceeded</b> returns zero.
If it returns non-zero, the interpreter is in a limit-exceeded
state and errors should be allowed to propagate to the calling
context. You can also check whether a particular type of limit has
been exceeded using <b>Tcl_LimitTypeExceeded</b>.</p>

<h3><a name="M7">LIMIT CONFIGURATION</a></h3>

To check whether a limit has been set (but not whether it has
actually been exceeded) on an interpreter, call
<b>Tcl_LimitTypeEnabled</b> with the type of limit you want to
check. To enable a particular limit call <b>Tcl_LimitTypeSet</b>,
and to disable a limit call <b>Tcl_LimitTypeReset</b>. 

<p>The level of a command limit may be set using
<b>Tcl_LimitSetCommands</b>, and retrieved using
<b>Tcl_LimitGetCommands</b>. Similarly for a time limit with
<b>Tcl_LimitSetTime</b> and <b>Tcl_LimitGetTime</b> respectively,
but with that API the time limit is copied from and to the Tcl_Time
structure that the <i>timeLimitPtr</i> argument points to.</p>

<p>The checking granularity for a particular limit may be set using
<b>Tcl_LimitSetGranularity</b> and retrieved using
<b>Tcl_LimitGetGranularity</b>. Note that granularities must always
be positive.</p>

<h4><a name="M8">LIMIT CALLBACKS</a></h4>

To add a handler callback to be invoked when a limit is exceeded,
call <b>Tcl_LimitAddHandler</b>. The <i>handlerProc</i> argument
describes the function that will actually be called; it should have
the following prototype: 

<pre>
typedef void Tcl_LimitHandlerProc(
        ClientData <i>clientData</i>,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>);
</pre>

<p>The <i>clientData</i> argument to the handler will be whatever
is passed to the <i>clientData</i> argument to
<b>Tcl_LimitAddHandler</b>, and the <i>interp</i> is the
interpreter that had its limit exceeded.</p>

<p>The <i>deleteProc</i> argument to <b>Tcl_LimitAddHandler</b> is
a function to call to delete the <i>clientData</i> value. It may be
<b>TCL_STATIC</b> or NULL if no deletion action is necessary, or
<b>TCL_DYNAMIC</b> if all that is necessary is to free the
structure with <b><a href="../TclLib/Alloc.htm">Tcl_Free</a></b>.
Otherwise, it should refer to a function with the following
prototype:</p>

<pre>
typedef void Tcl_LimitHandlerDeleteProc(
        ClientData <i>clientData</i>);
</pre>

<p>A limit handler may be deleted using
<b>Tcl_LimitRemoveHandler</b>; the handler removed will be the
first one found (out of the handlers added with
<b>Tcl_LimitAddHandler</b>) with exactly matching <i>type</i>,
<i>handlerProc</i> and <i>clientData</i> arguments. This function
always invokes the <i>deleteProc</i> on the <i>clientData</i>
(unless the <i>deleteProc</i> was NULL or <b>TCL_STATIC</b>).</p>

<h3><a name="M9">KEYWORDS</a></h3>

<a href="../Keywords/I.htm#interpreter">interpreter</a>, <a href=
"../Keywords/R.htm#resource">resource</a>, <a href=
"../Keywords/L.htm#limit">limit</a>, <a href=
"../Keywords/C.htm#commands">commands</a>, <a href=
"../Keywords/T.htm#time">time</a>, <a href=
"../Keywords/C.htm#callback">callback</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2004 Donal K. Fellows</div>
</body>
</html>

