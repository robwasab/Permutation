<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_FindPhoto manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> FindPhoto</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tk_FindPhoto, Tk_PhotoPutBlock, Tk_PhotoPutZoomedBlock,
Tk_PhotoGetImage, Tk_PhotoBlank, Tk_PhotoExpand, Tk_PhotoGetSize,
Tk_PhotoSetSize - manipulate the image data stored in a photo
image. 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
Tk_PhotoHandle<br>
<b>Tk_FindPhoto</b>(<i>interp, imageName</i>)<br>
int<br>
<b>Tk_PhotoPutBlock</b>(<i>interp, handle, blockPtr, x, y, width,
height,<br>
compRule</i>)<br>
int<br>
<b>Tk_PhotoPutZoomedBlock</b>(<i>interp, handle, blockPtr, x, y,
width, height,<br>
zoomX, zoomY, subsampleX, subsampleY, compRule</i>)<br>
int<br>
<b>Tk_PhotoGetImage</b>(<i>handle, blockPtr</i>)<br>
void<br>
<b>Tk_PhotoBlank</b>(<i>handle</i>)<br>
int<br>
<b>Tk_PhotoExpand</b>(<i>interp, handle, width, height</i>)<br>
void<br>
<b>Tk_PhotoGetSize</b>(<i>handle, widthPtr, heightPtr</i>)<br>
int<br>
<b>Tk_PhotoSetSize</b>(<i>interp. handle, width, height</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which image was created and in which error
reporting is to be done.</dd>

<dt>const char <b>*imageName</b> (in)</dt>

<dd>Name of the photo image.</dd>

<dt>Tk_PhotoHandle <b>handle</b> (in)</dt>

<dd>Opaque handle identifying the photo image to be affected.</dd>

<dt>Tk_PhotoImageBlock <b>*blockPtr</b> (in)</dt>

<dd>Specifies the address and storage layout of image data.</dd>

<dt>int <b>x</b> (in)</dt>

<dd>Specifies the X coordinate where the top-left corner of the
block is to be placed within the image.</dd>

<dt>int <b>y</b> (in)</dt>

<dd>Specifies the Y coordinate where the top-left corner of the
block is to be placed within the image.</dd>

<dt>int <b>width</b> (in)</dt>

<dd>Specifies the width of the image area to be affected (for
<b>Tk_PhotoPutBlock</b>) or the desired image width (for
<b>Tk_PhotoExpand</b> and <b>Tk_PhotoSetSize</b>).</dd>

<dt>int <b>compRule</b> (in)</dt>

<dd>Specifies the compositing rule used when combining transparent
pixels in a block of data with a photo image. Must be one of
<b>TK_PHOTO_COMPOSITE_OVERLAY</b> (which puts the block of data
over the top of the existing photo image, with the previous
contents showing through in the transparent bits) or
<b>TK_PHOTO_COMPOSITE_SET</b> (which discards the existing photo
image contents in the rectangle covered by the data block.)</dd>

<dt>int <b>height</b> (in)</dt>

<dd>Specifies the height of the image area to be affected (for
<b>Tk_PhotoPutBlock</b>) or the desired image height (for
<b>Tk_PhotoExpand</b> and <b>Tk_PhotoSetSize</b>).</dd>

<dt>int <b>*widthPtr</b> (out)</dt>

<dd>Pointer to location in which to store the image width.</dd>

<dt>int <b>*heightPtr</b> (out)</dt>

<dd>Pointer to location in which to store the image height.</dd>

<dt>int <b>subsampleX</b> (in)</dt>

<dd>Specifies the subsampling factor in the X direction for input
image data.</dd>

<dt>int <b>subsampleY</b> (in)</dt>

<dd>Specifies the subsampling factor in the Y direction for input
image data.</dd>

<dt>int <b>zoomX</b> (in)</dt>

<dd>Specifies the zoom factor to be applied in the X direction to
pixels being written to the photo image.</dd>

<dt>int <b>zoomY</b> (in)</dt>

<dd>Specifies the zoom factor to be applied in the Y direction to
pixels being written to the photo image.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tk_FindPhoto</b> returns an opaque handle that is used to
identify a particular photo image to the other procedures. The
parameter is the name of the image, that is, the name specified to
the <b>image create photo</b> command, or assigned by that command
if no name was specified. 

<p><b>Tk_PhotoPutBlock</b> is used to supply blocks of image data
to be displayed. The call affects an area of the image of size
<i>width</i> x <i>height</i> pixels, with its top-left corner at
coordinates (<i>x</i>,<i>y</i>). All of <i>width</i>,
<i>height</i>, <i>x</i>, and <i>y</i> must be non-negative. If part
of this area lies outside the current bounds of the image, the
image will be expanded to include the area, unless the user has
specified an explicit image size with the <b>-width</b> and/or
<b>-height</b> widget configuration options (see photo(n)); in that
case the area is silently clipped to the image boundaries.</p>

<p>The <i>block</i> parameter is a pointer to a
<b>Tk_PhotoImageBlock</b> structure, defined as follows:</p>

<pre>
typedef struct {
    unsigned char *<i>pixelPtr</i>;
    int <i>width</i>;
    int <i>height</i>;
    int <i>pitch</i>;
    int <i>pixelSize</i>;
    int <i>offset[4]</i>;
} Tk_PhotoImageBlock;
</pre>

The <i>pixelPtr</i> field points to the first pixel, that is, the
top-left pixel in the block. The <i>width</i> and <i>height</i>
fields specify the dimensions of the block of pixels. The
<i>pixelSize</i> field specifies the address difference between two
horizontally adjacent pixels. Often it is 3 or 4, but it can have
any value. The <i>pitch</i> field specifies the address difference
between two vertically adjacent pixels. The <i>offset</i> array
contains the offsets from the address of a pixel to the addresses
of the bytes containing the red, green, blue and alpha
(transparency) components. These are normally 0, 1, 2 and 3, but
can have other values, e.g., for images that are stored as separate
red, green and blue planes. 

<p>The <i>compRule</i> parameter to <b>Tk_PhotoPutBlock</b>
specifies a compositing rule that says what to do with transparent
pixels. The value <b>TK_PHOTO_COMPOSITE_OVERLAY</b> says that the
previous contents of the photo image should show through, and the
value <b>TK_PHOTO_COMPOSITE_SET</b> says that the previous contents
of the photo image should be completely ignored, and the values
from the block be copied directly across. The behavior in Tk8.3 and
earlier was equivalent to having <b>TK_PHOTO_COMPOSITE_OVERLAY</b>
as a compositing rule.</p>

<p>The value given for the <i>width</i> and <i>height</i>
parameters to <b>Tk_PhotoPutBlock</b> do not have to correspond to
the values specified in <i>block</i>. If they are smaller,
<b>Tk_PhotoPutBlock</b> extracts a sub-block from the image data
supplied. If they are larger, the data given are replicated (in a
tiled fashion) to fill the specified area. These rules operate
independently in the horizontal and vertical directions.</p>

<p><b>Tk_PhotoPutBlock</b> normally returns <b>TCL_OK</b>, though
if it cannot allocate sufficient memory to hold the resulting
image, <b>TCL_ERROR</b> is returned instead and, if the
<i>interp</i> argument is non-NULL, an error message is placed in
the interpreter's result.</p>

<p><b>Tk_PhotoPutZoomedBlock</b> works like <b>Tk_PhotoPutBlock</b>
except that the image can be reduced or enlarged for display. The
<i>subsampleX</i> and <i>subsampleY</i> parameters allow the size
of the image to be reduced by subsampling.
<b>Tk_PhotoPutZoomedBlock</b> will use only pixels from the input
image whose X coordinates are multiples of <i>subsampleX</i>, and
whose Y coordinates are multiples of <i>subsampleY</i>. For
example, an image of 512x512 pixels can be reduced to 256x256 by
setting <i>subsampleX</i> and <i>subsampleY</i> to 2.</p>

<p>The <i>zoomX</i> and <i>zoomY</i> parameters allow the image to
be enlarged by pixel replication. Each pixel of the (possibly
subsampled) input image will be written to a block <i>zoomX</i>
pixels wide and <i>zoomY</i> pixels high of the displayed image.
Subsampling and zooming can be used together for special
effects.</p>

<p><b>Tk_PhotoGetImage</b> can be used to retrieve image data from
a photo image. <b>Tk_PhotoGetImage</b> fills in the structure
pointed to by the <i>blockPtr</i> parameter with values that
describe the address and layout of the image data that the photo
image has stored internally. The values are valid until the image
is destroyed or its size is changed. <b>Tk_PhotoGetImage</b>
returns 1 for compatibility with the corresponding procedure in the
old photo widget.</p>

<p><b>Tk_PhotoBlank</b> blanks the entire area of the photo image.
Blank areas of a photo image are transparent.</p>

<p><b>Tk_PhotoExpand</b> requests that the widget's image be
expanded to be at least <i>width</i> x <i>height</i> pixels in
size. The width and/or height are unchanged if the user has
specified an explicit image width or height with the <b>-width</b>
and/or <b>-height</b> configuration options, respectively. If the
image data are being supplied in many small blocks, it is more
efficient to use <b>Tk_PhotoExpand</b> or <b>Tk_PhotoSetSize</b> at
the beginning rather than allowing the image to expand in many
small increments as image blocks are supplied.</p>

<p><b>Tk_PhotoExpand</b> normally returns <b>TCL_OK</b>, though if
it cannot allocate sufficient memory to hold the resulting image,
<b>TCL_ERROR</b> is returned instead and, if the <i>interp</i>
argument is non-NULL, an error message is placed in the
interpreter's result.</p>

<p><b>Tk_PhotoSetSize</b> specifies the size of the image, as if
the user had specified the given <i>width</i> and <i>height</i>
values to the <b>-width</b> and <b>-height</b> configuration
options. A value of zero for <i>width</i> or <i>height</i> does not
change the image's width or height, but allows the width or height
to be changed by subsequent calls to <b>Tk_PhotoPutBlock</b>,
<b>Tk_PhotoPutZoomedBlock</b> or <b>Tk_PhotoExpand</b>.</p>

<p><b>Tk_PhotoSetSize</b> normally returns <b>TCL_OK</b>, though if
it cannot allocate sufficient memory to hold the resulting image,
<b>TCL_ERROR</b> is returned instead and, if the <i>interp</i>
argument is non-NULL, an error message is placed in the
interpreter's result.</p>

<p><b>Tk_PhotoGetSize</b> returns the dimensions of the image in
*<i>widthPtr</i> and *<i>heightPtr</i>.</p>

<h3><a name="M6">PORTABILITY</a></h3>

In Tk 8.3 and earlier, <b>Tk_PhotoPutBlock</b> and
<b>Tk_PhotoPutZoomedBlock</b> had different signatures. If you want
to compile code that uses the old interface against 8.4 without
updating your code, compile it with the flag
-DUSE_COMPOSITELESS_PHOTO_PUT_BLOCK. Code linked using Stubs
against older versions of Tk will continue to work. 

<p>In Tk 8.4, <b>Tk_PhotoPutBlock</b>,
<b>Tk_PhotoPutZoomedBlock</b>, <b>Tk_PhotoExpand</b> and
<b>Tk_PhotoSetSize</b> did not take an <i>interp</i> argument or
return any result code. If insufficient memory was available for an
image, Tk would panic. This behaviour is still supported if you
compile your extension with the additional flag
-DUSE_PANIC_ON_PHOTO_ALLOC_FAILURE. Code linked using Stubs against
older versions of Tk will continue to work.</p>

<h3><a name="M7">CREDITS</a></h3>

The code for the photo image type was developed by Paul Mackerras,
based on his earlier photo widget code. 

<h3><a name="M8">KEYWORDS</a></h3>

<a href="../Keywords/P.htm#photo">photo</a>, <a href=
"../Keywords/I.htm#image">image</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1994 The Australian National University Copyright
&copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

