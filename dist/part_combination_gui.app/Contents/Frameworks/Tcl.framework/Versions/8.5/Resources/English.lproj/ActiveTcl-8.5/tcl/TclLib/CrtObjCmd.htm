<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_CreateObjCommand manual
page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> CrtObjCmd</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_CreateObjCommand, Tcl_DeleteCommand,
Tcl_DeleteCommandFromToken, Tcl_GetCommandInfo,
Tcl_GetCommandInfoFromToken, Tcl_SetCommandInfo,
Tcl_SetCommandInfoFromToken, Tcl_GetCommandName,
Tcl_GetCommandFullName, Tcl_GetCommandFromObj - implement new
commands in C 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
Tcl_Command<br>
<b>Tcl_CreateObjCommand</b>(<i>interp, cmdName, proc, clientData,
deleteProc</i>)<br>
int<br>
<b>Tcl_DeleteCommand</b>(<i>interp, cmdName</i>)<br>
int<br>
<b>Tcl_DeleteCommandFromToken</b>(<i>interp, token</i>)<br>
int<br>
<b>Tcl_GetCommandInfo</b>(<i>interp, cmdName, infoPtr</i>)<br>
int<br>
<b>Tcl_SetCommandInfo</b>(<i>interp, cmdName, infoPtr</i>)<br>
int<br>
<b>Tcl_GetCommandInfoFromToken</b>(<i>token, infoPtr</i>)<br>
int<br>
<b>Tcl_SetCommandInfoFromToken</b>(<i>token, infoPtr</i>)<br>
const char *<br>
<b>Tcl_GetCommandName</b>(<i>interp, token</i>)<br>
void<br>
<b>Tcl_GetCommandFullName</b>(<i>interp, token, objPtr</i>)<br>
Tcl_Command<br>
<b>Tcl_GetCommandFromObj</b>(<i>interp, objPtr</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which to create a new command or that contains a
command.</dd>

<dt>char <b>*cmdName</b> (in)</dt>

<dd>Name of command.</dd>

<dt>Tcl_ObjCmdProc <b>*proc</b> (in)</dt>

<dd>Implementation of the new command: <i>proc</i> will be called
whenever <i>cmdName</i> is invoked as a command.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary one-word value to pass to <i>proc</i> and
<i>deleteProc</i>.</dd>

<dt>Tcl_CmdDeleteProc <b>*deleteProc</b> (in)</dt>

<dd>Procedure to call before <i>cmdName</i> is deleted from the
interpreter; allows for command-specific cleanup. If NULL, then no
procedure is called before the command is deleted.</dd>

<dt>Tcl_Command <b>token</b> (in)</dt>

<dd>Token for command, returned by previous call to
<b>Tcl_CreateObjCommand</b>. The command must not have been
deleted.</dd>

<dt>Tcl_CmdInfo <b>*infoPtr</b> (in/out)</dt>

<dd>Pointer to structure containing various information about a Tcl
command.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>Object containing the name of a Tcl command.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tcl_CreateObjCommand</b> defines a new command in <i>interp</i>
and associates it with procedure <i>proc</i> such that whenever
<i>name</i> is invoked as a Tcl command (e.g., via a call to <b><a
href="../TclLib/Eval.htm">Tcl_EvalObjEx</a></b>) the Tcl
interpreter will call <i>proc</i> to process the command. 

<p><b>Tcl_CreateObjCommand</b> deletes any existing command
<i>name</i> already associated with the interpreter (however see
below for an exception where the existing command is not deleted).
It returns a token that may be used to refer to the command in
subsequent calls to <b>Tcl_GetCommandName</b>. If <i>name</i>
contains any <b>::</b> namespace qualifiers, then the command is
added to the specified namespace; otherwise the command is added to
the global namespace. If <b>Tcl_CreateObjCommand</b> is called for
an interpreter that is in the process of being deleted, then it
does not create a new command and it returns NULL. <i>proc</i>
should have arguments and result that match the type
<b>Tcl_ObjCmdProc</b>:</p>

<pre>
typedef int Tcl_ObjCmdProc(
        ClientData <i>clientData</i>,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
        int <i>objc</i>,
        Tcl_Obj *const <i>objv</i>[]);
</pre>

When <i>proc</i> is invoked, the <i>clientData</i> and
<i>interp</i> parameters will be copies of the <i>clientData</i>
and <i>interp</i> arguments given to <b>Tcl_CreateObjCommand</b>.
Typically, <i>clientData</i> points to an application-specific data
structure that describes what to do when the command procedure is
invoked. <i>Objc</i> and <i>objv</i> describe the arguments to the
command, <i>objc</i> giving the number of argument objects
(including the command name) and <i>objv</i> giving the values of
the arguments. The <i>objv</i> array will contain <i>objc</i>
values, pointing to the argument objects. Unlike
<i>argv</i>[<i>argv</i>] used in a string-based command procedure,
<i>objv</i>[<i>objc</i>] will not contain NULL. 

<p>Additionally, when <i>proc</i> is invoked, it must not modify
the contents of the <i>objv</i> array by assigning new pointer
values to any element of the array (for example,
<i>objv</i>[<b>2</b>] = <b>NULL</b>) because this will cause memory
to be lost and the runtime stack to be corrupted. The <b>const</b>
in the declaration of <i>objv</i> will cause ANSI-compliant
compilers to report any such attempted assignment as an error.
However, it is acceptable to modify the internal representation of
any individual object argument. For instance, the user may call
<b><a href="../TclLib/IntObj.htm">Tcl_GetIntFromObj</a></b> on
<i>objv</i>[<b>2</b>] to obtain the integer representation of that
object; that call may change the type of the object that
<i>objv</i>[<b>2</b>] points at, but will not change where
<i>objv</i>[<b>2</b>] points.</p>

<p><i>proc</i> must return an integer code that is either
<b>TCL_OK</b>, <b>TCL_ERROR</b>, <b>TCL_RETURN</b>,
<b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>. See the Tcl overview man
page for details on what these codes mean. Most normal commands
will only return <b>TCL_OK</b> or <b>TCL_ERROR</b>. In addition, if
<i>proc</i> needs to return a non-empty result, it can call <b><a
href="../TclLib/SetResult.htm">Tcl_SetObjResult</a></b> to set the
interpreter's result. In the case of a <b>TCL_OK</b> return code
this gives the result of the command, and in the case of
<b>TCL_ERROR</b> this gives an error message. Before invoking a
command procedure, <b><a href=
"../TclLib/Eval.htm">Tcl_EvalObjEx</a></b> sets interpreter's
result to point to an object representing an empty string, so
simple commands can return an empty result by doing nothing at
all.</p>

<p>The contents of the <i>objv</i> array belong to Tcl and are not
guaranteed to persist once <i>proc</i> returns: <i>proc</i> should
not modify them. Call <b><a href=
"../TclLib/SetResult.htm">Tcl_SetObjResult</a></b> if you want to
return something from the <i>objv</i> array.</p>

<p>Ordinarily, <b>Tcl_CreateObjCommand</b> deletes any existing
command <i>name</i> already associated with the interpreter.
However, if the existing command was created by a previous call to
<b><a href="../TclLib/CrtCommand.htm">Tcl_CreateCommand</a></b>,
<b>Tcl_CreateObjCommand</b> does not delete the command but instead
arranges for the Tcl interpreter to call the <b>Tcl_ObjCmdProc</b>
<i>proc</i> in the future. The old string-based <b>Tcl_CmdProc</b>
associated with the command is retained and its address can be
obtained by subsequent <b>Tcl_GetCommandInfo</b> calls. This is
done for backwards compatibility.</p>

<p><i>DeleteProc</i> will be invoked when (if) <i>name</i> is
deleted. This can occur through a call to <b>Tcl_DeleteCommand</b>,
<b>Tcl_DeleteCommandFromToken</b>, or <b><a href=
"../TclLib/CrtInterp.htm">Tcl_DeleteInterp</a></b>, or by replacing
<i>name</i> in another call to <b>Tcl_CreateObjCommand</b>.
<i>DeleteProc</i> is invoked before the command is deleted, and
gives the application an opportunity to release any structures
associated with the command. <i>DeleteProc</i> should have
arguments and result that match the type
<b>Tcl_CmdDeleteProc</b>:</p>

<pre>
typedef void Tcl_CmdDeleteProc(
        ClientData <i>clientData</i>);
</pre>

The <i>clientData</i> argument will be the same as the
<i>clientData</i> argument passed to <b>Tcl_CreateObjCommand</b>. 

<p><b>Tcl_DeleteCommand</b> deletes a command from a command
interpreter. Once the call completes, attempts to invoke
<i>cmdName</i> in <i>interp</i> will result in errors. If
<i>cmdName</i> is not bound as a command in <i>interp</i> then
<b>Tcl_DeleteCommand</b> does nothing and returns -1; otherwise it
returns 0. There are no restrictions on <i>cmdName</i>: it may
refer to a built-in command, an application-specific command, or a
Tcl procedure. If <i>name</i> contains any <b>::</b> namespace
qualifiers, the command is deleted from the specified
namespace.</p>

<p>Given a token returned by <b>Tcl_CreateObjCommand</b>,
<b>Tcl_DeleteCommandFromToken</b> deletes the command from a
command interpreter. It will delete a command even if that command
has been renamed. Once the call completes, attempts to invoke the
command in <i>interp</i> will result in errors. If the command
corresponding to <i>token</i> has already been deleted from
<i>interp</i> then <b>Tcl_DeleteCommand</b> does nothing and
returns -1; otherwise it returns 0.</p>

<p><b>Tcl_GetCommandInfo</b> checks to see whether its
<i>cmdName</i> argument exists as a command in <i>interp</i>.
<i>cmdName</i> may include <b>::</b> namespace qualifiers to
identify a command in a particular namespace. If the command is not
found, then it returns 0. Otherwise it places information about the
command in the <b>Tcl_CmdInfo</b> structure pointed to by
<i>infoPtr</i> and returns 1. A <b>Tcl_CmdInfo</b> structure has
the following fields:</p>

<pre>
typedef struct Tcl_CmdInfo {
    int <i>isNativeObjectProc</i>;
    Tcl_ObjCmdProc *<i>objProc</i>;
    ClientData <i>objClientData</i>;
    Tcl_CmdProc *<i>proc</i>;
    ClientData <i>clientData</i>;
    Tcl_CmdDeleteProc *<i>deleteProc</i>;
    ClientData <i>deleteData</i>;
    Tcl_Namespace *<i>namespacePtr</i>;
} Tcl_CmdInfo;
</pre>

The <i>isNativeObjectProc</i> field has the value 1 if
<b>Tcl_CreateObjCommand</b> was called to register the command; it
is 0 if only <b><a href=
"../TclLib/CrtCommand.htm">Tcl_CreateCommand</a></b> was called. It
allows a program to determine whether it is faster to call
<i>objProc</i> or <i>proc</i>: <i>objProc</i> is normally faster if
<i>isNativeObjectProc</i> has the value 1. The fields
<i>objProc</i> and <i>objClientData</i> have the same meaning as
the <i>proc</i> and <i>clientData</i> arguments to
<b>Tcl_CreateObjCommand</b>; they hold information about the
object-based command procedure that the Tcl interpreter calls to
implement the command. The fields <i>proc</i> and <i>clientData</i>
hold information about the string-based command procedure that
implements the command. If <b><a href=
"../TclLib/CrtCommand.htm">Tcl_CreateCommand</a></b> was called for
this command, this is the procedure passed to it; otherwise, this
is a compatibility procedure registered by
<b>Tcl_CreateObjCommand</b> that simply calls the command's
object-based procedure after converting its string arguments to Tcl
objects. The field <i>deleteData</i> is the ClientData value to
pass to <i>deleteProc</i>; it is normally the same as
<i>clientData</i> but may be set independently using the
<b>Tcl_SetCommandInfo</b> procedure. The field <i>namespacePtr</i>
holds a pointer to the Tcl_Namespace that contains the command. 

<p><b>Tcl_GetCommandInfoFromToken</b> is identical to
<b>Tcl_GetCommandInfo</b> except that it uses a command token
returned from <b>Tcl_CreateObjCommand</b> in place of the command
name. If the <i>token</i> parameter is NULL, it returns 0;
otherwise, it returns 1 and fills in the structure designated by
<i>infoPtr</i>.</p>

<p><b>Tcl_SetCommandInfo</b> is used to modify the procedures and
ClientData values associated with a command. Its <i>cmdName</i>
argument is the name of a command in <i>interp</i>. <i>cmdName</i>
may include <b>::</b> namespace qualifiers to identify a command in
a particular namespace. If this command does not exist then
<b>Tcl_SetCommandInfo</b> returns 0. Otherwise, it copies the
information from <i>*infoPtr</i> to Tcl's internal structure for
the command and returns 1.</p>

<p><b>Tcl_SetCommandInfoFromToken</b> is identical to
<b>Tcl_SetCommandInfo</b> except that it takes a command token as
returned by <b>Tcl_CreateObjCommand</b> instead of the command
name. If the <i>token</i> parameter is NULL, it returns 0.
Otherwise, it copies the information from <i>*infoPtr</i> to Tcl's
internal structure for the command and returns 1.</p>

<p>Note that <b>Tcl_SetCommandInfo</b> and
<b>Tcl_SetCommandInfoFromToken</b> both allow the ClientData for a
command's deletion procedure to be given a different value than the
ClientData for its command procedure.</p>

<p>Note that neither <b>Tcl_SetCommandInfo</b> nor
<b>Tcl_SetCommandInfoFromToken</b> will change a command's
namespace. Use <b><a href="../TclLib/Eval.htm">Tcl_Eval</a></b> to
call the <b><a href="../TclCmd/rename.htm">rename</a></b> command
to do that.</p>

<p><b>Tcl_GetCommandName</b> provides a mechanism for tracking
commands that have been renamed. Given a token returned by
<b>Tcl_CreateObjCommand</b> when the command was created,
<b>Tcl_GetCommandName</b> returns the string name of the command.
If the command has been renamed since it was created, then
<b>Tcl_GetCommandName</b> returns the current name. This name does
not include any <b>::</b> namespace qualifiers. The command
corresponding to <i>token</i> must not have been deleted. The
string returned by <b>Tcl_GetCommandName</b> is in dynamic memory
owned by Tcl and is only guaranteed to retain its value as long as
the command is not deleted or renamed; callers should copy the
string if they need to keep it for a long time.</p>

<p><b>Tcl_GetCommandFullName</b> produces the fully qualified name
of a command from a command token. The name, including all
namespace prefixes, is appended to the object specified by
<i>objPtr</i>.</p>

<p><b>Tcl_GetCommandFromObj</b> returns a token for the command
specified by the name in a <b>Tcl_Obj</b>. The command name is
resolved relative to the current namespace. Returns NULL if the
command is not found.</p>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclLib/CrtCommand.htm">Tcl_CreateCommand</a></b>,
<b><a href="../TclLib/SetResult.htm">Tcl_ResetResult</a></b>, <b><a
href="../TclLib/SetResult.htm">Tcl_SetObjResult</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#bind">bind</a>, <a href=
"../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/C.htm#create">create</a>, <a href=
"../Keywords/D.htm#delete">delete</a>, <a href=
"../Keywords/N.htm#namespace">namespace</a>, <a href=
"../Keywords/O.htm#object">object</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1996-1997 Sun Microsystems, Inc.</div>
</body>
</html>

