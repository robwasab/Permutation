<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Library Procedures - Tcl_CreateCommand manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> CrtCommand</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_CreateCommand - implement new commands in C 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
Tcl_Command<br>
<b>Tcl_CreateCommand</b>(<i>interp, cmdName, proc, clientData,
deleteProc</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which to create new command.</dd>

<dt>const char <b>*cmdName</b> (in)</dt>

<dd>Name of command.</dd>

<dt>Tcl_CmdProc <b>*proc</b> (in)</dt>

<dd>Implementation of new command: <i>proc</i> will be called
whenever <i>cmdName</i> is invoked as a command.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary one-word value to pass to <i>proc</i> and
<i>deleteProc</i>.</dd>

<dt>Tcl_CmdDeleteProc <b>*deleteProc</b> (in)</dt>

<dd>Procedure to call before <i>cmdName</i> is deleted from the
interpreter; allows for command-specific cleanup. If NULL, then no
procedure is called before the command is deleted.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tcl_CreateCommand</b> defines a new command in <i>interp</i> and
associates it with procedure <i>proc</i> such that whenever
<i>cmdName</i> is invoked as a Tcl command (via a call to <b><a
href="../TclLib/Eval.htm">Tcl_Eval</a></b>) the Tcl interpreter
will call <i>proc</i> to process the command. It differs from <b><a
href="../TclLib/CrtObjCmd.htm">Tcl_CreateObjCommand</a></b> in that
a new string-based command is defined; that is, a command procedure
is defined that takes an array of argument strings instead of
objects. The object-based command procedures registered by <b><a
href="../TclLib/CrtObjCmd.htm">Tcl_CreateObjCommand</a></b> can
execute significantly faster than the string-based command
procedures defined by <b>Tcl_CreateCommand</b>. This is because
they take Tcl objects as arguments and those objects can retain an
internal representation that can be manipulated more efficiently.
Also, Tcl's interpreter now uses objects internally. In order to
invoke a string-based command procedure registered by
<b>Tcl_CreateCommand</b>, it must generate and fetch a string
representation from each argument object before the call and create
a new Tcl object to hold the string result returned by the
string-based command procedure. New commands should be defined
using <b><a href=
"../TclLib/CrtObjCmd.htm">Tcl_CreateObjCommand</a></b>. We support
<b>Tcl_CreateCommand</b> for backwards compatibility. 

<p>The procedures <b><a href=
"../TclLib/CrtObjCmd.htm">Tcl_DeleteCommand</a></b>, <b><a href=
"../TclLib/CrtObjCmd.htm">Tcl_GetCommandInfo</a></b>, and <b><a
href="../TclLib/CrtObjCmd.htm">Tcl_SetCommandInfo</a></b> are used
in conjunction with <b>Tcl_CreateCommand</b>.</p>

<p><b>Tcl_CreateCommand</b> will delete an existing command
<i>cmdName</i>, if one is already associated with the interpreter.
It returns a token that may be used to refer to the command in
subsequent calls to <b><a href=
"../TclLib/CrtObjCmd.htm">Tcl_GetCommandName</a></b>. If
<i>cmdName</i> contains any <b>::</b> namespace qualifiers, then
the command is added to the specified namespace; otherwise the
command is added to the global namespace. If
<b>Tcl_CreateCommand</b> is called for an interpreter that is in
the process of being deleted, then it does not create a new command
and it returns NULL. <i>Proc</i> should have arguments and result
that match the type <b>Tcl_CmdProc</b>:</p>

<pre>
typedef int Tcl_CmdProc(
        ClientData <i>clientData</i>,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
        int <i>argc</i>,
        const char *<i>argv</i>[]);
</pre>

When <i>proc</i> is invoked the <i>clientData</i> and <i>interp</i>
parameters will be copies of the <i>clientData</i> and
<i>interp</i> arguments given to <b>Tcl_CreateCommand</b>.
Typically, <i>clientData</i> points to an application-specific data
structure that describes what to do when the command procedure is
invoked. <i>Argc</i> and <i>argv</i> describe the arguments to the
command, <i>argc</i> giving the number of arguments (including the
command name) and <i>argv</i> giving the values of the arguments as
strings. The <i>argv</i> array will contain <i>argc</i>+1 values;
the first <i>argc</i> values point to the argument strings, and the
last value is NULL. Note that the argument strings should not be
modified as they may point to constant strings or may be shared
with other parts of the interpreter. 

<p>Note that the argument strings are encoded in normalized UTF-8
since version 8.1 of Tcl.</p>

<p><i>Proc</i> must return an integer code that is expected to be
one of <b>TCL_OK</b>, <b>TCL_ERROR</b>, <b>TCL_RETURN</b>,
<b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>. See the Tcl overview man
page for details on what these codes mean. Most normal commands
will only return <b>TCL_OK</b> or <b>TCL_ERROR</b>. In addition,
<i>proc</i> must set the interpreter result to point to a string
value; in the case of a <b>TCL_OK</b> return code this gives the
result of the command, and in the case of <b>TCL_ERROR</b> it gives
an error message. The <b><a href=
"../TclLib/SetResult.htm">Tcl_SetResult</a></b> procedure provides
an easy interface for setting the return value; for complete
details on how the interpreter result field is managed, see the
<b><a href="../TclLib/Interp.htm">Tcl_Interp</a></b> man page.
Before invoking a command procedure, <b><a href=
"../TclLib/Eval.htm">Tcl_Eval</a></b> sets the interpreter result
to point to an empty string, so simple commands can return an empty
result by doing nothing at all.</p>

<p>The contents of the <i>argv</i> array belong to Tcl and are not
guaranteed to persist once <i>proc</i> returns: <i>proc</i> should
not modify them, nor should it set the interpreter result to point
anywhere within the <i>argv</i> values. Call <b><a href=
"../TclLib/SetResult.htm">Tcl_SetResult</a></b> with status
<b>TCL_VOLATILE</b> if you want to return something from the
<i>argv</i> array.</p>

<p><i>DeleteProc</i> will be invoked when (if) <i>cmdName</i> is
deleted. This can occur through a call to <b><a href=
"../TclLib/CrtObjCmd.htm">Tcl_DeleteCommand</a></b> or <b><a href=
"../TclLib/CrtInterp.htm">Tcl_DeleteInterp</a></b>, or by replacing
<i>cmdName</i> in another call to <b>Tcl_CreateCommand</b>.
<i>DeleteProc</i> is invoked before the command is deleted, and
gives the application an opportunity to release any structures
associated with the command. <i>DeleteProc</i> should have
arguments and result that match the type
<b>Tcl_CmdDeleteProc</b>:</p>

<pre>
typedef void Tcl_CmdDeleteProc(
        ClientData <i>clientData</i>);
</pre>

The <i>clientData</i> argument will be the same as the
<i>clientData</i> argument passed to <b>Tcl_CreateCommand</b>. 

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclLib/CrtObjCmd.htm">Tcl_CreateObjCommand</a></b>,
<b><a href="../TclLib/CrtObjCmd.htm">Tcl_DeleteCommand</a></b>,
<b><a href="../TclLib/CrtObjCmd.htm">Tcl_GetCommandInfo</a></b>,
<b><a href="../TclLib/CrtObjCmd.htm">Tcl_SetCommandInfo</a></b>,
<b><a href="../TclLib/CrtObjCmd.htm">Tcl_GetCommandName</a></b>,
<b><a href="../TclLib/SetResult.htm">Tcl_SetObjResult</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#bind">bind</a>, <a href=
"../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/C.htm#create">create</a>, <a href=
"../Keywords/D.htm#delete">delete</a>, <a href=
"../Keywords/I.htm#interpreter">interpreter</a>, <a href=
"../Keywords/N.htm#namespace">namespace</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1989-1993 The Regents of the University of
California. Copyright &copy; 1994-1997 Sun Microsystems, Inc.</div>
</body>
</html>

