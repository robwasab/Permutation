<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Library Procedures - Tk_ParseArgv manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkLib</a>
<small>&gt;</small> ParseArgv</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="ParseArgv.htm#M2" name="L486">NAME</a> 

<dl>
<dd>Tk_ParseArgv - process command-line options</dd>
</dl>
</dd>

<dd><a href="ParseArgv.htm#M3" name="L487">SYNOPSIS</a></dd>

<dd><a href="ParseArgv.htm#M4" name="L488">ARGUMENTS</a></dd>

<dd><a href="ParseArgv.htm#M5" name="L489">DESCRIPTION</a> 

<dl class="description">
<dd><a href="ParseArgv.htm#M6" name=
"L490"><b>TK_ARGV_END</b></a></dd>

<dd><a href="ParseArgv.htm#M7" name=
"L491"><b>TK_ARGV_CONSTANT</b></a></dd>

<dd><a href="ParseArgv.htm#M8" name=
"L492"><b>TK_ARGV_INT</b></a></dd>

<dd><a href="ParseArgv.htm#M9" name=
"L493"><b>TK_ARGV_FLOAT</b></a></dd>

<dd><a href="ParseArgv.htm#M10" name=
"L494"><b>TK_ARGV_STRING</b></a></dd>

<dd><a href="ParseArgv.htm#M11" name=
"L495"><b>TK_ARGV_UID</b></a></dd>

<dd><a href="ParseArgv.htm#M12" name=
"L496"><b>TK_ARGV_CONST_OPTION</b></a></dd>

<dd><a href="ParseArgv.htm#M13" name=
"L497"><b>TK_ARGV_OPTION_VALUE</b></a></dd>

<dd><a href="ParseArgv.htm#M14" name=
"L498"><b>TK_ARGV_OPTION_NAME_VALUE</b></a></dd>

<dd><a href="ParseArgv.htm#M15" name=
"L499"><b>TK_ARGV_HELP</b></a></dd>

<dd><a href="ParseArgv.htm#M16" name=
"L500"><b>TK_ARGV_REST</b></a></dd>

<dd><a href="ParseArgv.htm#M17" name=
"L501"><b>TK_ARGV_FUNC</b></a></dd>

<dd><a href="ParseArgv.htm#M18" name=
"L502"><b>TK_ARGV_GENFUNC</b></a></dd>
</dl>
</dd>

<dd><a href="ParseArgv.htm#M19" name="L503">FLAGS</a> 

<dl class="flags">
<dd><a href="ParseArgv.htm#M20" name=
"L504"><b>TK_ARGV_DONT_SKIP_FIRST_ARG</b></a></dd>

<dd><a href="ParseArgv.htm#M21" name=
"L505"><b>TK_ARGV_NO_ABBREV</b></a></dd>

<dd><a href="ParseArgv.htm#M22" name=
"L506"><b>TK_ARGV_NO_LEFTOVERS</b></a></dd>

<dd><a href="ParseArgv.htm#M23" name=
"L507"><b>TK_ARGV_NO_DEFAULTS</b></a></dd>
</dl>
</dd>

<dd><a href="ParseArgv.htm#M24" name="L508">EXAMPLE</a></dd>

<dd><a href="ParseArgv.htm#M25" name="L509">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tk_ParseArgv - process command-line options 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tk.h&gt;</b><br>
int<br>
<b>Tk_ParseArgv</b>(<i>interp, tkwin, argcPtr, argv, argTable,
flags</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter to use for returning error messages.</dd>

<dt>Tk_Window <b>tkwin</b> (in)</dt>

<dd>Window to use when arguments specify Tk options. If NULL, then
no Tk options will be processed.</dd>

<dt>int <b>argcPtr</b> (in/out)</dt>

<dd>Pointer to number of arguments in argv; gets modified to hold
number of unprocessed arguments that remain after the call.</dd>

<dt>const char <b>**argv</b> (in/out)</dt>

<dd>Command line arguments passed to main program. Modified to hold
unprocessed arguments that remain after the call.</dd>

<dt>Tk_ArgvInfo <b>*argTable</b> (in)</dt>

<dd>Array of argument descriptors, terminated by element with type
<b>TK_ARGV_END</b>.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>If non-zero, then it specifies one or more flags that control
the parsing of arguments. Different flags may be OR'ed together.
The flags currently defined are <b>TK_ARGV_DONT_SKIP_FIRST_ARG</b>,
<b>TK_ARGV_NO_ABBREV</b>, <b>TK_ARGV_NO_LEFTOVERS</b>, and
<b>TK_ARGV_NO_DEFAULTS</b>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<b>Tk_ParseArgv</b> processes an array of command-line arguments
according to a table describing the kinds of arguments that are
expected. Each of the arguments in <i>argv</i> is processed in
turn: if it matches one of the entries in <i>argTable</i>, the
argument is processed according to that entry and discarded. The
arguments that do not match anything in <i>argTable</i> are copied
down to the beginning of <i>argv</i> (retaining their original
order) and returned to the caller. At the end of the call
<b>Tk_ParseArgv</b> sets <i>*argcPtr</i> to hold the number of
arguments that are left in <i>argv</i>, and <i>argv[*argcPtr]</i>
will hold the value NULL. Normally, <b>Tk_ParseArgv</b> assumes
that <i>argv[0]</i> is a command name, so it is treated like an
argument that does not match <i>argTable</i> and returned to the
caller; however, if the <b>TK_ARGV_DONT_SKIP_FIRST_ARG</b> bit is
set in <i>flags</i> then <i>argv[0]</i> will be processed just like
the other elements of <i>argv</i>. 

<p><b>Tk_ParseArgv</b> normally returns the value <b>TCL_OK</b>. If
an error occurs while parsing the arguments, then <b>TCL_ERROR</b>
is returned and <b>Tk_ParseArgv</b> will leave an error message in
<i>interp-&gt;result</i> in the standard Tcl fashion. In the event
of an error return, <i>*argvPtr</i> will not have been modified,
but <i>argv</i> could have been partially modified. The possible
causes of errors are explained below.</p>

<p>The <i>argTable</i> array specifies the kinds of arguments that
are expected; each of its entries has the following structure:</p>

<pre>
typedef struct {
    char *<i>key</i>;
    int <i>type</i>;
    char *<i>src</i>;
    char *<i>dst</i>;
    char *<i>help</i>;
} Tk_ArgvInfo;
</pre>

The <i>key</i> field is a string such as &ldquo;-display&rdquo; or
&ldquo;-bg&rdquo; that is compared with the values in <i>argv</i>.
<i>Type</i> indicates how to process an argument that matches
<i>key</i> (more on this below). <i>Src</i> and <i>dst</i> are
additional values used in processing the argument. Their exact
usage depends on <i>type</i>, but typically <i>src</i> indicates a
value and <i>dst</i> indicates where to store the value. The
<b>char *</b> declarations for <i>src</i> and <i>dst</i> are
placeholders: the actual types may be different. Lastly,
<i>help</i> is a string giving a brief description of this option;
this string is printed when users ask for help about command-line
options. 

<p>When processing an argument in <i>argv</i>, <b>Tk_ParseArgv</b>
compares the argument to each of the <i>key</i>'s in
<i>argTable</i>. <b>Tk_ParseArgv</b> selects the first specifier
whose <i>key</i> matches the argument exactly, if such a specifier
exists. Otherwise <b>Tk_ParseArgv</b> selects a specifier for which
the argument is a unique abbreviation. If the argument is a unique
abbreviation for more than one specifier, then an error is
returned. If there is no matching entry in <i>argTable</i>, then
the argument is skipped and returned to the caller.</p>

<p>Once a matching argument specifier is found, <b>Tk_ParseArgv</b>
processes the argument according to the <i>type</i> field of the
specifier. The argument that matched <i>key</i> is called
&ldquo;the matching argument&rdquo; in the descriptions below. As
part of the processing, <b>Tk_ParseArgv</b> may also use the next
argument in <i>argv</i> after the matching argument, which is
called &ldquo;the following argument&rdquo;. The legal values for
<i>type</i>, and the processing that they cause, are as
follows:</p>

<dl class="description">
<dt><a name="M6"><b>TK_ARGV_END</b></a></dt>

<dd>Marks the end of the table. The last entry in <i>argTable</i>
must have this type; all of its other fields are ignored and it
will never match any arguments.</dd>

<dt><a name="M7"><b>TK_ARGV_CONSTANT</b></a></dt>

<dd><i>Src</i> is treated as an integer and <i>dst</i> is treated
as a pointer to an integer. <i>Src</i> is stored at <i>*dst</i>.
The matching argument is discarded.</dd>

<dt><a name="M8"><b>TK_ARGV_INT</b></a></dt>

<dd>The following argument must contain an integer string in the
format accepted by <b>strtol</b> (e.g. &ldquo;0&rdquo; and
&ldquo;0x&rdquo; prefixes may be used to specify octal or
hexadecimal numbers, respectively). <i>Dst</i> is treated as a
pointer to an integer; the following argument is converted to an
integer value and stored at <i>*dst</i>. <i>Src</i> is ignored. The
matching and following arguments are discarded from
<i>argv</i>.</dd>

<dt><a name="M9"><b>TK_ARGV_FLOAT</b></a></dt>

<dd>The following argument must contain a floating-point number in
the format accepted by <b>strtol</b>. <i>Dst</i> is treated as the
address of a double-precision floating point value; the following
argument is converted to a double-precision value and stored at
<i>*dst</i>. The matching and following arguments are discarded
from <i>argv</i>.</dd>

<dt><a name="M10"><b>TK_ARGV_STRING</b></a></dt>

<dd>In this form, <i>dst</i> is treated as a pointer to a (char *);
<b>Tk_ParseArgv</b> stores at <i>*dst</i> a pointer to the
following argument, and discards the matching and following
arguments from <i>argv</i>. <i>Src</i> is ignored.</dd>

<dt><a name="M11"><b>TK_ARGV_UID</b></a></dt>

<dd>This form is similar to <b>TK_ARGV_STRING</b>, except that the
argument is turned into a <a href="../TkLib/GetUid.htm">Tk_Uid</a>
by calling <b><a href="../TkLib/GetUid.htm">Tk_GetUid</a></b>.
<i>Dst</i> is treated as a pointer to a <a href=
"../TkLib/GetUid.htm">Tk_Uid</a>; <b>Tk_ParseArgv</b> stores at
<i>*dst</i> the <a href="../TkLib/GetUid.htm">Tk_Uid</a>
corresponding to the following argument, and discards the matching
and following arguments from <i>argv</i>. <i>Src</i> is
ignored.</dd>

<dt><a name="M12"><b>TK_ARGV_CONST_OPTION</b></a></dt>

<dd>This form causes a Tk option to be set (as if the <b><a href=
"../TkCmd/option.htm">option</a></b> command had been invoked). The
<i>src</i> field is treated as a pointer to a string giving the
value of an option, and <i>dst</i> is treated as a pointer to the
name of the option. The matching argument is discarded. If
<i>tkwin</i> is NULL, then argument specifiers of this type are
ignored (as if they did not exist).</dd>

<dt><a name="M13"><b>TK_ARGV_OPTION_VALUE</b></a></dt>

<dd>This form is similar to <b>TK_ARGV_CONST_OPTION</b>, except
that the value of the option is taken from the following argument
instead of from <i>src</i>. <i>Dst</i> is used as the name of the
option. <i>Src</i> is ignored. The matching and following arguments
are discarded. If <i>tkwin</i> is NULL, then argument specifiers of
this type are ignored (as if they did not exist).</dd>

<dt><a name="M14"><b>TK_ARGV_OPTION_NAME_VALUE</b></a></dt>

<dd>In this case the following argument is taken as the name of a
Tk option and the argument after that is taken as the value for
that option. Both <i>src</i> and <i>dst</i> are ignored. All three
arguments are discarded from <i>argv</i>. If <i>tkwin</i> is NULL,
then argument specifiers of this type are ignored (as if they did
not exist).</dd>

<dt><a name="M15"><b>TK_ARGV_HELP</b></a></dt>

<dd>When this kind of option is encountered, <b>Tk_ParseArgv</b>
uses the <i>help</i> fields of <i>argTable</i> to format a message
describing all the valid arguments. The message is placed in
<i>interp-&gt;result</i> and <b>Tk_ParseArgv</b> returns
<b>TCL_ERROR</b>. When this happens, the caller normally prints the
help message and aborts. If the <i>key</i> field of a
<b>TK_ARGV_HELP</b> specifier is NULL, then the specifier will
never match any arguments; in this case the specifier simply
provides extra documentation, which will be included when some
other <b>TK_ARGV_HELP</b> entry causes help information to be
returned.</dd>

<dt><a name="M16"><b>TK_ARGV_REST</b></a></dt>

<dd>This option is used by programs or commands that allow the last
several of their options to be the name and/or options for some
other program. If a <b>TK_ARGV_REST</b> argument is found, then
<b>Tk_ParseArgv</b> does not process any of the remaining
arguments; it returns them all at the beginning of <i>argv</i>
(along with any other unprocessed arguments). In addition,
<b>Tk_ParseArgv</b> treats <i>dst</i> as the address of an integer
value, and stores at <i>*dst</i> the index of the first of the
<b>TK_ARGV_REST</b> options in the returned <i>argv</i>. This
allows the program to distinguish the <b>TK_ARGV_REST</b> options
from other unprocessed options that preceded the
<b>TK_ARGV_REST</b>.</dd>

<dt><a name="M17"><b>TK_ARGV_FUNC</b></a></dt>

<dd>For this kind of argument, <i>src</i> is treated as the address
of a procedure, which is invoked to process the following argument.
The procedure should have the following structure: 

<pre>
int
<i>func</i>(<i>dst</i>, <i>key</i>, <i>nextArg</i>)
    char *<i>dst</i>;
    char *<i>key</i>;
    char *<i>nextArg</i>;
{
}
</pre>

The <i>dst</i> and <i>key</i> parameters will contain the
corresponding fields from the <i>argTable</i> entry, and
<i>nextArg</i> will point to the following argument from
<i>argv</i> (or NULL if there are not any more arguments left in
<i>argv</i>). If <i>func</i> uses <i>nextArg</i> (so that
<b>Tk_ParseArgv</b> should discard it), then it should return 1.
Otherwise it should return 0 and <b>TkParseArgv</b> will process
the following argument in the normal fashion. In either event the
matching argument is discarded.</dd>

<dt><a name="M18"><b>TK_ARGV_GENFUNC</b></a></dt>

<dd>This form provides a more general procedural escape. It treats
<i>src</i> as the address of a procedure, and passes that procedure
all of the remaining arguments. The procedure should have the
following form: 

<pre>
int
<i>genfunc</i>(dst, interp, key, argc, argv)
    char *<i>dst</i>;
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>;
    char *<i>key</i>;
    int <i>argc</i>;
    char **<i>argv</i>;
{
}
</pre>

The <i>dst</i> and <i>key</i> parameters will contain the
corresponding fields from the <i>argTable</i> entry. <i>Interp</i>
will be the same as the <i>interp</i> argument to
<b>Tcl_ParseArgv</b>. <i>Argc</i> and <i>argv</i> refer to all of
the options after the matching one. <i>Genfunc</i> should behave in
a fashion similar to <b>Tk_ParseArgv</b>: parse as many of the
remaining arguments as it can, then return any that are left by
compacting them to the beginning of <i>argv</i> (starting at
<i>argv</i>[0]). <i>Genfunc</i> should return a count of how many
arguments are left in <i>argv</i>; <b>Tk_ParseArgv</b> will process
them. If <i>genfunc</i> encounters an error then it should leave an
error message in <i>interp-&gt;result</i>, in the usual Tcl
fashion, and return -1; when this happens <b>Tk_ParseArgv</b> will
abort its processing and return <b>TCL_ERROR</b>.</dd>
</dl>

<h3><a name="M19">FLAGS</a></h3>

<dl class="flags">
<dt><a name="M20"><b>TK_ARGV_DONT_SKIP_FIRST_ARG</b></a></dt>

<dd><b>Tk_ParseArgv</b> normally treats <i>argv[0]</i> as a program
or command name, and returns it to the caller just as if it had not
matched <i>argTable</i>. If this flag is given, then <i>argv[0]</i>
is not given special treatment.</dd>

<dt><a name="M21"><b>TK_ARGV_NO_ABBREV</b></a></dt>

<dd>Normally, <b>Tk_ParseArgv</b> accepts unique abbreviations for
<i>key</i> values in <i>argTable</i>. If this flag is given then
only exact matches will be acceptable.</dd>

<dt><a name="M22"><b>TK_ARGV_NO_LEFTOVERS</b></a></dt>

<dd>Normally, <b>Tk_ParseArgv</b> returns unrecognized arguments to
the caller. If this bit is set in <i>flags</i> then
<b>Tk_ParseArgv</b> will return an error if it encounters any
argument that does not match <i>argTable</i>. The only exception to
this rule is <i>argv[0]</i>, which will be returned to the caller
with no errors as long as <b>TK_ARGV_DONT_SKIP_FIRST_ARG</b> is not
specified.</dd>

<dt><a name="M23"><b>TK_ARGV_NO_DEFAULTS</b></a></dt>

<dd>Normally, <b>Tk_ParseArgv</b> searches an internal table of
standard argument specifiers in addition to <i>argTable</i>. If
this bit is set in <i>flags</i>, then <b>Tk_ParseArgv</b> will use
only <i>argTable</i> and not its default table.</dd>
</dl>

<h3><a name="M24">EXAMPLE</a></h3>

Here is an example definition of an <i>argTable</i> and some sample
command lines that use the options. Note the effect on <i>argc</i>
and <i>argv</i>; arguments processed by <b>Tk_ParseArgv</b> are
eliminated from <i>argv</i>, and <i>argc</i> is updated to reflect
reduced number of arguments. 

<pre>
/*
 * Define and set default values for globals.
 */
int debugFlag = 0;
int numReps = 100;
char defaultFileName[] = "out";
char *fileName = defaultFileName;
Boolean exec = FALSE;

/*
 * Define option descriptions.
 */
Tk_ArgvInfo argTable[] = {
    {"-X", TK_ARGV_CONSTANT, (char *) 1, (char *) &amp;debugFlag,
        "Turn on debugging printfs"},
    {"-N", TK_ARGV_INT, (char *) NULL, (char *) &amp;numReps,
        "Number of repetitions"},
    {"-of", TK_ARGV_STRING, (char *) NULL, (char *) &amp;fileName,
        "Name of file for output"},
    {"x", TK_ARGV_REST, (char *) NULL, (char *) &amp;exec,
        "File to exec, followed by any arguments (must be last argument)."},
    {(char *) NULL, TK_ARGV_END, (char *) NULL, (char *) NULL,
        (char *) NULL}
};

main(argc, argv)
    int argc;
    char *argv[];
{
        ...

    if (Tk_ParseArgv(interp, tkwin, &amp;argc, argv, argTable, 0) != TCL_OK) {
        fprintf(stderr, "%s\n", interp-&gt;result);
        exit(1);
    }

    /*
     * Remainder of the program.
     */
}
</pre>

<p>Note that default values can be assigned to variables named in
<i>argTable</i>: the variables will only be overwritten if the
particular arguments are present in <i>argv</i>. Here are some
example command lines and their effects.</p>

<pre>
prog -N 200 infile        # just sets the numReps variable to 200
prog -of out200 infile    # sets fileName to reference "out200"
prog -XN 10 infile        # sets the debug flag, also sets numReps
</pre>

In all of the above examples, <i>argc</i> will be set by
<b>Tk_ParseArgv</b> to 2, <i>argv</i>[0] will be
&ldquo;prog&rdquo;, <i>argv</i>[1] will be &ldquo;infile&rdquo;,
and <i>argv</i>[2] will be NULL. 

<h3><a name="M25">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#arguments">arguments</a>, <a href=
"../Keywords/C.htm#command line">command line</a>, <a href=
"../Keywords/O.htm#options">options</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1990-1992 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.</div>
</body>
</html>

