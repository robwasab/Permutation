<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - scan manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> scan</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="scan.htm#M2" name="L1464">NAME</a> 

<dl>
<dd>scan - Parse string using conversion specifiers in the style of
sscanf</dd>
</dl>
</dd>

<dd><a href="scan.htm#M3" name="L1465">SYNOPSIS</a> 

<dl>
<dd><b>scan</b> <i>string format</i> ?<i>varName varName
...</i>?</dd>
</dl>
</dd>

<dd><a href="scan.htm#M4" name="L1466">INTRODUCTION</a></dd>

<dd><a href="scan.htm#M5" name="L1467">DETAILS ON SCANNING</a> 

<dl class="details on scanning">
<dd><a href="scan.htm#M6" name="L1468"><b>d</b></a></dd>

<dd><a href="scan.htm#M7" name="L1469"><b>o</b></a></dd>

<dd><a href="scan.htm#M8" name="L1470"><b>x</b></a></dd>

<dd><a href="scan.htm#M9" name="L1471"><b>u</b></a></dd>

<dd><a href="scan.htm#M10" name="L1472"><b>i</b></a></dd>

<dd><a href="scan.htm#M11" name="L1473"><b>c</b></a></dd>

<dd><a href="scan.htm#M12" name="L1474"><b>s</b></a></dd>

<dd><a href="scan.htm#M13" name="L1475"><b>e</b> or <b>f</b> or
<b>g</b></a></dd>

<dd><a href="scan.htm#M14" name=
"L1476"><b>[</b><i>chars</i><b>]</b></a></dd>

<dd><a href="scan.htm#M15" name=
"L1477"><b>[^</b><i>chars</i><b>]</b></a></dd>

<dd><a href="scan.htm#M16" name="L1478"><b>n</b></a></dd>
</dl>
</dd>

<dd><a href="scan.htm#M17" name="L1479">DIFFERENCES FROM ANSI
SSCANF</a></dd>

<dd><a href="scan.htm#M18" name="L1480">EXAMPLES</a></dd>

<dd><a href="scan.htm#M19" name="L1481">SEE ALSO</a></dd>

<dd><a href="scan.htm#M20" name="L1482">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

scan - Parse string using conversion specifiers in the style of
sscanf 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>scan</b> <i>string format</i> ?<i>varName varName ...</i>?<br>
<h3><a name="M4">INTRODUCTION</a></h3>

This command parses substrings from an input string in a fashion
similar to the ANSI C <b>sscanf</b> procedure and returns a count
of the number of conversions performed, or -1 if the end of the
input string is reached before any conversions have been performed.
<i>String</i> gives the input to be parsed and <i>format</i>
indicates how to parse it, using <b>%</b> conversion specifiers as
in <b>sscanf</b>. Each <i>varName</i> gives the name of a variable;
when a substring is scanned from <i>string</i> that matches a
conversion specifier, the substring is assigned to the
corresponding variable. If no <i>varName</i> variables are
specified, then <b>scan</b> works in an inline manner, returning
the data that would otherwise be stored in the variables as a list.
In the inline case, an empty string is returned when the end of the
input string is reached before any conversions have been performed.


<h3><a name="M5">DETAILS ON SCANNING</a></h3>

<b>Scan</b> operates by scanning <i>string</i> and <i>format</i>
together. If the next character in <i>format</i> is a blank or tab
then it matches any number of white space characters in
<i>string</i> (including zero). Otherwise, if it is not a <b>%</b>
character then it must match the next character of <i>string</i>.
When a <b>%</b> is encountered in <i>format</i>, it indicates the
start of a conversion specifier. A conversion specifier contains up
to four fields after the <b>%</b>: a XPG3 position specifier (or a
<b>*</b> to indicate the converted value is to be discarded instead
of assigned to any variable); a number indicating a maximum
substring width; a size modifier; and a conversion character. All
of these fields are optional except for the conversion character.
The fields that are present must appear in the order given above. 

<p>When <b>scan</b> finds a conversion specifier in <i>format</i>,
it first skips any white-space characters in <i>string</i> (unless
the conversion character is <b>[</b> or <b>c</b>). Then it converts
the next input characters according to the conversion specifier and
stores the result in the variable given by the next argument to
<b>scan</b>.</p>

<p>If the <b>%</b> is followed by a decimal number and a <b>$</b>,
as in &ldquo;<b>%2$d</b>&rdquo;, then the variable to use is not
taken from the next sequential argument. Instead, it is taken from
the argument indicated by the number, where 1 corresponds to the
first <i>varName</i>. If there are any positional specifiers in
<i>format</i> then all of the specifiers must be positional. Every
<i>varName</i> on the argument list must correspond to exactly one
conversion specifier or an error is generated, or in the inline
case, any position can be specified at most once and the empty
positions will be filled in with empty strings.</p>

<p>The size modifier field is used only when scanning a substring
into one of Tcl's integer values. The size modifier field dictates
the integer range acceptable to be stored in a variable, or, for
the inline case, in a position in the result list. The
syntactically valid values for the size modifier are <b>h</b>,
<b>L</b>, <b>l</b>, and <b>ll</b>. The <b>h</b> size modifier value
is equivalent to the absence of a size modifier in the the
conversion specifier. Either one indicates the integer range to be
stored is limited to the same range produced by the <b>int()</b>
function of the <b><a href="../TclCmd/expr.htm">expr</a></b>
command. The <b>L</b> size modifier is equivalent to the <b>l</b>
size modifier. Either one indicates the integer range to be stored
is limited to the same range produced by the <b>wide()</b> function
of the <b><a href="../TclCmd/expr.htm">expr</a></b> command. The
<b>ll</b> size modifier indicates that the integer range to be
stored is unlimited.</p>

<p>The following conversion characters are supported:</p>

<dl class="details on scanning">
<dt><a name="M6"><b>d</b></a></dt>

<dd>The input substring must be a decimal integer. It is read in
and the integer value is stored in the variable, truncated as
required by the size modifier value.</dd>

<dt><a name="M7"><b>o</b></a></dt>

<dd>The input substring must be an octal integer. It is read in and
the integer value is stored in the variable, truncated as required
by the size modifier value.</dd>

<dt><a name="M8"><b>x</b></a></dt>

<dd>The input substring must be a hexadecimal integer. It is read
in and the integer value is stored in the variable, truncated as
required by the size modifier value.</dd>

<dt><a name="M9"><b>u</b></a></dt>

<dd>The input substring must be a decimal integer. The integer
value is truncated as required by the size modifier value, and the
corresponding unsigned value for that truncated range is computed
and stored in the variable as a decimal string. The conversion
makes no sense without reference to a truncation range, so the size
modifier <b>ll</b> is not permitted in combination with conversion
character <b>u</b>.</dd>

<dt><a name="M10"><b>i</b></a></dt>

<dd>The input substring must be an integer. The base (i.e. decimal,
binary, octal, or hexadecimal) is determined in the same fashion as
described in <b><a href="../TclCmd/expr.htm">expr</a></b>. The
integer value is stored in the variable, truncated as required by
the size modifier value.</dd>

<dt><a name="M11"><b>c</b></a></dt>

<dd>A single character is read in and its Unicode value is stored
in the variable as an integer value. Initial white space is not
skipped in this case, so the input substring may be a white-space
character.</dd>

<dt><a name="M12"><b>s</b></a></dt>

<dd>The input substring consists of all the characters up to the
next white-space character; the characters are copied to the
variable.</dd>

<dt><a name="M13"><b>e</b> or <b>f</b> or <b>g</b></a></dt>

<dd>The input substring must be a floating-point number consisting
of an optional sign, a string of decimal digits possibly containing
a decimal point, and an optional exponent consisting of an <b>e</b>
or <b>E</b> followed by an optional sign and a string of decimal
digits. It is read in and stored in the variable as a
floating-point value.</dd>

<dt><a name="M14"><b>[</b><i>chars</i><b>]</b></a></dt>

<dd>The input substring consists of one or more characters in
<i>chars</i>. The matching string is stored in the variable. If the
first character between the brackets is a <b>]</b> then it is
treated as part of <i>chars</i> rather than the closing bracket for
the set. If <i>chars</i> contains a sequence of the form
<i>a</i><b>-</b><i>b</i> then any character between <i>a</i> and
<i>b</i> (inclusive) will match. If the first or last character
between the brackets is a <b>-</b>, then it is treated as part of
<i>chars</i> rather than indicating a range.</dd>

<dt><a name="M15"><b>[^</b><i>chars</i><b>]</b></a></dt>

<dd>The input substring consists of one or more characters not in
<i>chars</i>. The matching string is stored in the variable. If the
character immediately following the <b>^</b> is a <b>]</b> then it
is treated as part of the set rather than the closing bracket for
the set. If <i>chars</i> contains a sequence of the form
<i>a</i><b>-</b><i>b</i> then any character between <i>a</i> and
<i>b</i> (inclusive) will be excluded from the set. If the first or
last character between the brackets is a <b>-</b>, then it is
treated as part of <i>chars</i> rather than indicating a range
value.</dd>

<dt><a name="M16"><b>n</b></a></dt>

<dd>No input is consumed from the input string. Instead, the total
number of characters scanned from the input string so far is stored
in the variable.</dd>
</dl>

<p>The number of characters read from the input for a conversion is
the largest number that makes sense for that particular conversion
(e.g. as many decimal digits as possible for <b>%d</b>, as many
octal digits as possible for <b>%o</b>, and so on). The input
substring for a given conversion terminates either when a
white-space character is encountered or when the maximum substring
width has been reached, whichever comes first. If a <b>*</b> is
present in the conversion specifier then no variable is assigned
and the next scan argument is not consumed.</p>

<h3><a name="M17">DIFFERENCES FROM ANSI SSCANF</a></h3>

The behavior of the <b>scan</b> command is the same as the behavior
of the ANSI C <b>sscanf</b> procedure except for the following
differences: 

<dl class="differences from ansi sscanf">
<dt>[1]</dt>

<dd><b>%p</b> conversion specifier is not supported.</dd>

<dt>[2]</dt>

<dd>For <b>%c</b> conversions a single character value is converted
to a decimal string, which is then assigned to the corresponding
<i>varName</i>; no substring width may be specified for this
conversion.</dd>

<dt>[3]</dt>

<dd>The <b>h</b> modifier is always ignored and the <b>l</b> and
<b>L</b> modifiers are ignored when converting real values (i.e.
type <b>double</b> is used for the internal representation). The
<b>ll</b> modifier has no <b>sscanf</b> counterpart.</dd>

<dt>[4]</dt>

<dd>If the end of the input string is reached before any
conversions have been performed and no variables are given, an
empty string is returned.</dd>
</dl>

<h3><a name="M18">EXAMPLES</a></h3>

Convert a UNICODE character to its numeric value: 

<pre>
set char "x"
set value [<b>scan</b> $char %c]
</pre>

<p>Parse a simple color specification of the form <i>#RRGGBB</i>
using hexadecimal conversions with substring sizes:</p>

<pre>
set string "#08D03F"
<b>scan</b> $string "#%2x%2x%2x" r g b
</pre>

<p>Parse a <i>HH:MM</i> time string, noting that this avoids
problems with octal numbers by forcing interpretation as decimals
(if we did not care, we would use the <b>%i</b> conversion
instead):</p>

<pre>
set string "08:08"   ;# *Not* octal!
if {[<b>scan</b> $string "%d:%d" hours minutes] != 2} {
   error "not a valid time string"
}
# We have to understand numeric ranges ourselves...
if {$minutes &lt; 0 || $minutes &gt; 59} {
   error "invalid number of minutes"
}
</pre>

<p>Break a string up into sequences of non-whitespace characters
(note the use of the <b>%n</b> conversion so that we get skipping
over leading whitespace correct):</p>

<pre>
set string " a string {with braced words} + leading space "
set words {}
while {[<b>scan</b> $string %s%n word length] == 2} {
   lappend words $word
   set string [string range $string $length end]
}
</pre>

<p>Parse a simple coordinate string, checking that it is complete
by looking for the terminating character explicitly:</p>

<pre>
set string "(5.2,-4e-2)"
# Note that the spaces before the literal parts of
# the scan pattern are significant, and that ")" is
# the Unicode character \u0029
if {
   [<b>scan</b> $string " (%f ,%f %c" x y last] != 3
   || $last != 0x0029
} then {
   error "invalid coordinate string"
}
puts "X=$x, Y=$y"
</pre>

<p>An interactive session demonstrating the truncation of integer
values determined by size modifiers:</p>

<pre>
% set tcl_platform(wordSize)
4
% scan 20000000000000000000 %d
2147483647
% scan 20000000000000000000 %ld
9223372036854775807
% scan 20000000000000000000 %lld
20000000000000000000
</pre>

<h3><a name="M19">SEE ALSO</a></h3>

<b><a href="../TclCmd/format.htm">format</a></b>, <b>sscanf</b> 

<h3><a name="M20">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#conversion specifier">conversion
specifier</a>, <a href="../Keywords/P.htm#parse">parse</a>, <a
href="../Keywords/S.htm#scan">scan</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc. Copyright &copy;
2000 Scriptics Corporation.</div>
</body>
</html>

