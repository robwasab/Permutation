<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_ObjType manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> ObjectType</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="ObjectType.htm#M2" name="L469">NAME</a> 

<dl>
<dd>Tcl_RegisterObjType, Tcl_GetObjType, Tcl_AppendAllObjTypes,
Tcl_ConvertToType - manipulate Tcl object types</dd>
</dl>
</dd>

<dd><a href="ObjectType.htm#M3" name="L470">SYNOPSIS</a></dd>

<dd><a href="ObjectType.htm#M4" name="L471">ARGUMENTS</a></dd>

<dd><a href="ObjectType.htm#M5" name="L472">DESCRIPTION</a></dd>

<dd><a href="ObjectType.htm#M6" name="L473">THE TCL_OBJTYPE
STRUCTURE</a></dd>

<dd><a href="ObjectType.htm#M7" name="L474">THE NAME FIELD</a></dd>

<dd><a href="ObjectType.htm#M8" name="L475">THE SETFROMANYPROC
FIELD</a></dd>

<dd><a href="ObjectType.htm#M9" name="L476">THE UPDATESTRINGPROC
FIELD</a></dd>

<dd><a href="ObjectType.htm#M10" name="L477">THE DUPINTREPPROC
FIELD</a></dd>

<dd><a href="ObjectType.htm#M11" name="L478">THE FREEINTREPPROC
FIELD</a></dd>

<dd><a href="ObjectType.htm#M12" name="L479">SEE ALSO</a></dd>

<dd><a href="ObjectType.htm#M13" name="L480">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_RegisterObjType, Tcl_GetObjType, Tcl_AppendAllObjTypes,
Tcl_ConvertToType - manipulate Tcl object types 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
<b>Tcl_RegisterObjType</b>(<i>typePtr</i>)<br>
Tcl_ObjType *<br>
<b>Tcl_GetObjType</b>(<i>typeName</i>)<br>
int<br>
<b>Tcl_AppendAllObjTypes</b>(<i>interp, objPtr</i>)<br>
int<br>
<b>Tcl_ConvertToType</b>(<i>interp, objPtr, typePtr</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt>Tcl_ObjType <b>*typePtr</b> (in)</dt>

<dd>Points to the structure containing information about the Tcl
object type. This storage must live forever, typically by being
statically allocated.</dd>

<dt>const char <b>*typeName</b> (in)</dt>

<dd>The name of a Tcl object type that <b>Tcl_GetObjType</b> should
look up.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter to use for error reporting.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>For <b>Tcl_AppendAllObjTypes</b>, this points to the object
onto which it appends the name of each object type as a list
element. For <b>Tcl_ConvertToType</b>, this points to an object
that must have been the result of a previous call to <b><a href=
"../TclLib/Object.htm">Tcl_NewObj</a></b>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

The procedures in this man page manage Tcl object types. They are
used to register new object types, look up types, and force
conversions from one type to another. 

<p><b>Tcl_RegisterObjType</b> registers a new Tcl object type in
the table of all object types that <b>Tcl_GetObjType</b> can look
up by name. There are other object types supported by Tcl as well,
which Tcl chooses not to register. Extensions can likewise choose
to register the object types they create or not. The argument
<i>typePtr</i> points to a Tcl_ObjType structure that describes the
new type by giving its name and by supplying pointers to four
procedures that implement the type. If the type table already
contains a type with the same name as in <i>typePtr</i>, it is
replaced with the new type. The Tcl_ObjType structure is described
in the section <b>THE TCL_OBJTYPE STRUCTURE</b> below.</p>

<p><b>Tcl_GetObjType</b> returns a pointer to the registered
Tcl_ObjType with name <i>typeName</i>. It returns NULL if no type
with that name is registered.</p>

<p><b>Tcl_AppendAllObjTypes</b> appends the name of each registered
object type as a list element onto the Tcl object referenced by
<i>objPtr</i>. The return value is <b>TCL_OK</b> unless there was
an error converting <i>objPtr</i> to a list object; in that case
<b>TCL_ERROR</b> is returned.</p>

<p><b>Tcl_ConvertToType</b> converts an object from one type to
another if possible. It creates a new internal representation for
<i>objPtr</i> appropriate for the target type <i>typePtr</i> and
sets its <i>typePtr</i> member as determined by calling the
<i>typePtr-&gt;setFromAnyProc</i> routine. Any internal
representation for <i>objPtr</i>'s old type is freed. If an error
occurs during conversion, it returns <b>TCL_ERROR</b> and leaves an
error message in the result object for <i>interp</i> unless
<i>interp</i> is NULL. Otherwise, it returns <b>TCL_OK</b>. Passing
a NULL <i>interp</i> allows this procedure to be used as a test
whether the conversion can be done (and in fact was done).</p>

<p>In many cases, the <i>typePtr-&gt;setFromAnyProc</i> routine
will set <i>objPtr-&gt;typePtr</i> to the argument value
<i>typePtr</i>, but that is no longer guaranteed. The
<i>setFromAnyProc</i> is free to set the internal representation
for <i>objPtr</i> to make use of another related Tcl_ObjType, if it
sees fit.</p>

<h3><a name="M6">THE TCL_OBJTYPE STRUCTURE</a></h3>

Extension writers can define new object types by defining four
procedures and initializing a Tcl_ObjType structure to describe the
type. Extension writers may also pass a pointer to their
Tcl_ObjType structure to <b>Tcl_RegisterObjType</b> if they wish to
permit other extensions to look up their Tcl_ObjType by name with
the <b>Tcl_GetObjType</b> routine. The <b>Tcl_ObjType</b> structure
is defined as follows: 

<pre>
typedef struct Tcl_ObjType {
    char *<i>name</i>;
    Tcl_FreeInternalRepProc *<i>freeIntRepProc</i>;
    Tcl_DupInternalRepProc *<i>dupIntRepProc</i>;
    Tcl_UpdateStringProc *<i>updateStringProc</i>;
    Tcl_SetFromAnyProc *<i>setFromAnyProc</i>;
} Tcl_ObjType;
</pre>

<h4><a name="M7">THE NAME FIELD</a></h4>

The <i>name</i> member describes the name of the type, e.g.
<b>int</b>. When a type is registered, this is the name used by
callers of <b>Tcl_GetObjType</b> to lookup the type. For
unregistered types, the <i>name</i> field is primarily of value for
debugging. The remaining four members are pointers to procedures
called by the generic Tcl object code: 

<h4><a name="M8">THE SETFROMANYPROC FIELD</a></h4>

The <i>setFromAnyProc</i> member contains the address of a function
called to create a valid internal representation from an object's
string representation. 

<pre>
typedef int (Tcl_SetFromAnyProc) (<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
        Tcl_Obj *<i>objPtr</i>);
</pre>

<p>If an internal representation cannot be created from the string,
it returns <b>TCL_ERROR</b> and puts a message describing the error
in the result object for <i>interp</i> unless <i>interp</i> is
NULL. If <i>setFromAnyProc</i> is successful, it stores the new
internal representation, sets <i>objPtr</i>'s <i>typePtr</i> member
to point to the <b>Tcl_ObjType</b> struct corresponding to the new
internal representation, and returns <b>TCL_OK</b>. Before setting
the new internal representation, the <i>setFromAnyProc</i> must
free any internal representation of <i>objPtr</i>'s old type; it
does this by calling the old type's <i>freeIntRepProc</i> if it is
not NULL.</p>

<p>As an example, the <i>setFromAnyProc</i> for the built-in Tcl
list type gets an up-to-date string representation for
<i>objPtr</i> by calling <b><a href=
"../TclLib/StringObj.htm">Tcl_GetStringFromObj</a></b>. It parses
the string to verify it is in a valid list format and to obtain
each element value in the list, and, if this succeeds, stores the
list elements in <i>objPtr</i>'s internal representation and sets
<i>objPtr</i>'s <i>typePtr</i> member to point to the list type's
Tcl_ObjType structure.</p>

<p>Do not release <i>objPtr</i>'s old internal representation
unless you replace it with a new one or reset the <i>typePtr</i>
member to NULL.</p>

<p>The <i>setFromAnyProc</i> member may be set to NULL, if the
routines making use of the internal representation have no need to
derive that internal representation from an arbitrary string value.
However, in this case, passing a pointer to the type to
Tcl_ConvertToType() will lead to a panic, so to avoid this
possibility, the type should <i>not</i> be registered.</p>

<h4><a name="M9">THE UPDATESTRINGPROC FIELD</a></h4>

The <i>updateStringProc</i> member contains the address of a
function called to create a valid string representation from an
object's internal representation. 

<pre>
typedef void (Tcl_UpdateStringProc) (Tcl_Obj *<i>objPtr</i>);
</pre>

<p><i>objPtr</i>'s <i>bytes</i> member is always NULL when it is
called. It must always set <i>bytes</i> non-NULL before returning.
We require the string representation's byte array to have a null
after the last byte, at offset <i>length</i>, and to have no null
bytes before that; this allows string representations to be treated
as conventional null character-terminated C strings. These
restrictions are easily met by using Tcl's internal UTF encoding
for the string representation, same as one would do for other Tcl
routines accepting string values as arguments. Storage for the byte
array must be allocated in the heap by <b><a href=
"../TclLib/Alloc.htm">Tcl_Alloc</a></b> or <b><a href=
"../TclLib/Alloc.htm">ckalloc</a></b>. Note that
<i>updateStringProc</i>s must allocate enough storage for the
string's bytes and the terminating null byte.</p>

<p>The <i>updateStringProc</i> for Tcl's built-in double type, for
example, calls <a href="../TclLib/PrintDbl.htm">Tcl_PrintDouble</a>
to write to a buffer of size TCL_DOUBLE_SPACE, then allocates and
copies the string representation to just enough space to hold it. A
pointer to the allocated space is stored in the <i>bytes</i>
member.</p>

<p>The <i>updateStringProc</i> member may be set to NULL, if the
routines making use of the internal representation are written so
that the string representation is never invalidated. Failure to
meet this obligation will lead to panics or crashes when <b><a
href="../TclLib/StringObj.htm">Tcl_GetStringFromObj</a></b> or
other similar routines ask for the string representation.</p>

<h4><a name="M10">THE DUPINTREPPROC FIELD</a></h4>

The <i>dupIntRepProc</i> member contains the address of a function
called to copy an internal representation from one object to
another. 

<pre>
typedef void (Tcl_DupInternalRepProc) (Tcl_Obj *<i>srcPtr</i>,
        Tcl_Obj *<i>dupPtr</i>);
</pre>

<p><i>dupPtr</i>'s internal representation is made a copy of
<i>srcPtr</i>'s internal representation. Before the call,
<i>srcPtr</i>'s internal representation is valid and
<i>dupPtr</i>'s is not. <i>srcPtr</i>'s object type determines what
copying its internal representation means.</p>

<p>For example, the <i>dupIntRepProc</i> for the Tcl integer type
simply copies an integer. The built-in list type's
<i>dupIntRepProc</i> uses a far more sophisticated scheme to
continue sharing storage as much as it reasonably can.</p>

<h4><a name="M11">THE FREEINTREPPROC FIELD</a></h4>

The <i>freeIntRepProc</i> member contains the address of a function
that is called when an object is freed. 

<pre>
typedef void (Tcl_FreeInternalRepProc) (Tcl_Obj *<i>objPtr</i>);
</pre>

<p>The <i>freeIntRepProc</i> function can deallocate the storage
for the object's internal representation and do other type-specific
processing necessary when an object is freed.</p>

<p>For example, the list type's <i>freeIntRepProc</i> respects the
storage sharing scheme established by the <i>dupIntRepProc</i> so
that it only frees storage when the last object sharing it is being
freed.</p>

<p>The <i>freeIntRepProc</i> member can be set to NULL to indicate
that the internal representation does not require freeing. The
<i>freeIntRepProc</i> implementation must not access the
<i>bytes</i> member of the object, since Tcl makes its own internal
uses of that field during object deletion. The defined tasks for
the <i>freeIntRepProc</i> have no need to consult the <i>bytes</i>
member.</p>

<h3><a name="M12">SEE ALSO</a></h3>

<b><a href="../TclLib/Object.htm">Tcl_NewObj</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_DecrRefCount</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_IncrRefCount</a></b> 

<h3><a name="M13">KEYWORDS</a></h3>

<a href="../Keywords/I.htm#internal representation">internal
representation</a>, <a href="../Keywords/O.htm#object">object</a>,
<a href="../Keywords/O.htm#object type">object type</a>, <a href=
"../Keywords/S.htm#string representation">string
representation</a>, <a href=
"../Keywords/T.htm#type conversion">type conversion</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1996-1997 Sun Microsystems, Inc.</div>
</body>
</html>

