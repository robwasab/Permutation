<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Built-In Commands - canvas manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkCmd</a>
<small>&gt;</small> canvas</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="canvas.htm#M2" name="L155">NAME</a> 

<dl>
<dd>canvas - Create and manipulate canvas widgets</dd>
</dl>
</dd>

<dd><a href="canvas.htm#M3" name="L156">SYNOPSIS</a> 

<dl>
<dd><b>canvas</b> <i>pathName</i> ?<i>options</i>?</dd>
</dl>
</dd>

<dd><a href="canvas.htm#M4" name="L157">STANDARD OPTIONS</a> 

<dl>
<dd><a href="options.htm#M-background">-background or -bg,
background, Background</a></dd>

<dd><a href="options.htm#M-borderwidth">-borderwidth or -bd,
borderWidth, BorderWidth</a></dd>

<dd><a href="options.htm#M-cursor">-cursor, cursor, Cursor</a></dd>

<dd><a href=
"options.htm#M-highlightbackground">-highlightbackground,
highlightBackground, HighlightBackground</a></dd>

<dd><a href="options.htm#M-highlightcolor">-highlightcolor,
highlightColor, HighlightColor</a></dd>

<dd><a href="options.htm#M-highlightthickness">-highlightthickness,
highlightThickness, HighlightThickness</a></dd>

<dd><a href="options.htm#M-insertbackground">-insertbackground,
insertBackground, Foreground</a></dd>

<dd><a href="options.htm#M-insertborderwidth">-insertborderwidth,
insertBorderWidth, BorderWidth</a></dd>

<dd><a href="options.htm#M-insertofftime">-insertofftime,
insertOffTime, OffTime</a></dd>

<dd><a href="options.htm#M-insertontime">-insertontime,
insertOnTime, OnTime</a></dd>

<dd><a href="options.htm#M-insertwidth">-insertwidth, insertWidth,
InsertWidth</a></dd>

<dd><a href="options.htm#M-relief">-relief, relief, Relief</a></dd>

<dd><a href="options.htm#M-selectbackground">-selectbackground,
selectBackground, Foreground</a></dd>

<dd><a href="options.htm#M-selectborderwidth">-selectborderwidth,
selectBorderWidth, BorderWidth</a></dd>

<dd><a href="options.htm#M-selectforeground">-selectforeground,
selectForeground, Background</a></dd>

<dd><a href="options.htm#M-takefocus">-takefocus, takeFocus,
TakeFocus</a></dd>

<dd><a href="options.htm#M-xscrollcommand">-xscrollcommand,
xScrollCommand, ScrollCommand</a></dd>

<dd><a href="options.htm#M-yscrollcommand">-yscrollcommand,
yScrollCommand, ScrollCommand</a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M5" name="L158">WIDGET-SPECIFIC OPTIONS</a>


<dl>
<dd><a href="canvas.htm#M6" name="L159">-closeenough, closeEnough,
CloseEnough</a></dd>
</dl>

<dl>
<dd><a href="canvas.htm#M7" name="L160">-confine, confine,
Confine</a></dd>

<dd><a href="canvas.htm#M8" name="L161">-height, height,
Height</a></dd>

<dd><a href="canvas.htm#M9" name="L162">-scrollregion,
scrollRegion, ScrollRegion</a></dd>

<dd><a href="canvas.htm#M10" name="L163">-state, state,
State</a></dd>

<dd><a href="canvas.htm#M11" name="L164">-width, width,
width</a></dd>

<dd><a href="canvas.htm#M12" name="L165">-xscrollincrement,
xScrollIncrement, ScrollIncrement</a></dd>

<dd><a href="canvas.htm#M13" name="L166">-yscrollincrement,
yScrollIncrement, ScrollIncrement</a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M14" name="L167">INTRODUCTION</a></dd>

<dd><a href="canvas.htm#M15" name="L168">DISPLAY LIST</a></dd>

<dd><a href="canvas.htm#M16" name="L169">ITEM IDS AND TAGS</a></dd>

<dd><a href="canvas.htm#M17" name="L170">COORDINATES</a></dd>

<dd><a href="canvas.htm#M18" name="L171">TRANSFORMATIONS</a></dd>

<dd><a href="canvas.htm#M19" name="L172">INDICES</a> 

<dl class="indices">
<dd><a href="canvas.htm#M20" name="L173"><i>number</i></a></dd>

<dd><a href="canvas.htm#M21" name="L174"><b>end</b></a></dd>

<dd><a href="canvas.htm#M22" name="L175"><b>insert</b></a></dd>

<dd><a href="canvas.htm#M23" name="L176"><b>sel.first</b></a></dd>

<dd><a href="canvas.htm#M24" name="L177"><b>sel.last</b></a></dd>

<dd><a href="canvas.htm#M25" name=
"L178"><b>@</b><i>x,y</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M26" name="L179">DASH PATTERNS</a></dd>

<dd><a href="canvas.htm#M27" name="L180">WIDGET COMMAND</a> 

<dl class="widget command">
<dd><a href="canvas.htm#M28" name="L181"><i>pathName</i>
<b>addtag</b> <i>tag searchSpec</i> ?<i>arg arg ...</i>?</a> 

<dl class="widget command">
<dd><a href="canvas.htm#M29" name="L182"><b>above</b>
<i>tagOrId</i></a></dd>

<dd><a href="canvas.htm#M30" name="L183"><b>all</b></a></dd>

<dd><a href="canvas.htm#M31" name="L184"><b>below</b>
<i>tagOrId</i></a></dd>

<dd><a href="canvas.htm#M32" name="L185"><b>closest</b> <i>x y</i>
?<i>halo</i>? ?<i>start</i>?</a></dd>

<dd><a href="canvas.htm#M33" name="L186"><b>enclosed</b> <i>x1</i>
<i>y1</i> <i>x2</i> <i>y2</i></a></dd>

<dd><a href="canvas.htm#M34" name="L187"><b>overlapping</b>
<i>x1</i> <i>y1</i> <i>x2</i> <i>y2</i></a></dd>

<dd><a href="canvas.htm#M35" name="L188"><b>withtag</b>
<i>tagOrId</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M36" name="L189"><i>pathName</i>
<b>bbox</b> <i>tagOrId</i> ?<i>tagOrId tagOrId ...</i>?</a></dd>

<dd><a href="canvas.htm#M37" name="L190"><i>pathName</i>
<b>bind</b> <i>tagOrId</i> ?<i>sequence</i>?
?<i>command</i>?</a></dd>

<dd><a href="canvas.htm#M38" name="L191"><i>pathName</i>
<b>canvasx</b> <i>screenx</i> ?<i>gridspacing</i>?</a></dd>

<dd><a href="canvas.htm#M39" name="L192"><i>pathName</i>
<b>canvasy</b> <i>screeny</i> ?<i>gridspacing</i>?</a></dd>

<dd><a href="canvas.htm#M40" name="L193"><i>pathName</i>
<b>cget</b> <i>option</i></a></dd>

<dd><a href="canvas.htm#M41" name="L194"><i>pathName</i>
<b>configure ?</b><i>option</i>? ?<i>value</i>? ?<i>option value
...</i>?</a></dd>

<dd><a href="canvas.htm#M42" name="L195"><i>pathName</i>
<b>coords</b> <i>tagOrId</i> ?<i>x0 y0 ...</i>?</a></dd>

<dd><a href="canvas.htm#M43" name="L196"><i>pathName</i>
<b>coords</b> <i>tagOrId</i> ?<i>coordList</i>?</a></dd>

<dd><a href="canvas.htm#M44" name="L197"><i>pathName</i>
<b>create</b> <i>type x y</i> ?<i>x y ...</i>? ?<i>option value
...</i>?</a></dd>

<dd><a href="canvas.htm#M45" name="L198"><i>pathName</i>
<b>create</b> <i>type coordList</i> ?<i>option value
...</i>?</a></dd>

<dd><a href="canvas.htm#M46" name="L199"><i>pathName</i>
<b>dchars</b> <i>tagOrId first</i> ?<i>last</i>?</a></dd>

<dd><a href="canvas.htm#M47" name="L200"><i>pathName</i>
<b>delete</b> ?<i>tagOrId tagOrId ...</i>?</a></dd>

<dd><a href="canvas.htm#M48" name="L201"><i>pathName</i>
<b>dtag</b> <i>tagOrId</i> ?<i>tagToDelete</i>?</a></dd>

<dd><a href="canvas.htm#M49" name="L202"><i>pathName</i>
<b>find</b> <i>searchCommand</i> ?<i>arg arg ...</i>?</a></dd>

<dd><a href="canvas.htm#M50" name="L203"><i>pathName</i>
<b>focus</b> ?<i>tagOrId</i>?</a></dd>

<dd><a href="canvas.htm#M51" name="L204"><i>pathName</i>
<b>gettags</b> <i>tagOrId</i></a></dd>

<dd><a href="canvas.htm#M52" name="L205"><i>pathName</i>
<b>icursor</b> <i>tagOrId index</i></a></dd>

<dd><a href="canvas.htm#M53" name="L206"><i>pathName</i>
<b>index</b> <i>tagOrId index</i></a></dd>

<dd><a href="canvas.htm#M54" name="L207"><i>pathName</i>
<b>insert</b> <i>tagOrId beforeThis string</i></a></dd>

<dd><a href="canvas.htm#M55" name="L208"><i>pathName</i>
<b>itemcget</b> <i>tagOrId</i> <i>option</i></a></dd>

<dd><a href="canvas.htm#M56" name="L209"><i>pathName</i>
<b>itemconfigure</b> <i>tagOrId</i> ?<i>option</i>? ?<i>value</i>?
?<i>option value ...</i>?</a></dd>

<dd><a href="canvas.htm#M57" name="L210"><i>pathName</i>
<b>lower</b> <i>tagOrId</i> ?<i>belowThis</i>?</a></dd>

<dd><a href="canvas.htm#M58" name="L211"><i>pathName</i>
<b>move</b> <i>tagOrId xAmount yAmount</i></a></dd>

<dd><a href="canvas.htm#M59" name="L212"><i>pathName</i>
<b>postscript</b> ?<i>option value option value ...</i>?</a> 

<dl class="widget command">
<dd><a href="canvas.htm#M60" name="L213"><b>-colormap</b>
<i>varName</i></a></dd>

<dd><a href="canvas.htm#M61" name="L214"><b>-colormode</b>
<i>mode</i></a></dd>

<dd><a href="canvas.htm#M62" name="L215"><b>-file</b>
<i>fileName</i></a></dd>

<dd><a href="canvas.htm#M63" name="L216"><b>-fontmap</b>
<i>varName</i></a></dd>

<dd><a href="canvas.htm#M64" name="L217"><b>-height</b>
<i>size</i></a></dd>

<dd><a href="canvas.htm#M65" name="L218"><b>-pageanchor</b>
<i>anchor</i></a></dd>

<dd><a href="canvas.htm#M66" name="L219"><b>-pageheight</b>
<i>size</i></a></dd>

<dd><a href="canvas.htm#M67" name="L220"><b>-pagewidth</b>
<i>size</i></a></dd>

<dd><a href="canvas.htm#M68" name="L221"><b>-pagex</b>
<i>position</i></a></dd>

<dd><a href="canvas.htm#M69" name="L222"><b>-pagey</b>
<i>position</i></a></dd>

<dd><a href="canvas.htm#M70" name="L223"><b>-rotate</b>
<i>boolean</i></a></dd>

<dd><a href="canvas.htm#M71" name="L224"><b>-width</b>
<i>size</i></a></dd>

<dd><a href="canvas.htm#M72" name="L225"><b>-x</b>
<i>position</i></a></dd>

<dd><a href="canvas.htm#M73" name="L226"><b>-y</b>
<i>position</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M74" name="L227"><i>pathName</i>
<b>raise</b> <i>tagOrId</i> ?<i>aboveThis</i>?</a></dd>

<dd><a href="canvas.htm#M75" name="L228"><i>pathName</i>
<b>scale</b> <i>tagOrId xOrigin yOrigin xScale yScale</i></a></dd>

<dd><a href="canvas.htm#M76" name="L229"><i>pathName</i>
<b>scan</b> <i>option args</i></a> 

<dl class="widget command">
<dd><a href="canvas.htm#M77" name="L230"><i>pathName</i> <b>scan
mark</b> <i>x y</i></a></dd>

<dd><a href="canvas.htm#M78" name="L231"><i>pathName</i> <b>scan
dragto</b> <i>x y ?gain?</i>.</a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M79" name="L232"><i>pathName</i>
<b>select</b> <i>option</i> ?<i>tagOrId arg</i>?</a> 

<dl class="widget command">
<dd><a href="canvas.htm#M80" name="L233"><i>pathName</i> <b>select
adjust</b> <i>tagOrId index</i></a></dd>

<dd><a href="canvas.htm#M81" name="L234"><i>pathName</i> <b>select
clear</b></a></dd>

<dd><a href="canvas.htm#M82" name="L235"><i>pathName</i> <b>select
from</b> <i>tagOrId index</i></a></dd>

<dd><a href="canvas.htm#M83" name="L236"><i>pathName</i> <b>select
item</b></a></dd>

<dd><a href="canvas.htm#M84" name="L237"><i>pathName</i> <b>select
to</b> <i>tagOrId index</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M85" name="L238"><i>pathName</i>
<b>type</b> <i>tagOrId</i></a></dd>

<dd><a href="canvas.htm#M86" name="L239"><i>pathName</i>
<b>xview</b> ?<i>args</i>?</a> 

<dl class="widget command">
<dd><a href="canvas.htm#M87" name="L240"><i>pathName</i>
<b>xview</b></a></dd>

<dd><a href="canvas.htm#M88" name="L241"><i>pathName</i> <b>xview
moveto</b> <i>fraction</i></a></dd>

<dd><a href="canvas.htm#M89" name="L242"><i>pathName</i> <b>xview
scroll</b> <i>number what</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M90" name="L243"><i>pathName</i>
<b>yview</b> <i>?args</i>?</a> 

<dl class="widget command">
<dd><a href="canvas.htm#M91" name="L244"><i>pathName</i>
<b>yview</b></a></dd>

<dd><a href="canvas.htm#M92" name="L245"><i>pathName</i> <b>yview
moveto</b> <i>fraction</i></a></dd>

<dd><a href="canvas.htm#M93" name="L246"><i>pathName</i> <b>yview
scroll</b> <i>number what</i></a></dd>
</dl>
</dd>
</dl>
</dd>

<dd><a href="canvas.htm#M94" name="L247">OVERVIEW OF ITEM
TYPES</a></dd>

<dd><a href="canvas.htm#M95" name="L248">COMMON ITEM OPTIONS</a> 

<dl class="common item options">
<dd><a href="canvas.htm#M96" name="L249"><b>-dash</b>
<i>pattern</i></a></dd>

<dd><a href="canvas.htm#M97" name="L250"><b>-activedash</b>
<i>pattern</i></a></dd>

<dd><a href="canvas.htm#M98" name="L251"><b>-disableddash</b>
<i>pattern</i></a></dd>

<dd><a href="canvas.htm#M99" name="L252"><b>-dashoffset</b>
<i>offset</i></a></dd>

<dd><a href="canvas.htm#M100" name="L253"><b>-fill</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M101" name="L254"><b>-activefill</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M102" name="L255"><b>-disabledfill</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M103" name="L256"><b>-outline</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M104" name="L257"><b>-activeoutline</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M105" name="L258"><b>-disabledoutline</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M106" name="L259"><b>-offset</b>
<i>offset</i></a></dd>

<dd><a href="canvas.htm#M107" name="L260"><b>-outlinestipple</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M108" name=
"L261"><b>-activeoutlinestipple</b> <i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M109" name=
"L262"><b>-disabledoutlinestipple</b> <i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M110" name="L263"><b>-outlineoffset</b>
<i>offset</i></a></dd>

<dd><a href="canvas.htm#M111" name="L264"><b>-stipple</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M112" name="L265"><b>-activestipple</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M113" name="L266"><b>-disabledstipple</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M114" name="L267"><b>-state</b>
<i>state</i></a></dd>

<dd><a href="canvas.htm#M115" name="L268"><b>-tags</b>
<i>tagList</i></a></dd>

<dd><a href="canvas.htm#M116" name="L269"><b>-width</b>
<i>outlineWidth</i></a></dd>

<dd><a href="canvas.htm#M117" name="L270"><b>-activewidth</b>
<i>outlineWidth</i></a></dd>

<dd><a href="canvas.htm#M118" name="L271"><b>-disabledwidth</b>
<i>outlineWidth</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M119" name="L272">ARC ITEMS</a> 

<dl class="arc items">
<dd><a href="canvas.htm#M120" name="L273"><b>-extent</b>
<i>degrees</i></a></dd>

<dd><a href="canvas.htm#M121" name="L274"><b>-start</b>
<i>degrees</i></a></dd>

<dd><a href="canvas.htm#M122" name="L275"><b>-style</b>
<i>type</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M123" name="L276">BITMAP ITEMS</a> 

<dl class="bitmap items">
<dd><a href="canvas.htm#M124" name="L277"><b>-anchor</b>
<i>anchorPos</i></a></dd>

<dd><a href="canvas.htm#M125" name="L278"><b>-background</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M126" name="L279"><b>-activebackground</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M127" name=
"L280"><b>-disabledbackground</b> <i>color</i></a></dd>

<dd><a href="canvas.htm#M128" name="L281"><b>-bitmap</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M129" name="L282"><b>-activebitmap</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M130" name="L283"><b>-disabledbitmap</b>
<i>bitmap</i></a></dd>

<dd><a href="canvas.htm#M131" name="L284"><b>-foreground</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M132" name="L285"><b>-activeforeground</b>
<i>color</i></a></dd>

<dd><a href="canvas.htm#M133" name=
"L286"><b>-disabledforeground</b> <i>color</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M134" name="L287">IMAGE ITEMS</a> 

<dl class="image items">
<dd><a href="canvas.htm#M135" name="L288"><b>-anchor</b>
<i>anchorPos</i></a></dd>

<dd><a href="canvas.htm#M136" name="L289"><b>-image</b>
<i>name</i></a></dd>

<dd><a href="canvas.htm#M137" name="L290"><b>-activeimage</b>
<i>name</i></a></dd>

<dd><a href="canvas.htm#M138" name="L291"><b>-disabledimage</b>
<i>name</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M139" name="L292">LINE ITEMS</a> 

<dl class="line items">
<dd><a href="canvas.htm#M140" name="L293"><b>-arrow</b>
<i>where</i></a></dd>

<dd><a href="canvas.htm#M141" name="L294"><b>-arrowshape</b>
<i>shape</i></a></dd>

<dd><a href="canvas.htm#M142" name="L295"><b>-capstyle</b>
<i>style</i></a></dd>

<dd><a href="canvas.htm#M143" name="L296"><b>-joinstyle</b>
<i>style</i></a></dd>

<dd><a href="canvas.htm#M144" name="L297"><b>-smooth</b>
<i>smoothMethod</i></a></dd>

<dd><a href="canvas.htm#M145" name="L298"><b>-splinesteps</b>
<i>number</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M146" name="L299">OVAL ITEMS</a></dd>

<dd><a href="canvas.htm#M147" name="L300">POLYGON ITEMS</a> 

<dl class="polygon items">
<dd><a href="canvas.htm#M148" name="L301"><b>-joinstyle</b>
<i>style</i></a></dd>

<dd><a href="canvas.htm#M149" name="L302"><b>-smooth</b>
<i>boolean</i></a></dd>

<dd><a href="canvas.htm#M150" name="L303"><b>-splinesteps</b>
<i>number</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M151" name="L304">RECTANGLE ITEMS</a></dd>

<dd><a href="canvas.htm#M152" name="L305">TEXT ITEMS</a> 

<dl class="text items">
<dd><a href="canvas.htm#M153" name="L306"><b>-anchor</b>
<i>anchorPos</i></a></dd>

<dd><a href="canvas.htm#M154" name="L307"><b>-font</b>
<i>fontName</i></a></dd>

<dd><a href="canvas.htm#M155" name="L308"><b>-justify</b>
<i>how</i></a></dd>

<dd><a href="canvas.htm#M156" name="L309"><b>-text</b>
<i>string</i></a></dd>

<dd><a href="canvas.htm#M157" name=
"L310"><b>-underline</b></a></dd>

<dd><a href="canvas.htm#M158" name="L311"><b>-width</b>
<i>lineLength</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M159" name="L312">WINDOW ITEMS</a> 

<dl class="window items">
<dd><a href="canvas.htm#M160" name="L313"><b>-anchor</b>
<i>anchorPos</i></a></dd>

<dd><a href="canvas.htm#M161" name="L314"><b>-height</b>
<i>pixels</i></a></dd>

<dd><a href="canvas.htm#M162" name="L315"><b>-width</b>
<i>pixels</i></a></dd>

<dd><a href="canvas.htm#M163" name="L316"><b>-window</b>
<i>pathName</i></a></dd>
</dl>
</dd>

<dd><a href="canvas.htm#M164" name="L317">APPLICATION-DEFINED ITEM
TYPES</a></dd>

<dd><a href="canvas.htm#M165" name="L318">BINDINGS</a></dd>

<dd><a href="canvas.htm#M166" name="L319">CREDITS</a></dd>

<dd><a href="canvas.htm#M167" name="L320">SEE ALSO</a></dd>

<dd><a href="canvas.htm#M168" name="L321">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

canvas - Create and manipulate canvas widgets 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>canvas</b> <i>pathName</i> ?<i>options</i>?<br>
<h3><a name="M4">STANDARD OPTIONS</a></h3>

<dl>
<dt><b><a href="options.htm#M-background">-background or -bg,
background, Background</a></b></dt>

<dt><b><a href="options.htm#M-borderwidth">-borderwidth or -bd,
borderWidth, BorderWidth</a></b></dt>

<dt><b><a href="options.htm#M-cursor">-cursor, cursor,
Cursor</a></b></dt>

<dt><b><a href=
"options.htm#M-highlightbackground">-highlightbackground,
highlightBackground, HighlightBackground</a></b></dt>

<dt><b><a href="options.htm#M-highlightcolor">-highlightcolor,
highlightColor, HighlightColor</a></b></dt>

<dt><b><a href=
"options.htm#M-highlightthickness">-highlightthickness,
highlightThickness, HighlightThickness</a></b></dt>

<dt><b><a href="options.htm#M-insertbackground">-insertbackground,
insertBackground, Foreground</a></b></dt>

<dt><b><a href=
"options.htm#M-insertborderwidth">-insertborderwidth,
insertBorderWidth, BorderWidth</a></b></dt>

<dt><b><a href="options.htm#M-insertofftime">-insertofftime,
insertOffTime, OffTime</a></b></dt>

<dt><b><a href="options.htm#M-insertontime">-insertontime,
insertOnTime, OnTime</a></b></dt>

<dt><b><a href="options.htm#M-insertwidth">-insertwidth,
insertWidth, InsertWidth</a></b></dt>

<dt><b><a href="options.htm#M-relief">-relief, relief,
Relief</a></b></dt>

<dt><b><a href="options.htm#M-selectbackground">-selectbackground,
selectBackground, Foreground</a></b></dt>

<dt><b><a href=
"options.htm#M-selectborderwidth">-selectborderwidth,
selectBorderWidth, BorderWidth</a></b></dt>

<dt><b><a href="options.htm#M-selectforeground">-selectforeground,
selectForeground, Background</a></b></dt>

<dt><b><a href="options.htm#M-takefocus">-takefocus, takeFocus,
TakeFocus</a></b></dt>

<dt><b><a href="options.htm#M-xscrollcommand">-xscrollcommand,
xScrollCommand, ScrollCommand</a></b></dt>

<dt><b><a href="options.htm#M-yscrollcommand">-yscrollcommand,
yScrollCommand, ScrollCommand</a></b></dt>
</dl>

<h3><a name="M5">WIDGET-SPECIFIC OPTIONS</a></h3>

<dl>
<dt>Command-Line Name: <b><a name="M6">-closeenough</a></b></dt>

<dt>Database Name: <b>closeEnough</b></dt>

<dt>Database Class: <b>CloseEnough</b></dt>

<dd>Specifies a floating-point value indicating how close the mouse
cursor must be to an item before it is considered to be</dd>
</dl>

&ldquo;inside&rdquo; the item. Defaults to 1.0. 

<dl>
<dt>Command-Line Name: <b><a name="M7">-confine</a></b></dt>

<dt>Database Name: <b>confine</b></dt>

<dt>Database Class: <b>Confine</b></dt>

<dd>Specifies a boolean value that indicates whether or not it
should be allowable to set the canvas's view outside the region
defined by the <b>scrollRegion</b> argument. Defaults to true,
which means that the view will be constrained within the scroll
region.</dd>

<dt>Command-Line Name: <b><a name="M8">-height</a></b></dt>

<dt>Database Name: <b>height</b></dt>

<dt>Database Class: <b>Height</b></dt>

<dd>Specifies a desired window height that the canvas widget should
request from its geometry manager. The value may be specified in
any of the forms described in the <b>COORDINATES</b> section
below.</dd>

<dt>Command-Line Name: <b><a name="M9">-scrollregion</a></b></dt>

<dt>Database Name: <b>scrollRegion</b></dt>

<dt>Database Class: <b>ScrollRegion</b></dt>

<dd>Specifies a list with four coordinates describing the left,
top, right, and bottom coordinates of a rectangular region. This
region is used for scrolling purposes and is considered to be the
boundary of the information in the canvas. Each of the coordinates
may be specified in any of the forms given in the
<b>COORDINATES</b> section below.</dd>

<dt>Command-Line Name: <b><a name="M10">-state</a></b></dt>

<dt>Database Name: <b>state</b></dt>

<dt>Database Class: <b>State</b></dt>

<dd>Modifies the default state of the canvas where <i>state</i> may
be set to one of: <b>normal</b>, <b>disabled</b>, or <b>hidden</b>.
Individual canvas objects all have their own state option which may
override the default state. Many options can take separate
specifications such that the appearance of the item can be
different in different situations. The options that start with
<b>active</b> control the appearance when the mouse pointer is over
it, while the option starting with <b>disabled</b> controls the
appearance when the state is disabled. Canvas items which are
<b>disabled</b> will not react to canvas bindings.</dd>

<dt>Command-Line Name: <b><a name="M11">-width</a></b></dt>

<dt>Database Name: <b>width</b></dt>

<dt>Database Class: <b>width</b></dt>

<dd>Specifies a desired window width that the canvas widget should
request from its geometry manager. The value may be specified in
any of the forms described in the <b>COORDINATES</b> section
below.</dd>

<dt>Command-Line Name: <b><a name=
"M12">-xscrollincrement</a></b></dt>

<dt>Database Name: <b>xScrollIncrement</b></dt>

<dt>Database Class: <b>ScrollIncrement</b></dt>

<dd>Specifies an increment for horizontal scrolling, in any of the
usual forms permitted for screen distances. If the value of this
option is greater than zero, the horizontal view in the window will
be constrained so that the canvas x coordinate at the left edge of
the window is always an even multiple of <b>xScrollIncrement</b>;
furthermore, the units for scrolling (e.g., the change in view when
the left and right arrows of a scrollbar are selected) will also be
<b>xScrollIncrement</b>. If the value of this option is less than
or equal to zero, then horizontal scrolling is unconstrained.</dd>

<dt>Command-Line Name: <b><a name=
"M13">-yscrollincrement</a></b></dt>

<dt>Database Name: <b>yScrollIncrement</b></dt>

<dt>Database Class: <b>ScrollIncrement</b></dt>

<dd>Specifies an increment for vertical scrolling, in any of the
usual forms permitted for screen distances. If the value of this
option is greater than zero, the vertical view in the window will
be constrained so that the canvas y coordinate at the top edge of
the window is always an even multiple of <b>yScrollIncrement</b>;
furthermore, the units for scrolling (e.g., the change in view when
the top and bottom arrows of a scrollbar are selected) will also be
<b>yScrollIncrement</b>. If the value of this option is less than
or equal to zero, then vertical scrolling is unconstrained.</dd>
</dl>

<h3><a name="M14">INTRODUCTION</a></h3>

The <b>canvas</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a canvas widget.
Additional options, described above, may be specified on the
command line or in the option database to configure aspects of the
canvas such as its colors and 3-D relief. The <b>canvas</b> command
returns its <i>pathName</i> argument. At the time this command is
invoked, there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist. 

<p>Canvas widgets implement structured graphics. A canvas displays
any number of <i>items</i>, which may be things like rectangles,
circles, lines, and text. Items may be manipulated (e.g. moved or
re-colored) and commands may be associated with items in much the
same way that the <b><a href="../TkCmd/bind.htm">bind</a></b>
command allows commands to be bound to widgets. For example, a
particular command may be associated with the &lt;Button-1&gt;
event so that the command is invoked whenever button 1 is pressed
with the mouse cursor over an item. This means that items in a
canvas can have behaviors defined by the Tcl scripts bound to
them.</p>

<h3><a name="M15">DISPLAY LIST</a></h3>

The items in a canvas are ordered for purposes of display, with the
first item in the display list being displayed first, followed by
the next item in the list, and so on. Items later in the display
list obscure those that are earlier in the display list and are
sometimes referred to as being &ldquo;on top&rdquo; of earlier
items. When a new item is created it is placed at the end of the
display list, on top of everything else. Widget commands may be
used to re-arrange the order of the display list. 

<p>Window items are an exception to the above rules. The underlying
window systems require them always to be drawn on top of other
items. In addition, the stacking order of window items is not
affected by any of the canvas widget commands; you must use the
<b><a href="../TkCmd/raise.htm">raise</a></b> and <b><a href=
"../TkCmd/lower.htm">lower</a></b> Tk commands instead.</p>

<h3><a name="M16">ITEM IDS AND TAGS</a></h3>

Items in a canvas widget may be named in either of two ways: by id
or by tag. Each item has a unique identifying number, which is
assigned to that item when it is created. The id of an item never
changes and id numbers are never re-used within the lifetime of a
canvas widget. 

<p>Each item may also have any number of <i>tags</i> associated
with it. A tag is just a string of characters, and it may take any
form except that of an integer. For example, &ldquo;x123&rdquo; is
OK but &ldquo;123&rdquo; is not. The same tag may be associated
with many different items. This is commonly done to group items in
various interesting ways; for example, all selected items might be
given the tag &ldquo;selected&rdquo;.</p>

<p>The tag <b>all</b> is implicitly associated with every item in
the canvas; it may be used to invoke operations on all the items in
the canvas.</p>

<p>The tag <b>current</b> is managed automatically by Tk; it
applies to the <i>current item</i>, which is the topmost item whose
drawn area covers the position of the mouse cursor (different item
types interpret this in varying ways; see the individual item type
documentation for details). If the mouse is not in the canvas
widget or is not over an item, then no item has the <b>current</b>
tag.</p>

<p>When specifying items in canvas widget commands, if the
specifier is an integer then it is assumed to refer to the single
item with that id. If the specifier is not an integer, then it is
assumed to refer to all of the items in the canvas that have a tag
matching the specifier. The symbol <i>tagOrId</i> is used below to
indicate that an argument specifies either an id that selects a
single item or a tag that selects zero or more items.</p>

<p><i>tagOrId</i> may contain a logical expressions of tags by
using operators: &ldquo;<b>&amp;&amp;</b>&rdquo;,
&ldquo;<b>||</b>&rdquo;, &ldquo;<b>^</b>&rdquo;,
&ldquo;<b>!</b>&rdquo;, and parenthesized subexpressions. For
example:</p>

<pre>
.c find withtag {(a&amp;&amp;!b)||(!a&amp;&amp;b)}
</pre>

or equivalently: 

<pre>
.c find withtag {a^b}
</pre>

will find only those items with either &ldquo;a&rdquo; or
&ldquo;b&rdquo; tags, but not both. 

<p>Some widget commands only operate on a single item at a time; if
<i>tagOrId</i> is specified in a way that names multiple items,
then the normal behavior is for the command to use the first
(lowest) of these items in the display list that is suitable for
the command. Exceptions are noted in the widget command
descriptions below.</p>

<h3><a name="M17">COORDINATES</a></h3>

All coordinates related to canvases are stored as floating-point
numbers. Coordinates and distances are specified in screen units,
which are floating-point numbers optionally followed by one of
several letters. If no letter is supplied then the distance is in
pixels. If the letter is <b>m</b> then the distance is in
millimeters on the screen; if it is <b>c</b> then the distance is
in centimeters; <b>i</b> means inches, and <b>p</b> means printers
points (1/72 inch). Larger y-coordinates refer to points lower on
the screen; larger x-coordinates refer to points farther to the
right. Coordinates can be specified either as an even number of
parameters, or as a single list parameter containing an even number
of x and y coordinate values. 

<h4><a name="M18">TRANSFORMATIONS</a></h4>

Normally the origin of the canvas coordinate system is at the
upper-left corner of the window containing the canvas. It is
possible to adjust the origin of the canvas coordinate system
relative to the origin of the window using the <b>xview</b> and
<b>yview</b> widget commands; this is typically used for scrolling.
Canvases do not support scaling or rotation of the canvas
coordinate system relative to the window coordinate system. 

<p>Individual items may be moved or scaled using widget commands
described below, but they may not be rotated.</p>

<p>Note that the default origin of the canvas's visible area is
coincident with the origin for the whole window as that makes
bindings using the mouse position easier to work with; you only
need to use the <b>canvasx</b> and <b>canvasy</b> widget commands
if you adjust the origin of the visible area. However, this also
means that any focus ring (as controlled by the
<b>-highlightthickness</b> option) and window border (as controlled
by the <b>-borderwidth</b> option) must be taken into account
before you get to the visible area of the canvas.</p>

<h3><a name="M19">INDICES</a></h3>

Text items support the notion of an <i>index</i> for identifying
particular positions within the item. In a similar fashion, line
and polygon items support <i>index</i> for identifying, inserting
and deleting subsets of their coordinates. Indices are used for
commands such as inserting or deleting a range of characters or
coordinates, and setting the insertion cursor position. An index
may be specified in any of a number of ways, and different types of
items may support different forms for specifying indices. Text
items support the following forms for an index; if you define new
types of text-like items, it would be advisable to support as many
of these forms as practical. Note that it is possible to refer to
the character just after the last one in the text item; this is
necessary for such tasks as inserting new text at the end of the
item. Lines and Polygons do not support the insertion cursor and
the selection. Their indices are supposed to be even always,
because coordinates always appear in pairs. 

<dl class="indices">
<dt><a name="M20"><i>number</i></a></dt>

<dd>A decimal number giving the position of the desired character
within the text item. 0 refers to the first character, 1 to the
next character, and so on. If indexes are odd for lines and
polygons, they will be automatically decremented by one. A number
less than 0 is treated as if it were zero, and a number greater
than the length of the text item is treated as if it were equal to
the length of the text item. For polygons, numbers less than 0 or
greater then the length of the coordinate list will be adjusted by
adding or subtracting the length until the result is between zero
and the length, inclusive.</dd>

<dt><a name="M21"><b>end</b></a></dt>

<dd>Refers to the character or coordinate just after the last one
in the item (same as the number of characters or coordinates in the
item).</dd>

<dt><a name="M22"><b>insert</b></a></dt>

<dd>Refers to the character just before which the insertion cursor
is drawn in this item. Not valid for lines and polygons.</dd>

<dt><a name="M23"><b>sel.first</b></a></dt>

<dd>Refers to the first selected character in the item. If the
selection is not in this item then this form is illegal.</dd>

<dt><a name="M24"><b>sel.last</b></a></dt>

<dd>Refers to the last selected character in the item. If the
selection is not in this item then this form is illegal.</dd>

<dt><a name="M25"><b>@</b><i>x,y</i></a></dt>

<dd>Refers to the character or coordinate at the point given by
<i>x</i> and <i>y</i>, where <i>x</i> and <i>y</i> are specified in
the coordinate system of the canvas. If <i>x</i> and <i>y</i> lie
outside the coordinates covered by the text item, then they refer
to the first or last character in the line that is closest to the
given point.</dd>
</dl>

<h3><a name="M26">DASH PATTERNS</a></h3>

Many items support the notion of a dash pattern for outlines. 

<p>The first possible syntax is a list of integers. Each element
represents the number of pixels of a line segment. Only the odd
segments are drawn using the &ldquo;outline&rdquo; color. The other
segments are drawn transparent.</p>

<p>The second possible syntax is a character list containing only 5
possible characters &ldquo;<b>.,-_</b> &rdquo;. The space can be
used to enlarge the space between other line elements, and cannot
occur as the first position in the string. Some examples:</p>

<pre>
-dash .     <font size="+1">&rarr;</font> -dash {2 4}
-dash -     <font size="+1">&rarr;</font> -dash {6 4}
-dash -.    <font size="+1">&rarr;</font> -dash {6 4 2 4}
-dash -..   <font size="+1">&rarr;</font> -dash {6 4 2 4 2 4}
-dash {. }  <font size="+1">&rarr;</font> -dash {2 8}
-dash ,     <font size="+1">&rarr;</font> -dash {4 4}
</pre>

<p>The main difference of this syntax with the previous is that it
is shape-conserving. This means that all values in the dash list
will be multiplied by the line width before display. This assures
that &ldquo;.&rdquo; will always be displayed as a dot and
&ldquo;-&rdquo; always as a dash regardless of the line width.</p>

<p>On systems which support only a limited set of dash patterns,
the dash pattern will be displayed as the closest dash pattern that
is available. For example, on Windows only the first 4 of the above
examples are available. The last 2 examples will be displayed
identically to the first one.</p>

<h3><a name="M27">WIDGET COMMAND</a></h3>

The <b>canvas</b> command creates a new Tcl command whose name is
<i>pathName</i>. This command may be used to invoke various
operations on the widget. It has the following general form: 

<pre>
<i>pathName option</i> ?<i>arg arg ...</i>?
</pre>

<i>Option</i> and the <i>arg</i>s determine the exact behavior of
the command. The following widget commands are possible for canvas
widgets: 

<dl class="widget command">
<dt><a name="M28"><i>pathName</i> <b>addtag</b> <i>tag
searchSpec</i> ?<i>arg arg ...</i>?</a></dt>

<dd>For each item that meets the constraints specified by
<i>searchSpec</i> and the <i>arg</i>s, add <i>tag</i> to the list
of tags associated with the item if it is not already present on
that list. It is possible that no items will satisfy the
constraints given by <i>searchSpec</i> and <i>arg</i>s, in which
case the command has no effect. This command returns an empty
string as result. <i>SearchSpec</i> and <i>arg</i>'s may take any
of the following forms: 

<dl class="widget command">
<dt><a name="M29"><b>above</b> <i>tagOrId</i></a></dt>

<dd>Selects the item just after (above) the one given by
<i>tagOrId</i> in the display list. If <i>tagOrId</i> denotes more
than one item, then the last (topmost) of these items in the
display list is used.</dd>

<dt><a name="M30"><b>all</b></a></dt>

<dd>Selects all the items in the canvas.</dd>

<dt><a name="M31"><b>below</b> <i>tagOrId</i></a></dt>

<dd>Selects the item just before (below) the one given by
<i>tagOrId</i> in the display list. If <i>tagOrId</i> denotes more
than one item, then the first (lowest) of these items in the
display list is used.</dd>

<dt><a name="M32"><b>closest</b> <i>x y</i> ?<i>halo</i>?
?<i>start</i>?</a></dt>

<dd>Selects the item closest to the point given by <i>x</i> and
<i>y</i>. If more than one item is at the same closest distance
(e.g. two items overlap the point), then the top-most of these
items (the last one in the display list) is used. If <i>halo</i> is
specified, then it must be a non-negative value. Any item closer
than <i>halo</i> to the point is considered to overlap it. The
<i>start</i> argument may be used to step circularly through all
the closest items. If <i>start</i> is specified, it names an item
using a tag or id (if by tag, it selects the first item in the
display list with the given tag). Instead of selecting the topmost
closest item, this form will select the topmost closest item that
is below <i>start</i> in the display list; if no such item exists,
then the selection behaves as if the <i>start</i> argument had not
been specified.</dd>

<dt><a name="M33"><b>enclosed</b> <i>x1</i> <i>y1</i> <i>x2</i>
<i>y2</i></a></dt>

<dd>Selects all the items completely enclosed within the
rectangular region given by <i>x1</i>, <i>y1</i>, <i>x2</i>, and
<i>y2</i>. <i>X1</i> must be no greater then <i>x2</i> and
<i>y1</i> must be no greater than <i>y2</i>.</dd>

<dt><a name="M34"><b>overlapping</b> <i>x1</i> <i>y1</i> <i>x2</i>
<i>y2</i></a></dt>

<dd>Selects all the items that overlap or are enclosed within the
rectangular region given by <i>x1</i>, <i>y1</i>, <i>x2</i>, and
<i>y2</i>. <i>X1</i> must be no greater then <i>x2</i> and
<i>y1</i> must be no greater than <i>y2</i>.</dd>

<dt><a name="M35"><b>withtag</b> <i>tagOrId</i></a></dt>

<dd>Selects all the items given by <i>tagOrId</i>.</dd>
</dl>
</dd>

<dt><a name="M36"><i>pathName</i> <b>bbox</b> <i>tagOrId</i>
?<i>tagOrId tagOrId ...</i>?</a></dt>

<dd>Returns a list with four elements giving an approximate
bounding box for all the items named by the <i>tagOrId</i>
arguments. The list has the form &ldquo;<i>x1 y1 x2 y2</i>&rdquo;
such that the drawn areas of all the named elements are within the
region bounded by <i>x1</i> on the left, <i>x2</i> on the right,
<i>y1</i> on the top, and <i>y2</i> on the bottom. The return value
may overestimate the actual bounding box by a few pixels. If no
items match any of the <i>tagOrId</i> arguments or if the matching
items have empty bounding boxes (i.e. they have nothing to display)
then an empty string is returned.</dd>

<dt><a name="M37"><i>pathName</i> <b>bind</b> <i>tagOrId</i>
?<i>sequence</i>? ?<i>command</i>?</a></dt>

<dd>This command associates <i>command</i> with all the items given
by <i>tagOrId</i> such that whenever the event sequence given by
<i>sequence</i> occurs for one of the items the command will be
invoked. This widget command is similar to the <b><a href=
"../TkCmd/bind.htm">bind</a></b> command except that it operates on
items in a canvas rather than entire widgets. See the <b><a href=
"../TkCmd/bind.htm">bind</a></b> manual entry for complete details
on the syntax of <i>sequence</i> and the substitutions performed on
<i>command</i> before invoking it. If all arguments are specified
then a new binding is created, replacing any existing binding for
the same <i>sequence</i> and <i>tagOrId</i> (if the first character
of <i>command</i> is &ldquo;+&rdquo; then <i>command</i> augments
an existing binding rather than replacing it). In this case the
return value is an empty string. If <i>command</i> is omitted then
the command returns the <i>command</i> associated with
<i>tagOrId</i> and <i>sequence</i> (an error occurs if there is no
such binding). If both <i>command</i> and <i>sequence</i> are
omitted then the command returns a list of all the sequences for
which bindings have been defined for <i>tagOrId</i>. 

<p>The only events for which bindings may be specified are those
related to the mouse and keyboard (such as <b>Enter</b>,
<b>Leave</b>, <b>ButtonPress</b>, <b>Motion</b>, and
<b>KeyPress</b>) or virtual events. The handling of events in
canvases uses the current item defined in <b>ITEM IDS AND TAGS</b>
above. <b>Enter</b> and <b>Leave</b> events trigger for an item
when it becomes the current item or ceases to be the current item;
note that these events are different than <b>Enter</b> and
<b>Leave</b> events for windows. Mouse-related events are directed
to the current item, if any. Keyboard-related events are directed
to the focus item, if any (see the <b>focus</b> widget command
below for more on this). If a virtual event is used in a binding,
that binding can trigger only if the virtual event is defined by an
underlying mouse-related or keyboard-related event.</p>

<p>It is possible for multiple bindings to match a particular
event. This could occur, for example, if one binding is associated
with the item's id and another is associated with one of the item's
tags. When this occurs, all of the matching bindings are invoked. A
binding associated with the <b>all</b> tag is invoked first,
followed by one binding for each of the item's tags (in order),
followed by a binding associated with the item's id. If there are
multiple matching bindings for a single tag, then only the most
specific binding is invoked. A <b><a href=
"../TclCmd/continue.htm">continue</a></b> command in a binding
script terminates that script, and a <b><a href=
"../TclCmd/break.htm">break</a></b> command terminates that script
and skips any remaining scripts for the event, just as for the
<b><a href="../TkCmd/bind.htm">bind</a></b> command.</p>

<p>If bindings have been created for a canvas window using the
<b><a href="../TkCmd/bind.htm">bind</a></b> command, then they are
invoked in addition to bindings created for the canvas's items
using the <b><a href="../TkCmd/bind.htm">bind</a></b> widget
command. The bindings for items will be invoked before any of the
bindings for the window as a whole.</p>
</dd>

<dt><a name="M38"><i>pathName</i> <b>canvasx</b> <i>screenx</i>
?<i>gridspacing</i>?</a></dt>

<dd>Given a window x-coordinate in the canvas <i>screenx</i>, this
command returns the canvas x-coordinate that is displayed at that
location. If <i>gridspacing</i> is specified, then the canvas
coordinate is rounded to the nearest multiple of <i>gridspacing</i>
units.</dd>

<dt><a name="M39"><i>pathName</i> <b>canvasy</b> <i>screeny</i>
?<i>gridspacing</i>?</a></dt>

<dd>Given a window y-coordinate in the canvas <i>screeny</i> this
command returns the canvas y-coordinate that is displayed at that
location. If <i>gridspacing</i> is specified, then the canvas
coordinate is rounded to the nearest multiple of <i>gridspacing</i>
units.</dd>

<dt><a name="M40"><i>pathName</i> <b>cget</b>
<i>option</i></a></dt>

<dd>Returns the current value of the configuration option given by
<i>option</i>. <i>Option</i> may have any of the values accepted by
the <b>canvas</b> command.</dd>

<dt><a name="M41"><i>pathName</i> <b>configure ?</b><i>option</i>?
?<i>value</i>? ?<i>option value ...</i>?</a></dt>

<dd>Query or modify the configuration options of the widget. If no
<i>option</i> is specified, returns a list describing all of the
available options for <i>pathName</i> (see <b><a href=
"../TkLib/ConfigWidg.htm">Tk_ConfigureInfo</a></b> for information
on the format of this list). If <i>option</i> is specified with no
<i>value</i>, then the command returns a list describing the one
named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified). If
one or more <i>option-value</i> pairs are specified, then the
command modifies the given widget option(s) to have the given
value(s); in this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the
<b>canvas</b> command.</dd>

<dt><a name="M42"><i>pathName</i> <b>coords</b> <i>tagOrId</i>
?<i>x0 y0 ...</i>?</a></dt>

<dt><a name="M43"><i>pathName</i> <b>coords</b> <i>tagOrId</i>
?<i>coordList</i>?</a></dt>

<dd>Query or modify the coordinates that define an item. If no
coordinates are specified, this command returns a list whose
elements are the coordinates of the item named by <i>tagOrId</i>.
If coordinates are specified, then they replace the current
coordinates for the named item. If <i>tagOrId</i> refers to
multiple items, then the first one in the display list is
used.</dd>

<dt><a name="M44"><i>pathName</i> <b>create</b> <i>type x y</i>
?<i>x y ...</i>? ?<i>option value ...</i>?</a></dt>

<dt><a name="M45"><i>pathName</i> <b>create</b> <i>type
coordList</i> ?<i>option value ...</i>?</a></dt>

<dd>Create a new item in <i>pathName</i> of type <i>type</i>. The
exact format of the arguments after <b>type</b> depends on
<b>type</b>, but usually they consist of the coordinates for one or
more points, followed by specifications for zero or more item
options. See the subsections on individual item types below for
more on the syntax of this command. This command returns the id for
the new item.</dd>

<dt><a name="M46"><i>pathName</i> <b>dchars</b> <i>tagOrId
first</i> ?<i>last</i>?</a></dt>

<dd>For each item given by <i>tagOrId</i>, delete the characters,
or coordinates, in the range given by <i>first</i> and <i>last</i>,
inclusive. If some of the items given by <i>tagOrId</i> do not
support indexing operations then they ignore dchars. Text items
interpret <i>first</i> and <i>last</i> as indices to a character,
line and polygon items interpret them indices to a coordinate (an
x,y pair). Indices are described in <b>INDICES</b> above. If
<i>last</i> is omitted, it defaults to <i>first</i>. This command
returns an empty string.</dd>

<dt><a name="M47"><i>pathName</i> <b>delete</b> ?<i>tagOrId tagOrId
...</i>?</a></dt>

<dd>Delete each of the items given by each <i>tagOrId</i>, and
return an empty string.</dd>

<dt><a name="M48"><i>pathName</i> <b>dtag</b> <i>tagOrId</i>
?<i>tagToDelete</i>?</a></dt>

<dd>For each of the items given by <i>tagOrId</i>, delete the tag
given by <i>tagToDelete</i> from the list of those associated with
the item. If an item does not have the tag <i>tagToDelete</i> then
the item is unaffected by the command. If <i>tagToDelete</i> is
omitted then it defaults to <i>tagOrId</i>. This command returns an
empty string.</dd>

<dt><a name="M49"><i>pathName</i> <b>find</b> <i>searchCommand</i>
?<i>arg arg ...</i>?</a></dt>

<dd>This command returns a list consisting of all the items that
meet the constraints specified by <i>searchCommand</i> and
<i>arg</i>'s. <i>SearchCommand</i> and <i>args</i> have any of the
forms accepted by the <b>addtag</b> command. The items are returned
in stacking order, with the lowest item first.</dd>

<dt><a name="M50"><i>pathName</i> <b>focus</b>
?<i>tagOrId</i>?</a></dt>

<dd>Set the keyboard focus for the canvas widget to the item given
by <i>tagOrId</i>. If <i>tagOrId</i> refers to several items, then
the focus is set to the first such item in the display list that
supports the insertion cursor. If <i>tagOrId</i> does not refer to
any items, or if none of them support the insertion cursor, then
the focus is not changed. If <i>tagOrId</i> is an empty string,
then the focus item is reset so that no item has the focus. If
<i>tagOrId</i> is not specified then the command returns the id for
the item that currently has the focus, or an empty string if no
item has the focus. 

<p>Once the focus has been set to an item, the item will display
the insertion cursor and all keyboard events will be directed to
that item. The focus item within a canvas and the focus window on
the screen (set with the <b><a href=
"../TkCmd/focus.htm">focus</a></b> command) are totally
independent: a given item does not actually have the input focus
unless (a) its canvas is the focus window and (b) the item is the
focus item within the canvas. In most cases it is advisable to
follow the <b>focus</b> widget command with the <b><a href=
"../TkCmd/focus.htm">focus</a></b> command to set the focus window
to the canvas (if it was not there already).</p>
</dd>

<dt><a name="M51"><i>pathName</i> <b>gettags</b>
<i>tagOrId</i></a></dt>

<dd>Return a list whose elements are the tags associated with the
item given by <i>tagOrId</i>. If <i>tagOrId</i> refers to more than
one item, then the tags are returned from the first such item in
the display list. If <i>tagOrId</i> does not refer to any items, or
if the item contains no tags, then an empty string is
returned.</dd>

<dt><a name="M52"><i>pathName</i> <b>icursor</b> <i>tagOrId
index</i></a></dt>

<dd>Set the position of the insertion cursor for the item(s) given
by <i>tagOrId</i> to just before the character whose position is
given by <i>index</i>. If some or all of the items given by
<i>tagOrId</i> do not support an insertion cursor then this command
has no effect on them. See <b>INDICES</b> above for a description
of the legal forms for <i>index</i>. Note: the insertion cursor is
only displayed in an item if that item currently has the keyboard
focus (see the widget command <b>focus</b>, below), but the cursor
position may be set even when the item does not have the focus.
This command returns an empty string.</dd>

<dt><a name="M53"><i>pathName</i> <b>index</b> <i>tagOrId
index</i></a></dt>

<dd>This command returns a decimal string giving the numerical
index within <i>tagOrId</i> corresponding to <i>index</i>.
<i>Index</i> gives a textual description of the desired position as
described in <b>INDICES</b> above. Text items interpret
<i>index</i> as an index to a character, line and polygon items
interpret it as an index to a coordinate (an x,y pair). The return
value is guaranteed to lie between 0 and the number of characters,
or coordinates, within the item, inclusive. If <i>tagOrId</i>
refers to multiple items, then the index is processed in the first
of these items that supports indexing operations (in display list
order).</dd>

<dt><a name="M54"><i>pathName</i> <b>insert</b> <i>tagOrId
beforeThis string</i></a></dt>

<dd>For each of the items given by <i>tagOrId</i>, if the item
supports text or coordinate, insertion then <i>string</i> is
inserted into the item's text just before the character, or
coordinate, whose index is <i>beforeThis</i>. Text items interpret
<i>beforeThis</i> as an index to a character, line and polygon
items interpret it as an index to a coordinate (an x,y pair). For
lines and polygons the <i>string</i> must be a valid coordinate
sequence. See <b>INDICES</b> above for information about the forms
allowed for <i>beforeThis</i>. This command returns an empty
string.</dd>

<dt><a name="M55"><i>pathName</i> <b>itemcget</b> <i>tagOrId</i>
<i>option</i></a></dt>

<dd>Returns the current value of the configuration option for the
item given by <i>tagOrId</i> whose name is <i>option</i>. This
command is similar to the <b>cget</b> widget command except that it
applies to a particular item rather than the widget as a whole.
<i>Option</i> may have any of the values accepted by the
<b>create</b> widget command when the item was created. If
<i>tagOrId</i> is a tag that refers to more than one item, the
first (lowest) such item is used.</dd>

<dt><a name="M56"><i>pathName</i> <b>itemconfigure</b>
<i>tagOrId</i> ?<i>option</i>? ?<i>value</i>? ?<i>option value
...</i>?</a></dt>

<dd>This command is similar to the <b>configure</b> widget command
except that it modifies item-specific options for the items given
by <i>tagOrId</i> instead of modifying options for the overall
canvas widget. If no <i>option</i> is specified, returns a list
describing all of the available options for the first item given by
<i>tagOrId</i> (see <b><a href=
"../TkLib/ConfigWidg.htm">Tk_ConfigureInfo</a></b> for information
on the format of this list). If <i>option</i> is specified with no
<i>value</i>, then the command returns a list describing the one
named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified). If
one or more <i>option-value</i> pairs are specified, then the
command modifies the given widget option(s) to have the given
value(s) in each of the items given by <i>tagOrId</i>; in this case
the command returns an empty string. The <i>option</i>s and
<i>value</i>s are the same as those permissible in the
<b>create</b> widget command when the item(s) were created; see the
sections describing individual item types below for details on the
legal options.</dd>

<dt><a name="M57"><i>pathName</i> <b>lower</b> <i>tagOrId</i>
?<i>belowThis</i>?</a></dt>

<dd>Move all of the items given by <i>tagOrId</i> to a new position
in the display list just before the item given by <i>belowThis</i>.
If <i>tagOrId</i> refers to more than one item then all are moved
but the relative order of the moved items will not be changed.
<i>BelowThis</i> is a tag or id; if it refers to more than one item
then the first (lowest) of these items in the display list is used
as the destination location for the moved items. Note: this command
has no effect on window items. Window items always obscure other
item types, and the stacking order of window items is determined by
the <b><a href="../TkCmd/raise.htm">raise</a></b> and <b><a href=
"../TkCmd/lower.htm">lower</a></b> commands, not the <b><a href=
"../TkCmd/raise.htm">raise</a></b> and <b><a href=
"../TkCmd/lower.htm">lower</a></b> widget commands for canvases.
This command returns an empty string.</dd>

<dt><a name="M58"><i>pathName</i> <b>move</b> <i>tagOrId xAmount
yAmount</i></a></dt>

<dd>Move each of the items given by <i>tagOrId</i> in the canvas
coordinate space by adding <i>xAmount</i> to the x-coordinate of
each point associated with the item and <i>yAmount</i> to the
y-coordinate of each point associated with the item. This command
returns an empty string.</dd>

<dt><a name="M59"><i>pathName</i> <b>postscript</b> ?<i>option
value option value ...</i>?</a></dt>

<dd>Generate a Postscript representation for part or all of the
canvas. If the <b>-file</b> option is specified then the Postscript
is written to a file and an empty string is returned; otherwise the
Postscript is returned as the result of the command. If the
interpreter that owns the canvas is marked as safe, the operation
will fail because safe interpreters are not allowed to write files.
If the <b>-channel</b> option is specified, the argument denotes
the name of a channel already opened for writing. The Postscript is
written to that channel, and the channel is left open for further
writing at the end of the operation. The Postscript is created in
Encapsulated Postscript form using version 3.0 of the Document
Structuring Conventions. Note: by default Postscript is only
generated for information that appears in the canvas's window on
the screen. If the canvas is freshly created it may still have its
initial size of 1x1 pixel so nothing will appear in the Postscript.
To get around this problem either invoke the <b><a href=
"../TclCmd/update.htm">update</a></b> command to wait for the
canvas window to reach its final size, or else use the
<b>-width</b> and <b>-height</b> options to specify the area of the
canvas to print. The <i>option</i>-<i>value</i> argument pairs
provide additional information to control the generation of
Postscript. The following options are supported: 

<dl class="widget command">
<dt><a name="M60"><b>-colormap</b> <i>varName</i></a></dt>

<dd><i>VarName</i> must be the name of an array variable that
specifies a color mapping to use in the Postscript. Each element of
<i>varName</i> must consist of Postscript code to set a particular
color value (e.g. &ldquo;<b>1.0 1.0 0.0 setrgbcolor</b>&rdquo;).
When outputting color information in the Postscript, Tk checks to
see if there is an element of <i>varName</i> with the same name as
the color. If so, Tk uses the value of the element as the
Postscript command to set the color. If this option has not been
specified, or if there is no entry in <i>varName</i> for a given
color, then Tk uses the red, green, and blue intensities from the X
color.</dd>

<dt><a name="M61"><b>-colormode</b> <i>mode</i></a></dt>

<dd>Specifies how to output color information. <i>Mode</i> must be
either <b>color</b> (for full color output), <b>gray</b> (convert
all colors to their gray-scale equivalents) or <b>mono</b> (convert
all colors to black or white).</dd>

<dt><a name="M62"><b>-file</b> <i>fileName</i></a></dt>

<dd>Specifies the name of the file in which to write the
Postscript. If this option is not specified then the Postscript is
returned as the result of the command instead of being written to a
file.</dd>

<dt><a name="M63"><b>-fontmap</b> <i>varName</i></a></dt>

<dd><i>VarName</i> must be the name of an array variable that
specifies a font mapping to use in the Postscript. Each element of
<i>varName</i> must consist of a Tcl list with two elements, which
are the name and point size of a Postscript font. When outputting
Postscript commands for a particular font, Tk checks to see if
<i>varName</i> contains an element with the same name as the font.
If there is such an element, then the font information contained in
that element is used in the Postscript. Otherwise Tk attempts to
guess what Postscript font to use. Tk's guesses generally only work
for well-known fonts such as Times and Helvetica and Courier, and
only if the X font name does not omit any dashes up through the
point size. For example, <b>-*-Courier-Bold-R-Normal--*-120-*</b>
will work but <b>*Courier-Bold-R-Normal*120*</b> will not; Tk needs
the dashes to parse the font name).</dd>

<dt><a name="M64"><b>-height</b> <i>size</i></a></dt>

<dd>Specifies the height of the area of the canvas to print.
Defaults to the height of the canvas window.</dd>

<dt><a name="M65"><b>-pageanchor</b> <i>anchor</i></a></dt>

<dd>Specifies which point of the printed area of the canvas should
appear over the positioning point on the page (which is given by
the <b>-pagex</b> and <b>-pagey</b> options). For example,
<b>-pageanchor n</b> means that the top center of the area of the
canvas being printed (as it appears in the canvas window) should be
over the positioning point. Defaults to <b>center</b>.</dd>

<dt><a name="M66"><b>-pageheight</b> <i>size</i></a></dt>

<dd>Specifies that the Postscript should be scaled in both x and y
so that the printed area is <i>size</i> high on the Postscript
page. <i>Size</i> consists of a floating-point number followed by
<b>c</b> for centimeters, <b>i</b> for inches, <b>m</b> for
millimeters, or <b>p</b> or nothing for printer's points (1/72
inch). Defaults to the height of the printed area on the screen. If
both <b>-pageheight</b> and <b>-pagewidth</b> are specified then
the scale factor from <b>-pagewidth</b> is used (non-uniform
scaling is not implemented).</dd>

<dt><a name="M67"><b>-pagewidth</b> <i>size</i></a></dt>

<dd>Specifies that the Postscript should be scaled in both x and y
so that the printed area is <i>size</i> wide on the Postscript
page. <i>Size</i> has the same form as for <b>-pageheight</b>.
Defaults to the width of the printed area on the screen. If both
<b>-pageheight</b> and <b>-pagewidth</b> are specified then the
scale factor from <b>-pagewidth</b> is used (non-uniform scaling is
not implemented).</dd>

<dt><a name="M68"><b>-pagex</b> <i>position</i></a></dt>

<dd><i>Position</i> gives the x-coordinate of the positioning point
on the Postscript page, using any of the forms allowed for
<b>-pageheight</b>. Used in conjunction with the <b>-pagey</b> and
<b>-pageanchor</b> options to determine where the printed area
appears on the Postscript page. Defaults to the center of the
page.</dd>

<dt><a name="M69"><b>-pagey</b> <i>position</i></a></dt>

<dd><i>Position</i> gives the y-coordinate of the positioning point
on the Postscript page, using any of the forms allowed for
<b>-pageheight</b>. Used in conjunction with the <b>-pagex</b> and
<b>-pageanchor</b> options to determine where the printed area
appears on the Postscript page. Defaults to the center of the
page.</dd>

<dt><a name="M70"><b>-rotate</b> <i>boolean</i></a></dt>

<dd><i>Boolean</i> specifies whether the printed area is to be
rotated 90 degrees. In non-rotated output the x-axis of the printed
area runs along the short dimension of the page
(&ldquo;portrait&rdquo;orientation); in rotated output the x-axis
runs along the long dimension of the page
(&ldquo;landscape&rdquo;orientation). Defaults to non-rotated.</dd>

<dt><a name="M71"><b>-width</b> <i>size</i></a></dt>

<dd>Specifies the width of the area of the canvas to print.
Defaults to the width of the canvas window.</dd>

<dt><a name="M72"><b>-x</b> <i>position</i></a></dt>

<dd>Specifies the x-coordinate of the left edge of the area of the
canvas that is to be printed, in canvas coordinates, not window
coordinates. Defaults to the coordinate of the left edge of the
window.</dd>

<dt><a name="M73"><b>-y</b> <i>position</i></a></dt>

<dd>Specifies the y-coordinate of the top edge of the area of the
canvas that is to be printed, in canvas coordinates, not window
coordinates. Defaults to the coordinate of the top edge of the
window.</dd>
</dl>
</dd>

<dt><a name="M74"><i>pathName</i> <b>raise</b> <i>tagOrId</i>
?<i>aboveThis</i>?</a></dt>

<dd>Move all of the items given by <i>tagOrId</i> to a new position
in the display list just after the item given by <i>aboveThis</i>.
If <i>tagOrId</i> refers to more than one item then all are moved
but the relative order of the moved items will not be changed.
<i>AboveThis</i> is a tag or id; if it refers to more than one item
then the last (topmost) of these items in the display list is used
as the destination location for the moved items. Note: this command
has no effect on window items. Window items always obscure other
item types, and the stacking order of window items is determined by
the <b><a href="../TkCmd/raise.htm">raise</a></b> and <b><a href=
"../TkCmd/lower.htm">lower</a></b> commands, not the <b><a href=
"../TkCmd/raise.htm">raise</a></b> and <b><a href=
"../TkCmd/lower.htm">lower</a></b> widget commands for canvases.
This command returns an empty string.</dd>

<dt><a name="M75"><i>pathName</i> <b>scale</b> <i>tagOrId xOrigin
yOrigin xScale yScale</i></a></dt>

<dd>Rescale all of the items given by <i>tagOrId</i> in canvas
coordinate space. <i>XOrigin</i> and <i>yOrigin</i> identify the
origin for the scaling operation and <i>xScale</i> and
<i>yScale</i> identify the scale factors for x- and y-coordinates,
respectively (a scale factor of 1.0 implies no change to that
coordinate). For each of the points defining each item, the
x-coordinate is adjusted to change the distance from <i>xOrigin</i>
by a factor of <i>xScale</i>. Similarly, each y-coordinate is
adjusted to change the distance from <i>yOrigin</i> by a factor of
<i>yScale</i>. This command returns an empty string.</dd>

<dt><a name="M76"><i>pathName</i> <b>scan</b> <i>option
args</i></a></dt>

<dd>This command is used to implement scanning on canvases. It has
two forms, depending on <i>option</i>: 

<dl class="widget command">
<dt><a name="M77"><i>pathName</i> <b>scan mark</b> <i>x
y</i></a></dt>

<dd>Records <i>x</i> and <i>y</i> and the canvas's current view;
used in conjunction with later <b>scan dragto</b> commands.
Typically this command is associated with a mouse button press in
the widget and <i>x</i> and <i>y</i> are the coordinates of the
mouse. It returns an empty string.</dd>

<dt><a name="M78"><i>pathName</i> <b>scan dragto</b> <i>x y
?gain?</i>.</a></dt>

<dd>This command computes the difference between its <i>x</i> and
<i>y</i> arguments (which are typically mouse coordinates) and the
<i>x</i> and <i>y</i> arguments to the last <b>scan mark</b>
command for the widget. It then adjusts the view by <i>gain</i>
times the difference in coordinates, where <i>gain</i> defaults to
10. This command is typically associated with mouse motion events
in the widget, to produce the effect of dragging the canvas at high
speed through its window. The return value is an empty string.</dd>
</dl>
</dd>

<dt><a name="M79"><i>pathName</i> <b>select</b> <i>option</i>
?<i>tagOrId arg</i>?</a></dt>

<dd>Manipulates the selection in one of several ways, depending on
<i>option</i>. The command may take any of the forms described
below. In all of the descriptions below, <i>tagOrId</i> must refer
to an item that supports indexing and selection; if it refers to
multiple items then the first of these that supports indexing and
the selection is used. <i>Index</i> gives a textual description of
a position within <i>tagOrId</i>, as described in <b>INDICES</b>
above. 

<dl class="widget command">
<dt><a name="M80"><i>pathName</i> <b>select adjust</b> <i>tagOrId
index</i></a></dt>

<dd>Locate the end of the selection in <i>tagOrId</i> nearest to
the character given by <i>index</i>, and adjust that end of the
selection to be at <i>index</i> (i.e. including but not going
beyond <i>index</i>). The other end of the selection is made the
anchor point for future <b>select to</b> commands. If the selection
is not currently in <i>tagOrId</i> then this command behaves the
same as the <b>select to</b> widget command. Returns an empty
string.</dd>

<dt><a name="M81"><i>pathName</i> <b>select clear</b></a></dt>

<dd>Clear the selection if it is in this widget. If the selection
is not in this widget then the command has no effect. Returns an
empty string.</dd>

<dt><a name="M82"><i>pathName</i> <b>select from</b> <i>tagOrId
index</i></a></dt>

<dd>Set the selection anchor point for the widget to be just before
the character given by <i>index</i> in the item given by
<i>tagOrId</i>. This command does not change the selection; it just
sets the fixed end of the selection for future <b>select to</b>
commands. Returns an empty string.</dd>

<dt><a name="M83"><i>pathName</i> <b>select item</b></a></dt>

<dd>Returns the id of the selected item, if the selection is in an
item in this canvas. If the selection is not in this canvas then an
empty string is returned.</dd>

<dt><a name="M84"><i>pathName</i> <b>select to</b> <i>tagOrId
index</i></a></dt>

<dd>Set the selection to consist of those characters of
<i>tagOrId</i> between the selection anchor point and <i>index</i>.
The new selection will include the character given by <i>index</i>;
it will include the character given by the anchor point only if
<i>index</i> is greater than or equal to the anchor point. The
anchor point is determined by the most recent <b>select adjust</b>
or <b>select from</b> command for this widget. If the selection
anchor point for the widget is not currently in <i>tagOrId</i>,
then it is set to the same character given by <i>index</i>. Returns
an empty string.</dd>
</dl>
</dd>

<dt><a name="M85"><i>pathName</i> <b>type</b>
<i>tagOrId</i></a></dt>

<dd>Returns the type of the item given by <i>tagOrId</i>, such as
<b>rectangle</b> or <b>text</b>. If <i>tagOrId</i> refers to more
than one item, then the type of the first item in the display list
is returned. If <i>tagOrId</i> does not refer to any items at all
then an empty string is returned.</dd>

<dt><a name="M86"><i>pathName</i> <b>xview</b>
?<i>args</i>?</a></dt>

<dd>This command is used to query and change the horizontal
position of the information displayed in the canvas's window. It
can take any of the following forms: 

<dl class="widget command">
<dt><a name="M87"><i>pathName</i> <b>xview</b></a></dt>

<dd>Returns a list containing two elements. Each element is a real
fraction between 0 and 1; together they describe the horizontal
span that is visible in the window. For example, if the first
element is .2 and the second element is .6, 20% of the canvas's
area (as defined by the <b>-scrollregion</b> option) is off-screen
to the left, the middle 40% is visible in the window, and 40% of
the canvas is off-screen to the right. These are the same values
passed to scrollbars via the <b>-xscrollcommand</b> option.</dd>

<dt><a name="M88"><i>pathName</i> <b>xview moveto</b>
<i>fraction</i></a></dt>

<dd>Adjusts the view in the window so that <i>fraction</i> of the
total width of the canvas is off-screen to the left.
<i>Fraction</i> must be a fraction between 0 and 1.</dd>

<dt><a name="M89"><i>pathName</i> <b>xview scroll</b> <i>number
what</i></a></dt>

<dd>This command shifts the view in the window left or right
according to <i>number</i> and <i>what</i>. <i>Number</i> must be
an integer. <i>What</i> must be either <b>units</b> or <b>pages</b>
or an abbreviation of one of these. If <i>what</i> is <b>units</b>,
the view adjusts left or right in units of the
<b>xScrollIncrement</b> option, if it is greater than zero, or in
units of one-tenth the window's width otherwise. If <i>what is</i>
<b>pages</b> then the view adjusts in units of nine-tenths the
window's width. If <i>number</i> is negative then information
farther to the left becomes visible; if it is positive then
information farther to the right becomes visible.</dd>
</dl>
</dd>

<dt><a name="M90"><i>pathName</i> <b>yview</b>
<i>?args</i>?</a></dt>

<dd>This command is used to query and change the vertical position
of the information displayed in the canvas's window. It can take
any of the following forms: 

<dl class="widget command">
<dt><a name="M91"><i>pathName</i> <b>yview</b></a></dt>

<dd>Returns a list containing two elements. Each element is a real
fraction between 0 and 1; together they describe the vertical span
that is visible in the window. For example, if the first element is
.6 and the second element is 1.0, the lowest 40% of the canvas's
area (as defined by the <b>-scrollregion</b> option) is visible in
the window. These are the same values passed to scrollbars via the
<b>-yscrollcommand</b> option.</dd>

<dt><a name="M92"><i>pathName</i> <b>yview moveto</b>
<i>fraction</i></a></dt>

<dd>Adjusts the view in the window so that <i>fraction</i> of the
canvas's area is off-screen to the top. <i>Fraction</i> is a
fraction between 0 and 1.</dd>

<dt><a name="M93"><i>pathName</i> <b>yview scroll</b> <i>number
what</i></a></dt>

<dd>This command adjusts the view in the window up or down
according to <i>number</i> and <i>what</i>. <i>Number</i> must be
an integer. <i>What</i> must be either <b>units</b> or
<b>pages</b>. If <i>what</i> is <b>units</b>, the view adjusts up
or down in units of the <b>yScrollIncrement</b> option, if it is
greater than zero, or in units of one-tenth the window's height
otherwise. If <i>what</i> is <b>pages</b> then the view adjusts in
units of nine-tenths the window's height. If <i>number</i> is
negative then higher information becomes visible; if it is positive
then lower information becomes visible.</dd>
</dl>
</dd>
</dl>

<h3><a name="M94">OVERVIEW OF ITEM TYPES</a></h3>

The sections below describe the various types of items supported by
canvas widgets. Each item type is characterized by two things:
first, the form of the <b>create</b> command used to create
instances of the type; and second, a set of configuration options
for items of that type, which may be used in the <b>create</b> and
<b>itemconfigure</b> widget commands. Most items do not support
indexing or selection or the commands related to them, such as
<b>index</b> and <b>insert</b>. Where items do support these
facilities, it is noted explicitly in the descriptions below. At
present, text, line and polygon items provide this support. For
lines and polygons the indexing facility is used to manipulate the
coordinates of the item. 

<h4><a name="M95">COMMON ITEM OPTIONS</a></h4>

Many items share a common set of options. These options are
explained here, and then referred to be each widget type for
brevity. 

<dl class="common item options">
<dt><a name="M96"><b>-dash</b> <i>pattern</i></a></dt>

<dt><a name="M97"><b>-activedash</b> <i>pattern</i></a></dt>

<dt><a name="M98"><b>-disableddash</b> <i>pattern</i></a></dt>

<dd>This option specifies dash patterns for the normal, active
state, and disabled state of an item. <i>pattern</i> may have any
of the forms accepted by <b><a href=
"../TkLib/GetDash.htm">Tk_GetDash</a></b>. If the dash options are
omitted then the default is a solid outline. See <b>DASH
PATTERNS</b> for more information.</dd>

<dt><a name="M99"><b>-dashoffset</b> <i>offset</i></a></dt>

<dd>The starting <i>offset</i> in pixels into the pattern provided
by the <b>-dash</b> option. <b>-dashoffset</b> is ignored if there
is no <b>-dash</b> pattern. The <i>offset</i> may have any of the
forms described in the <b>COORDINATES</b> section above.</dd>

<dt><a name="M100"><b>-fill</b> <i>color</i></a></dt>

<dt><a name="M101"><b>-activefill</b> <i>color</i></a></dt>

<dt><a name="M102"><b>-disabledfill</b> <i>color</i></a></dt>

<dd>Specifies the color to be used to fill item's area. in its
normal, active, and disabled states, <i>Color</i> may have any of
the forms accepted by <b><a href=
"../TkLib/GetColor.htm">Tk_GetColor</a></b>. If <i>color</i> is an
empty string (the default), then the item will not be filled. For
the line item, it specifies the color of the line drawn. For the
text item, it specifies the foreground color of the text.</dd>

<dt><a name="M103"><b>-outline</b> <i>color</i></a></dt>

<dt><a name="M104"><b>-activeoutline</b> <i>color</i></a></dt>

<dt><a name="M105"><b>-disabledoutline</b> <i>color</i></a></dt>

<dd>This option specifies the color that should be used to draw the
outline of the item in its normal, active and disabled states.
<i>Color</i> may have any of the forms accepted by <b><a href=
"../TkLib/GetColor.htm">Tk_GetColor</a></b>. This option defaults
to <b>black</b>. If <i>color</i> is specified as an empty string
then no outline is drawn for the item.</dd>

<dt><a name="M106"><b>-offset</b> <i>offset</i></a></dt>

<dd>Specifies the offset of stipples. The offset value can be of
the form <b>x,y</b> or <b>side</b>, where side can be <b>n</b>,
<b>ne</b>, <b>e</b>, <b>se</b>, <b>s</b>, <b>sw</b>, <b>w</b>,
<b>nw</b>, or <b>center</b>. In the first case the origin is the
origin of the toplevel of the current window. For the canvas itself
and canvas objects the origin is the canvas origin, but putting
<b>#</b> in front of the coordinate pair indicates using the
toplevel origin instead. For canvas objects, the <b>-offset</b>
option is used for stippling as well. For the line and polygon
canvas items you can also specify an index as argument, which
connects the stipple origin to one of the coordinate points of the
line/polygon.</dd>

<dt><a name="M107"><b>-outlinestipple</b> <i>bitmap</i></a></dt>

<dt><a name="M108"><b>-activeoutlinestipple</b>
<i>bitmap</i></a></dt>

<dt><a name="M109"><b>-disabledoutlinestipple</b>
<i>bitmap</i></a></dt>

<dd>This option specifies stipple patterns that should be used to
draw the outline of the item in its normal, active and disabled
states. Indicates that the outline for the item should be drawn
with a stipple pattern; <i>bitmap</i> specifies the stipple pattern
to use, in any of the forms accepted by <b><a href=
"../TkLib/GetBitmap.htm">Tk_GetBitmap</a></b>. If the
<b>-outline</b> option has not been specified then this option has
no effect. If <i>bitmap</i> is an empty string (the default), then
the outline is drawn in a solid fashion. <i>Note that stipples are
not well supported on platforms that do not use X11 as their
drawing API.</i></dd>

<dt><a name="M110"><b>-outlineoffset</b> <i>offset</i></a></dt>

<dd>Specifies the offset of the stipple pattern used for outlines.
The offset value can be of the form
&ldquo;<i>x</i><b>,</b><i>y</i>&rdquo; or the description of a side
(one of <b>n</b>, <b>ne</b>, <b>e</b>, <b>se</b>, <b>s</b>,
<b>sw</b>, <b>w</b>, <b>nw</b>, or <b>center</b>). This option only
has an effect when the outline is drawn as a stipple pattern, and
is only supported under X11.</dd>

<dt><a name="M111"><b>-stipple</b> <i>bitmap</i></a></dt>

<dt><a name="M112"><b>-activestipple</b> <i>bitmap</i></a></dt>

<dt><a name="M113"><b>-disabledstipple</b> <i>bitmap</i></a></dt>

<dd>This option specifies stipple patterns that should be used to
fill the item in its normal, active and disabled states.
<i>bitmap</i> specifies the stipple pattern to use, in any of the
forms accepted by <b><a href=
"../TkLib/GetBitmap.htm">Tk_GetBitmap</a></b>. If the <b>-fill</b>
option has not been specified then this option has no effect. If
<i>bitmap</i> is an empty string (the default), then filling is
done in a solid fashion. For the text item, it affects the actual
text. <i>Note that stipples are not well supported on platforms
that do not use X11 as their drawing API.</i></dd>

<dt><a name="M114"><b>-state</b> <i>state</i></a></dt>

<dd>This allows an item to override the canvas widget's global
<i>state</i> option. It takes the same values: <i>normal</i>,
<i>disabled</i> or <i>hidden</i>.</dd>

<dt><a name="M115"><b>-tags</b> <i>tagList</i></a></dt>

<dd>Specifies a set of tags to apply to the item. <i>TagList</i>
consists of a list of tag names, which replace any existing tags
for the item. <i>TagList</i> may be an empty list.</dd>

<dt><a name="M116"><b>-width</b> <i>outlineWidth</i></a></dt>

<dt><a name="M117"><b>-activewidth</b> <i>outlineWidth</i></a></dt>

<dt><a name="M118"><b>-disabledwidth</b>
<i>outlineWidth</i></a></dt>

<dd>Specifies the width of the outline to be drawn around the
item's region, in its normal, active and disabled states.
<i>outlineWidth</i> may be in any of the forms described in the
<b>COORDINATES</b> section above. If the <b>-outline</b> option has
been specified as an empty string then this option has no effect.
This option defaults to 1.0. For arcs, wide outlines will be drawn
centered on the edges of the arc's region.</dd>
</dl>

<h3><a name="M119">ARC ITEMS</a></h3>

Items of type <b>arc</b> appear on the display as arc-shaped
regions. An arc is a section of an oval delimited by two angles
(specified by the <b>-start</b> and <b>-extent</b> options) and
displayed in one of several ways (specified by the <b>-style</b>
option). Arcs are created with widget commands of the following
form: 

<pre>
<i>pathName</i> <b>create arc</b> <i>x1 y1 x2 y2</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create arc</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> or
<i>coordList</i> give the coordinates of two diagonally opposite
corners of a rectangular region enclosing the oval that defines the
arc. After the coordinates there may be any number of
<i>option</i>-<i>value</i> pairs, each of which sets one of the
configuration options for the item. These same
<i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. An arc item becomes the current item when the mouse
pointer is over any part that is painted or (when fully
transparent) that would be painted if both the <b>-fill</b> and
<b>-outline</b> options were non-empty. 

<p>The following standard options are supported by arcs:</p>

<pre>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlineoffset
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</pre>

The following extra options are supported for arcs: 

<dl class="arc items">
<dt><a name="M120"><b>-extent</b> <i>degrees</i></a></dt>

<dd>Specifies the size of the angular range occupied by the arc.
The arc's range extends for <i>degrees</i> degrees
counter-clockwise from the starting angle given by the
<b>-start</b> option. <i>Degrees</i> may be negative. If it is
greater than 360 or less than -360, then <i>degrees</i> modulo 360
is used as the extent.</dd>

<dt><a name="M121"><b>-start</b> <i>degrees</i></a></dt>

<dd>Specifies the beginning of the angular range occupied by the
arc. <i>Degrees</i> is given in units of degrees measured
counter-clockwise from the 3-o'clock position; it may be either
positive or negative.</dd>

<dt><a name="M122"><b>-style</b> <i>type</i></a></dt>

<dd>Specifies how to draw the arc. If <i>type</i> is
<b>pieslice</b> (the default) then the arc's region is defined by a
section of the oval's perimeter plus two line segments, one between
the center of the oval and each end of the perimeter section. If
<i>type</i> is <b>chord</b> then the arc's region is defined by a
section of the oval's perimeter plus a single line segment
connecting the two end points of the perimeter section. If
<i>type</i> is <b>arc</b> then the arc's region consists of a
section of the perimeter alone. In this last case the <b>-fill</b>
option is ignored.</dd>
</dl>

<h3><a name="M123">BITMAP ITEMS</a></h3>

Items of type <b>bitmap</b> appear on the display as images with
two colors, foreground and background. Bitmaps are created with
widget commands of the following form: 

<pre>
<i>pathName</i> <b>create bitmap</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create bitmap</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x</i> and <i>y</i> or <i>coordList</i> (which must
have two elements) specify the coordinates of a point used to
position the bitmap on the display (see the <b>-anchor</b> option
below for more information on how bitmaps are displayed). After the
coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options for the
item. These same <i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. A bitmap item becomes the current item when the
mouse pointer is over any part of its bounding box. 

<p>The following standard options are supported by bitmaps:</p>

<pre>
-state
-tags
</pre>

The following extra options are supported for bitmaps: 

<dl class="bitmap items">
<dt><a name="M124"><b>-anchor</b> <i>anchorPos</i></a></dt>

<dd><i>AnchorPos</i> tells how to position the bitmap relative to
the positioning point for the item; it may have any of the forms
accepted by <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchor</a></b>. For example, if
<i>anchorPos</i> is <b>center</b> then the bitmap is centered on
the point; if <i>anchorPos</i> is <b>n</b> then the bitmap will be
drawn so that its top center point is at the positioning point.
This option defaults to <b>center</b>.</dd>

<dt><a name="M125"><b>-background</b> <i>color</i></a></dt>

<dt><a name="M126"><b>-activebackground</b> <i>color</i></a></dt>

<dt><a name="M127"><b>-disabledbackground</b> <i>color</i></a></dt>

<dd>Specifies the color to use for each of the bitmap's
&ldquo;0&rdquo; valued pixels in its normal, active and disabled
states. <i>Color</i> may have any of the forms accepted by <b><a
href="../TkLib/GetColor.htm">Tk_GetColor</a></b>. If this option is
not specified, or if it is specified as an empty string, then
nothing is displayed where the bitmap pixels are 0; this produces a
transparent effect.</dd>

<dt><a name="M128"><b>-bitmap</b> <i>bitmap</i></a></dt>

<dt><a name="M129"><b>-activebitmap</b> <i>bitmap</i></a></dt>

<dt><a name="M130"><b>-disabledbitmap</b> <i>bitmap</i></a></dt>

<dd>Specifies the bitmaps to display in the item in its normal,
active and disabled states. <i>Bitmap</i> may have any of the forms
accepted by <b><a href=
"../TkLib/GetBitmap.htm">Tk_GetBitmap</a></b>.</dd>

<dt><a name="M131"><b>-foreground</b> <i>color</i></a></dt>

<dt><a name="M132"><b>-activeforeground</b> <i>color</i></a></dt>

<dt><a name="M133"><b>-disabledforeground</b> <i>color</i></a></dt>

<dd>Specifies the color to use for each of the bitmap's
&ldquo;1&rdquo; valued pixels in its normal, active and disabled
states. <i>Color</i> may have any of the forms accepted by <b><a
href="../TkLib/GetColor.htm">Tk_GetColor</a></b> and defaults to
<b>black</b>.</dd>
</dl>

<h3><a name="M134">IMAGE ITEMS</a></h3>

Items of type <b>image</b> are used to display images on a canvas.
Images are created with widget commands of the following form: 

<pre>
<i>pathName</i> <b>create image</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create image</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x</i> and <i>y</i> or <i>coordList</i> specify the
coordinates of a point used to position the image on the display
(see the <b>-anchor</b> option below for more information). After
the coordinates there may be any number of
<i>option</i>-<i>value</i> pairs, each of which sets one of the
configuration options for the item. These same
<i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. An image item becomes the current item when the
mouse pointer is over any part of its bounding box. 

<p>The following standard options are supported by images:</p>

<pre>
-state
-tags
</pre>

The following extra options are supported for images: 

<dl class="image items">
<dt><a name="M135"><b>-anchor</b> <i>anchorPos</i></a></dt>

<dd><i>AnchorPos</i> tells how to position the image relative to
the positioning point for the item; it may have any of the forms
accepted by <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchor</a></b>. For example, if
<i>anchorPos</i> is <b>center</b> then the image is centered on the
point; if <i>anchorPos</i> is <b>n</b> then the image will be drawn
so that its top center point is at the positioning point. This
option defaults to <b>center</b>.</dd>

<dt><a name="M136"><b>-image</b> <i>name</i></a></dt>

<dt><a name="M137"><b>-activeimage</b> <i>name</i></a></dt>

<dt><a name="M138"><b>-disabledimage</b> <i>name</i></a></dt>

<dd>Specifies the name of the images to display in the item in is
normal, active and disabled states. This image must have been
created previously with the <b><a href="../TkCmd/image.htm">image
create</a></b> command.</dd>
</dl>

<h3><a name="M139">LINE ITEMS</a></h3>

Items of type <b>line</b> appear on the display as one or more
connected line segments or curves. Line items support coordinate
indexing operations using the canvas widget commands: <b>dchars,
index, insert.</b> Lines are created with widget commands of the
following form: 

<pre>
<i>pathName</i> <b>create line</b> <i>x1 y1... xn yn</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create line</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x1</i> through <i>yn</i> or <i>coordList</i> give
the coordinates for a series of two or more points that describe a
series of connected line segments. After the coordinates there may
be any number of <i>option</i>-<i>value</i> pairs, each of which
sets one of the configuration options for the item. These same
<i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. A line item is the current item whenever the mouse
pointer is over any segment of the line, whether drawn or not and
whether or not the line is smoothed. 

<p>The following standard options are supported by lines:</p>

<pre>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</pre>

The following extra options are supported for lines: 

<dl class="line items">
<dt><a name="M140"><b>-arrow</b> <i>where</i></a></dt>

<dd>Indicates whether or not arrowheads are to be drawn at one or
both ends of the line. <i>Where</i> must have one of the values
<b>none</b> (for no arrowheads), <b>first</b> (for an arrowhead at
the first point of the line), <b>last</b> (for an arrowhead at the
last point of the line), or <b>both</b> (for arrowheads at both
ends). This option defaults to <b>none</b>.</dd>

<dt><a name="M141"><b>-arrowshape</b> <i>shape</i></a></dt>

<dd>This option indicates how to draw arrowheads. The <i>shape</i>
argument must be a list with three elements, each specifying a
distance in any of the forms described in the <b>COORDINATES</b>
section above. The first element of the list gives the distance
along the line from the neck of the arrowhead to its tip. The
second element gives the distance along the line from the trailing
points of the arrowhead to the tip, and the third element gives the
distance from the outside edge of the line to the trailing points.
If this option is not specified then Tk picks a
&ldquo;reasonable&rdquo; shape.</dd>

<dt><a name="M142"><b>-capstyle</b> <i>style</i></a></dt>

<dd>Specifies the ways in which caps are to be drawn at the
endpoints of the line. <i>Style</i> may have any of the forms
accepted by <b><a href=
"../TkLib/GetCapStyl.htm">Tk_GetCapStyle</a></b> (<b>butt</b>,
<b>projecting</b>, or <b>round</b>). If this option is not
specified then it defaults to <b>butt</b>. Where arrowheads are
drawn the cap style is ignored.</dd>

<dt><a name="M143"><b>-joinstyle</b> <i>style</i></a></dt>

<dd>Specifies the ways in which joints are to be drawn at the
vertices of the line. <i>Style</i> may have any of the forms
accepted by <b><a href=
"../TkLib/GetCapStyl.htm">Tk_GetCapStyle</a></b> (<b>bevel</b>,
<b>miter</b>, or <b>round</b>). If this option is not specified
then it defaults to <b>round</b>. If the line only contains two
points then this option is irrelevant.</dd>

<dt><a name="M144"><b>-smooth</b> <i>smoothMethod</i></a></dt>

<dd><i>smoothMethod</i> must have one of the forms accepted by
<b><a href="../TclLib/GetInt.htm">Tcl_GetBoolean</a></b> or a line
smoothing method. Only <b>true</b> and <b>raw</b> are supported in
the core (with <b>bezier</b> being an alias for <b>true</b>), but
more can be added at runtime. If a boolean false value or empty
string is given, no smoothing is applied. A boolean truth value
assumes <b>true</b> smoothing. If the smoothing method is
<b>true</b>, this indicates that the line should be drawn as a
curve, rendered as a set of quadratic splines: one spline is drawn
for the first and second line segments, one for the second and
third, and so on. Straight-line segments can be generated within a
curve by duplicating the end-points of the desired line segment. If
the smoothing method is <b>raw</b>, this indicates that the line
should also be drawn as a curve but where the list of coordinates
is such that the first coordinate pair (and every third coordinate
pair thereafter) is a knot point on a cubic Bezier curve, and the
other coordinates are control points on the cubic Bezier curve.
Straight line segments can be generated within a curve by making
control points equal to their neighbouring knot points. If the last
point is a control point and not a knot point, the point is
repeated (one or two times) so that it also becomes a knot
point.</dd>

<dt><a name="M145"><b>-splinesteps</b> <i>number</i></a></dt>

<dd>Specifies the degree of smoothness desired for curves: each
spline will be approximated with <i>number</i> line segments. This
option is ignored unless the <b>-smooth</b> option is true or
<b>raw</b>.</dd>
</dl>

<h3><a name="M146">OVAL ITEMS</a></h3>

Items of type <b>oval</b> appear as circular or oval regions on the
display. Each oval may have an outline, a fill, or both. Ovals are
created with widget commands of the following form: 

<pre>
<i>pathName</i> <b>create oval</b> <i>x1 y1 x2 y2</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create oval</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> or
<i>coordList</i> give the coordinates of two diagonally opposite
corners of a rectangular region enclosing the oval. The oval will
include the top and left edges of the rectangle not the lower or
right edges. If the region is square then the resulting oval is
circular; otherwise it is elongated in shape. After the coordinates
there may be any number of <i>option</i>-<i>value</i> pairs, each
of which sets one of the configuration options for the item. These
same <i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. An oval item becomes the current item when the mouse
pointer is over any part that is painted or (when fully
transparent) that would be painted if both the <b>-fill</b> and
<b>-outline</b> options were non-empty. 

<p>The following standard options are supported by ovals:</p>

<pre>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlineoffset
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</pre>

<h3><a name="M147">POLYGON ITEMS</a></h3>

Items of type <b>polygon</b> appear as polygonal or curved filled
regions on the display. Polygon items support coordinate indexing
operations using the canvas widget commands: <b>dchars, index,
insert.</b> Polygons are created with widget commands of the
following form: 

<pre>
<i>pathName</i> <b>create polygon</b> <i>x1 y1 ... xn yn</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create polygon</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x1</i> through <i>yn</i> or <i>coordList</i>
specify the coordinates for three or more points that define a
polygon. The first point should not be repeated as the last to
close the shape; Tk will automatically close the periphery between
the first and last points. After the coordinates there may be any
number of <i>option</i>-<i>value</i> pairs, each of which sets one
of the configuration options for the item. These same
<i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. A polygon item is the current item whenever the
mouse pointer is over any part of the polygon, whether drawn or not
and whether or not the outline is smoothed. 

<p>The following standard options are supported by polygons:</p>

<pre>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</pre>

The following extra options are supported for polygons: 

<dl class="polygon items">
<dt><a name="M148"><b>-joinstyle</b> <i>style</i></a></dt>

<dd>Specifies the ways in which joints are to be drawn at the
vertices of the outline. <i>Style</i> may have any of the forms
accepted by <b><a href=
"../TkLib/GetCapStyl.htm">Tk_GetCapStyle</a></b> (<b>bevel</b>,
<b>miter</b>, or <b>round</b>). If this option is not specified
then it defaults to <b>round</b>.</dd>

<dt><a name="M149"><b>-smooth</b> <i>boolean</i></a></dt>

<dd><i>Boolean</i> must have one of the forms accepted by <b><a
href="../TclLib/GetInt.htm">Tcl_GetBoolean</a></b> or a line
smoothing method. Only <b>true</b> and <b>raw</b> are supported in
the core (with <b>bezier</b> being an alias for <b>true</b>), but
more can be added at runtime. If a boolean false value or empty
string is given, no smoothing is applied. A boolean truth value
assumes <b>true</b> smoothing. If the smoothing method is
<b>true</b>, this indicates that the polygon should be drawn as a
curve, rendered as a set of quadratic splines: one spline is drawn
for the first and second line segments, one for the second and
third, and so on. Straight-line segments can be generated within a
curve by duplicating the end-points of the desired line segment. If
the smoothing method is <b>raw</b>, this indicates that the polygon
should also be drawn as a curve but where the list of coordinates
is such that the first coordinate pair (and every third coordinate
pair thereafter) is a knot point on a cubic Bezier curve, and the
other coordinates are control points on the cubic Bezier curve.
Straight line segments can be venerated within a curve by making
control points equal to their neighbouring knot points. If the last
point is not the second point of a pair of control points, the
point is repeated (one or two times) so that it also becomes the
second point of a pair of control points (the associated knot point
will be the first control point).</dd>

<dt><a name="M150"><b>-splinesteps</b> <i>number</i></a></dt>

<dd>Specifies the degree of smoothness desired for curves: each
spline will be approximated with <i>number</i> line segments. This
option is ignored unless the <b>-smooth</b> option is true or
<b>raw</b>.</dd>
</dl>

<p>Polygon items are different from other items such as rectangles,
ovals and arcs in that interior points are considered to be
&ldquo;inside&rdquo; a polygon (e.g. for purposes of the <b>find
closest</b> and <b>find overlapping</b> widget commands) even if it
is not filled. For most other item types, an interior point is
considered to be inside the item only if the item is filled or if
it has neither a fill nor an outline. If you would like an unfilled
polygon whose interior points are not considered to be inside the
polygon, use a line item instead.</p>

<h3><a name="M151">RECTANGLE ITEMS</a></h3>

Items of type <b>rectangle</b> appear as rectangular regions on the
display. Each rectangle may have an outline, a fill, or both.
Rectangles are created with widget commands of the following form: 

<pre>
<i>pathName</i> <b>create rectangle</b> <i>x1 y1 x2 y2</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create rectangle</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> or
<i>coordList</i> (which must have four elements) give the
coordinates of two diagonally opposite corners of the rectangle
(the rectangle will include its upper and left edges but not its
lower or right edges). After the coordinates there may be any
number of <i>option</i>-<i>value</i> pairs, each of which sets one
of the configuration options for the item. These same
<i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. A rectangle item becomes the current item when the
mouse pointer is over any part that is painted or (when fully
transparent) that would be painted if both the <b>-fill</b> and
<b>-outline</b> options were non-empty. 

<p>The following standard options are supported by rectangles:</p>

<pre>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlineoffset
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</pre>

<h3><a name="M152">TEXT ITEMS</a></h3>

A text item displays a string of characters on the screen in one or
more lines. Text items support indexing and selection, along with
the following text-related canvas widget commands: <b>dchars</b>,
<b>focus</b>, <b>icursor</b>, <b>index</b>, <b>insert</b>,
<b>select</b>. Text items are created with widget commands of the
following form: 

<pre>
<i>pathName</i> <b>create text</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create text</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x</i> and <i>y</i> or <i>coordList</i> (which must
have two elements) specify the coordinates of a point used to
position the text on the display (see the options below for more
information on how text is displayed). After the coordinates there
may be any number of <i>option</i>-<i>value</i> pairs, each of
which sets one of the configuration options for the item. These
same <i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. A text item becomes the current item when the mouse
pointer is over any part of its bounding box. 

<p>The following standard options are supported by text items:</p>

<pre>
-fill
-activefill
-disabledfill
-stipple
-activestipple
-disabledstipple
-state
-tags
</pre>

The following extra options are supported for text items: 

<dl class="text items">
<dt><a name="M153"><b>-anchor</b> <i>anchorPos</i></a></dt>

<dd><i>AnchorPos</i> tells how to position the text relative to the
positioning point for the text; it may have any of the forms
accepted by <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchor</a></b>. For example, if
<i>anchorPos</i> is <b>center</b> then the text is centered on the
point; if <i>anchorPos</i> is <b>n</b> then the text will be drawn
such that the top center point of the rectangular region occupied
by the text will be at the positioning point. This option defaults
to <b>center</b>.</dd>

<dt><a name="M154"><b>-font</b> <i>fontName</i></a></dt>

<dd>Specifies the font to use for the text item. <i>FontName</i>
may be any string acceptable to <b><a href=
"../TkLib/GetFont.htm">Tk_GetFont</a></b>. If this option is not
specified, it defaults to a system-dependent font.</dd>

<dt><a name="M155"><b>-justify</b> <i>how</i></a></dt>

<dd>Specifies how to justify the text within its bounding region.
<i>How</i> must be one of the values <b>left</b>, <b>right</b>, or
<b>center</b>. This option will only matter if the text is
displayed as multiple lines. If the option is omitted, it defaults
to <b>left</b>.</dd>

<dt><a name="M156"><b>-text</b> <i>string</i></a></dt>

<dd><i>String</i> specifies the characters to be displayed in the
text item. Newline characters cause line breaks. The characters in
the item may also be changed with the <b>insert</b> and
<b>delete</b> widget commands. This option defaults to an empty
string.</dd>

<dt><a name="M157"><b>-underline</b></a></dt>

<dd>Specifies the integer index of a character within the text to
be underlined. 0 corresponds to the first character of the text
displayed, 1 to the next character, and so on. -1 means that no
underline should be drawn (if the whole text item is to be
underlined, the appropriate font should be used instead).</dd>

<dt><a name="M158"><b>-width</b> <i>lineLength</i></a></dt>

<dd>Specifies a maximum line length for the text, in any of the
forms described in the <b>COORDINATES</b> section above. If this
option is zero (the default) the text is broken into lines only at
newline characters. However, if this option is non-zero then any
line that would be longer than <i>lineLength</i> is broken just
before a space character to make the line shorter than
<i>lineLength</i>; the space character is treated as if it were a
newline character.</dd>
</dl>

<h3><a name="M159">WINDOW ITEMS</a></h3>

Items of type <b>window</b> cause a particular window to be
displayed at a given position on the canvas. Window items are
created with widget commands of the following form: 

<pre>
<i>pathName</i> <b>create window</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create window</b> <i>coordList</i> ?<i>option value option value ...</i>?
</pre>

The arguments <i>x</i> and <i>y</i> or <i>coordList</i> (which must
have two elements) specify the coordinates of a point used to
position the window on the display (see the <b>-anchor</b> option
below for more information on how bitmaps are displayed). After the
coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options for the
item. These same <i>option</i>-<i>value</i> pairs may be used in
<b>itemconfigure</b> widget commands to change the item's
configuration. Theoretically, a window item becomes the current
item when the mouse pointer is over any part of its bounding box,
but in practice this typically does not happen because the mouse
pointer ceases to be over the canvas at that point. 

<p>The following standard options are supported by window
items:</p>

<pre>
-state
-tags
</pre>

The following extra options are supported for window items: 

<dl class="window items">
<dt><a name="M160"><b>-anchor</b> <i>anchorPos</i></a></dt>

<dd><i>AnchorPos</i> tells how to position the window relative to
the positioning point for the item; it may have any of the forms
accepted by <b><a href=
"../TkLib/GetAnchor.htm">Tk_GetAnchor</a></b>. For example, if
<i>anchorPos</i> is <b>center</b> then the window is centered on
the point; if <i>anchorPos</i> is <b>n</b> then the window will be
drawn so that its top center point is at the positioning point.
This option defaults to <b>center</b>.</dd>

<dt><a name="M161"><b>-height</b> <i>pixels</i></a></dt>

<dd>Specifies the height to assign to the item's window.
<i>Pixels</i> may have any of the forms described in the
<b>COORDINATES</b> section above. If this option is not specified,
or if it is specified as zero, then the window is given whatever
height it requests internally.</dd>

<dt><a name="M162"><b>-width</b> <i>pixels</i></a></dt>

<dd>Specifies the width to assign to the item's window.
<i>Pixels</i> may have any of the forms described in the
<b>COORDINATES</b> section above. If this option is not specified,
or if it is specified as zero, then the window is given whatever
width it requests internally.</dd>

<dt><a name="M163"><b>-window</b> <i>pathName</i></a></dt>

<dd>Specifies the window to associate with this item. The window
specified by <i>pathName</i> must either be a child of the canvas
widget or a child of some ancestor of the canvas widget.
<i>PathName</i> may not refer to a top-level window.</dd>
</dl>

<p>Note: due to restrictions in the ways that windows are managed,
it is not possible to draw other graphical items (such as lines and
images) on top of window items. A window item always obscures any
graphics that overlap it, regardless of their order in the display
list. Also note that window items, unlike other canvas items, are
not clipped for display by their containing canvas's border, and
are instead clipped by the parent widget of the window specified by
the <b>-window</b> option; when the parent widget is the canvas,
this means that the window item can overlap the canvas's
border.</p>

<h3><a name="M164">APPLICATION-DEFINED ITEM TYPES</a></h3>

It is possible for individual applications to define new item types
for canvas widgets using C code. See the documentation for <b><a
href="../TkLib/CrtItemType.htm">Tk_CreateItemType</a></b>. 

<h3><a name="M165">BINDINGS</a></h3>

In the current implementation, new canvases are not given any
default behavior: you will have to execute explicit Tcl commands to
give the canvas its behavior. 

<h3><a name="M166">CREDITS</a></h3>

Tk's canvas widget is a blatant ripoff of ideas from Joel
Bartlett's <i>ezd</i> program. <i>Ezd</i> provides structured
graphics in a Scheme environment and preceded canvases by a year or
two. Its simple mechanisms for placing and animating graphical
objects inspired the functions of canvases. 

<h3><a name="M167">SEE ALSO</a></h3>

<b><a href="../TkCmd/bind.htm">bind</a></b>, <b><a href=
"../TkCmd/font.htm">font</a></b>, <b>image</b>, <b><a href=
"../TkCmd/scrollbar.htm">scrollbar</a></b> 

<h3><a name="M168">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#canvas">canvas</a>, <a href=
"../Keywords/W.htm#widget">widget</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1992-1994 The Regents of the University of
California. Copyright &copy; 1994-1996 Sun Microsystems, Inc.
Copyright &copy; 1997-1999 Scriptics Corporation.</div>
</body>
</html>

