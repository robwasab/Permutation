<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - expr manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> expr</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="expr.htm#M2" name="L381">NAME</a> 

<dl>
<dd>expr - Evaluate an expression</dd>
</dl>
</dd>

<dd><a href="expr.htm#M3" name="L382">SYNOPSIS</a> 

<dl>
<dd><b>expr</b> <i>arg</i> ?<i>arg arg ...</i>?</dd>
</dl>
</dd>

<dd><a href="expr.htm#M4" name="L383">DESCRIPTION</a></dd>

<dd><a href="expr.htm#M5" name="L384">OPERANDS</a></dd>

<dd><a href="expr.htm#M6" name="L385">OPERATORS</a> 

<dl class="operators">
<dd><a href="expr.htm#M7" name="L386"><b>- + ~ !</b></a></dd>

<dd><a href="expr.htm#M8" name="L387"><b>**</b></a></dd>

<dd><a href="expr.htm#M9" name="L388"><b>* / %</b></a></dd>

<dd><a href="expr.htm#M10" name="L389"><b>+ -</b></a></dd>

<dd><a href="expr.htm#M11" name="L390"><b>&lt;&lt;
&gt;&gt;</b></a></dd>

<dd><a href="expr.htm#M12" name="L391"><b>&lt; &gt; &lt;=
&gt;=</b></a></dd>

<dd><a href="expr.htm#M13" name="L392"><b>== !=</b></a></dd>

<dd><a href="expr.htm#M14" name="L393"><b>eq ne</b></a></dd>

<dd><a href="expr.htm#M15" name="L394"><b>in ni</b></a></dd>

<dd><a href="expr.htm#M16" name="L395"><b>&amp;</b></a></dd>

<dd><a href="expr.htm#M17" name="L396"><b>^</b></a></dd>

<dd><a href="expr.htm#M18" name="L397"><b>|</b></a></dd>

<dd><a href="expr.htm#M19" name="L398"><b>&amp;&amp;</b></a></dd>

<dd><a href="expr.htm#M20" name="L399"><b>||</b></a></dd>

<dd><a href="expr.htm#M21" name=
"L400"><i>x</i><b>?</b><i>y</i><b>:</b><i>z</i></a></dd>
</dl>
</dd>

<dd><a href="expr.htm#M22" name="L401">MATH FUNCTIONS</a></dd>

<dd><a href="expr.htm#M23" name="L402">TYPES, OVERFLOW, AND
PRECISION</a></dd>

<dd><a href="expr.htm#M24" name="L403">STRING OPERATIONS</a></dd>

<dd><a href="expr.htm#M25" name="L404">PERFORMANCE
CONSIDERATIONS</a></dd>

<dd><a href="expr.htm#M26" name="L405">EXAMPLES</a></dd>

<dd><a href="expr.htm#M27" name="L406">SEE ALSO</a></dd>

<dd><a href="expr.htm#M28" name="L407">KEYWORDS</a></dd>

<dd><a href="expr.htm#M29" name="L408">COPYRIGHT</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

expr - Evaluate an expression 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>expr</b> <i>arg</i> ?<i>arg arg ...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

Concatenates <i>arg</i>s (adding separator spaces between them),
evaluates the result as a Tcl expression, and returns the value.
The operators permitted in Tcl expressions include a subset of the
operators permitted in C expressions. For those operators common to
both Tcl and C, Tcl applies the same meaning and precedence as the
corresponding C operators. Expressions almost always yield numeric
results (integer or floating-point values). For example, the
expression 

<pre>
<b>expr 8.2 + 6</b>
</pre>

evaluates to 14.2. Tcl expressions differ from C expressions in the
way that operands are specified. Also, Tcl expressions support
non-numeric operands and string comparisons, as well as some
additional operators not found in C. 

<h4><a name="M5">OPERANDS</a></h4>

A Tcl expression consists of a combination of operands, operators,
and parentheses. White space may be used between the operands and
operators and parentheses; it is ignored by the expression's
instructions. Where possible, operands are interpreted as integer
values. Integer values may be specified in decimal (the normal
case), in binary (if the first two characters of the operand are
<b>0b</b>), in octal (if the first two characters of the operand
are <b>0o</b>), or in hexadecimal (if the first two characters of
the operand are <b>0x</b>). For compatibility with older Tcl
releases, an octal integer value is also indicated simply when the
first character of the operand is <b>0</b>, whether or not the
second character is also <b>o</b>. If an operand does not have one
of the integer formats given above, then it is treated as a
floating-point number if that is possible. Floating-point numbers
may be specified in any of several common formats making use of the
decimal digits, the decimal point <b>.</b>, the characters <b>e</b>
or <b>E</b> indicating scientific notation, and the sign characters
<b>+</b> or <b>-</b>. For example, all of the following are valid
floating-point numbers: 2.1, 3., 6e4, 7.91e+16. Also recognized as
floating point values are the strings <b>Inf</b> and <b>NaN</b>
making use of any case for each character. If no numeric
interpretation is possible (note that all literal operands that are
not numeric or boolean must be quoted with either braces or with
double quotes), then an operand is left as a string (and only a
limited set of operators may be applied to it). 

<p>Operands may be specified in any of the following ways:</p>

<dl class="operands">
<dt>[1]</dt>

<dd>As a numeric value, either integer or floating-point.</dd>

<dt>[2]</dt>

<dd>As a boolean value, using any form understood by <b>string is
boolean</b>.</dd>

<dt>[3]</dt>

<dd>As a Tcl variable, using standard <b>$</b> notation. The
variable's value will be used as the operand.</dd>

<dt>[4]</dt>

<dd>As a string enclosed in double-quotes. The expression parser
will perform backslash, variable, and command substitutions on the
information between the quotes, and use the resulting value as the
operand</dd>

<dt>[5]</dt>

<dd>As a string enclosed in braces. The characters between the open
brace and matching close brace will be used as the operand without
any substitutions.</dd>

<dt>[6]</dt>

<dd>As a Tcl command enclosed in brackets. The command will be
executed and its result will be used as the operand.</dd>

<dt>[7]</dt>

<dd>As a mathematical function whose arguments have any of the
above forms for operands, such as <b>sin($x)</b>. See <b>MATH
FUNCTIONS</b> below for a discussion of how mathematical functions
are handled.</dd>
</dl>

<p>Where the above substitutions occur (e.g. inside quoted
strings), they are performed by the expression's instructions.
However, the command parser may already have performed one round of
substitution before the expression processor was called. As
discussed below, it is usually best to enclose expressions in
braces to prevent the command parser from performing substitutions
on the contents.</p>

<p>For some examples of simple expressions, suppose the variable
<b>a</b> has the value 3 and the variable <b>b</b> has the value 6.
Then the command on the left side of each of the lines below will
produce the value on the right side of the line:</p>

<pre>
<b>expr</b> 3.1 + $a   <i>6.1</i>
<b>expr</b> 2 + "$a.$b"   <i>5.6</i>
<b>expr</b> 4*[llength "6 2"] <i>8</i>
<b>expr</b> {{word one} &lt; "word $a"}   <i>0</i>
</pre>

<h4><a name="M6">OPERATORS</a></h4>

The valid operators (most of which are also available as commands
in the <b>tcl::mathop</b> namespace; see the <b><a href=
"../TclCmd/mathop.htm">mathop</a></b>(n) manual page for details)
are listed below, grouped in decreasing order of precedence: 

<dl class="operators">
<dt><a name="M7"><b>- + ~ !</b></a></dt>

<dd>Unary minus, unary plus, bit-wise NOT, logical NOT. None of
these operators may be applied to string operands, and bit-wise NOT
may be applied only to integers.</dd>

<dt><a name="M8"><b>**</b></a></dt>

<dd>Exponentiation. Valid for any numeric operands.</dd>

<dt><a name="M9"><b>* / %</b></a></dt>

<dd>Multiply, divide, remainder. None of these operators may be
applied to string operands, and remainder may be applied only to
integers. The remainder will always have the same sign as the
divisor and an absolute value smaller than the absolute value of
the divisor. 

<p>When applied to integers, the division and remainder operators
can be considered to partition the number line into a sequence of
equal-sized adjacent non-overlapping pieces where each piece is the
size of the divisor; the division result identifies which piece the
divisor lay within, and the remainder result identifies where
within that piece the divisor lay. A consequence of this is that
the result of &ldquo;-57 <b>/</b> 10&rdquo; is always -6, and the
result of &ldquo;-57 <b>%</b> 10&rdquo; is always 3.</p>
</dd>

<dt><a name="M10"><b>+ -</b></a></dt>

<dd>Add and subtract. Valid for any numeric operands.</dd>

<dt><a name="M11"><b>&lt;&lt; &gt;&gt;</b></a></dt>

<dd>Left and right shift. Valid for integer operands only. A right
shift always propagates the sign bit.</dd>

<dt><a name="M12"><b>&lt; &gt; &lt;= &gt;=</b></a></dt>

<dd>Boolean less, greater, less than or equal, and greater than or
equal. Each operator produces 1 if the condition is true, 0
otherwise. These operators may be applied to strings as well as
numeric operands, in which case string comparison is used.</dd>

<dt><a name="M13"><b>== !=</b></a></dt>

<dd>Boolean equal and not equal. Each operator produces a zero/one
result. Valid for all operand types.</dd>

<dt><a name="M14"><b>eq ne</b></a></dt>

<dd>Boolean string equal and string not equal. Each operator
produces a zero/one result. The operand types are interpreted only
as strings.</dd>

<dt><a name="M15"><b>in ni</b></a></dt>

<dd>List containment and negated list containment. Each operator
produces a zero/one result and treats its first argument as a
string and its second argument as a Tcl list. The <b>in</b>
operator indicates whether the first argument is a member of the
second argument list; the <b>ni</b> operator inverts the sense of
the result.</dd>

<dt><a name="M16"><b>&amp;</b></a></dt>

<dd>Bit-wise AND. Valid for integer operands only.</dd>

<dt><a name="M17"><b>^</b></a></dt>

<dd>Bit-wise exclusive OR. Valid for integer operands only.</dd>

<dt><a name="M18"><b>|</b></a></dt>

<dd>Bit-wise OR. Valid for integer operands only.</dd>

<dt><a name="M19"><b>&amp;&amp;</b></a></dt>

<dd>Logical AND. Produces a 1 result if both operands are non-zero,
0 otherwise. Valid for boolean and numeric (integers or
floating-point) operands only.</dd>

<dt><a name="M20"><b>||</b></a></dt>

<dd>Logical OR. Produces a 0 result if both operands are zero, 1
otherwise. Valid for boolean and numeric (integers or
floating-point) operands only.</dd>

<dt><a name="M21"><i>x</i><b>?</b><i>y</i><b>:</b><i>z</i></a></dt>

<dd>If-then-else, as in C. If <i>x</i> evaluates to non-zero, then
the result is the value of <i>y</i>. Otherwise the result is the
value of <i>z</i>. The <i>x</i> operand must have a boolean or
numeric value.</dd>
</dl>

<p>See the C manual for more details on the results produced by
each operator. The exponentiation operator promotes types like the
multiply and divide operators, and produces a result that is the
same as the output of the <b>pow</b> function (after any type
conversions.) All of the binary operators group left-to-right
within the same precedence level. For example, the command</p>

<pre>
<b>expr</b> {4*2 &lt; 7}
</pre>

returns 0. 

<p>The <b>&amp;&amp;</b>, <b>||</b>, and <b>?:</b> operators have
&ldquo;lazy evaluation&rdquo;, just as in C, which means that
operands are not evaluated if they are not needed to determine the
outcome. For example, in the command</p>

<pre>
<b>expr {$v ? [a] : [b]}</b>
</pre>

only one of &ldquo;<b>[a]</b>&rdquo; or &ldquo;<b>[b]</b>&rdquo;
will actually be evaluated, depending on the value of <b>$v</b>.
Note, however, that this is only true if the entire expression is
enclosed in braces; otherwise the Tcl parser will evaluate both
&ldquo;<b>[a]</b>&rdquo; and &ldquo;<b>[b]</b>&rdquo; before
invoking the <b>expr</b> command. 

<h4><a name="M22">MATH FUNCTIONS</a></h4>

When the expression parser encounters a mathematical function such
as <b>sin($x)</b>, it replaces it with a call to an ordinary Tcl
function in the <b>tcl::mathfunc</b> namespace. The processing of
an expression such as: 

<pre>
<b>expr {sin($x+$y)}</b>
</pre>

is the same in every way as the processing of: 

<pre>
<b>expr {[tcl::mathfunc::sin [expr {$x+$y}]]}</b>
</pre>

which in turn is the same as the processing of: 

<pre>
<b>tcl::mathfunc::sin [expr {$x+$y}]</b>
</pre>

<p>The executor will search for <b>tcl::mathfunc::sin</b> using the
usual rules for resolving functions in namespaces. Either
<b>::tcl::mathfunc::sin</b> or <b>[namespace
current]::tcl::mathfunc::sin</b> will satisfy the request, and
others may as well (depending on the current <b>namespace path</b>
setting).</p>

<p>See the <b><a href="../TclCmd/mathfunc.htm">mathfunc</a></b>(n)
manual page for the math functions that are available by
default.</p>

<h4><a name="M23">TYPES, OVERFLOW, AND PRECISION</a></h4>

All internal computations involving integers are done calling on
the LibTomMath multiple precision integer library as required so
that all integer calculations are performed exactly. Note that in
Tcl releases prior to 8.5, integer calculations were performed with
one of the C types <i>long int</i> or <i>Tcl_WideInt</i>, causing
implicit range truncation in those calculations where values
overflowed the range of those types. Any code that relied on these
implicit truncations will need to explicitly add <b>int()</b> or
<b>wide()</b> function calls to expressions at the points where
such truncation is required to take place. 

<p>All internal computations involving floating-point are done with
the C type <i>double</i>. When converting a string to
floating-point, exponent overflow is detected and results in the
<i>double</i> value of <b>Inf</b> or <b>-Inf</b> as appropriate.
Floating-point overflow and underflow are detected to the degree
supported by the hardware, which is generally pretty reliable.</p>

<p>Conversion among internal representations for integer,
floating-point, and string operands is done automatically as
needed. For arithmetic computations, integers are used until some
floating-point number is introduced, after which floating-point is
used. For example,</p>

<pre>
<b>expr</b> {5 / 4}
</pre>

returns 1, while 

<pre>
<b>expr</b> {5 / 4.0}
<b>expr</b> {5 / ( [string length "abcd"] + 0.0 )}
</pre>

both return 1.25. Floating-point values are always returned with a
&ldquo;<b>.</b>&rdquo; or an &ldquo;<b>e</b>&rdquo; so that they
will not look like integer values. For example, 

<pre>
<b>expr</b> {20.0/5.0}
</pre>

returns <b>4.0</b>, not <b>4</b>. 

<h4><a name="M24">STRING OPERATIONS</a></h4>

String values may be used as operands of the comparison operators,
although the expression evaluator tries to do comparisons as
integer or floating-point when it can, i.e., when all arguments to
the operator allow numeric interpretations, except in the case of
the <b>eq</b> and <b>ne</b> operators. If one of the operands of a
comparison is a string and the other has a numeric value, a
canonical string representation of the numeric operand value is
generated to compare with the string operand. Canonical string
representation for integer values is a decimal string format.
Canonical string representation for floating-point values is that
produced by the <b>%g</b> format specifier of Tcl's <b><a href=
"../TclCmd/format.htm">format</a></b> command. For example, the
commands 

<pre>
<b>expr {"0x03" &gt; "2"}</b>
<b>expr {"0y" &gt; "0x12"}</b>
</pre>

both return 1. The first comparison is done using integer
comparison, and the second is done using string comparison. Because
of Tcl's tendency to treat values as numbers whenever possible, it
is not generally a good idea to use operators like <b>==</b> when
you really want string comparison and the values of the operands
could be arbitrary; it is better in these cases to use the
<b>eq</b> or <b>ne</b> operators, or the <b><a href=
"../TclCmd/string.htm">string</a></b> command instead. 

<h3><a name="M25">PERFORMANCE CONSIDERATIONS</a></h3>

Enclose expressions in braces for the best speed and the smallest
storage requirements. This allows the Tcl bytecode compiler to
generate the best code. 

<p>As mentioned above, expressions are substituted twice: once by
the Tcl parser and once by the <b>expr</b> command. For example,
the commands</p>

<pre>
<b>set a 3</b>
<b>set b {$a + 2}</b>
<b>expr $b*4</b>
</pre>

return 11, not a multiple of 4. This is because the Tcl parser will
first substitute <b>$a + 2</b> for the variable <b>b</b>, then the
<b>expr</b> command will evaluate the expression <b>$a + 2*4</b>. 

<p>Most expressions do not require a second round of substitutions.
Either they are enclosed in braces or, if not, their variable and
command substitutions yield numbers or strings that do not
themselves require substitutions. However, because a few unbraced
expressions need two rounds of substitutions, the bytecode compiler
must emit additional instructions to handle this situation. The
most expensive code is required for unbraced expressions that
contain command substitutions. These expressions must be
implemented by generating new code each time the expression is
executed. When the expression is unbraced to allow the substitution
of a function or operator, consider using the commands documented
in the <b><a href="../TclCmd/mathfunc.htm">mathfunc</a></b>(n) or
<b><a href="../TclCmd/mathop.htm">mathop</a></b>(n) manual pages
directly instead.</p>

<h3><a name="M26">EXAMPLES</a></h3>

Define a procedure that computes an &ldquo;interesting&rdquo;
mathematical function: 

<pre>
proc tcl::mathfunc::calc {x y} {
    <b>expr</b> { ($x**2 - $y**2) / exp($x**2 + $y**2) }
}
</pre>

<p>Convert polar coordinates into cartesian coordinates:</p>

<pre>
# convert from ($radius,$angle)
set x [<b>expr</b> { $radius * cos($angle) }]
set y [<b>expr</b> { $radius * sin($angle) }]
</pre>

<p>Convert cartesian coordinates into polar coordinates:</p>

<pre>
# convert from ($x,$y)
set radius [<b>expr</b> { hypot($y, $x) }]
set angle  [<b>expr</b> { atan2($y, $x) }]
</pre>

<p>Print a message describing the relationship of two string values
to each other:</p>

<pre>
puts "a and b are [<b>expr</b> {$a eq $b ? {equal} : {different}}]"
</pre>

<p>Set a variable to whether an environment variable is both
defined at all and also set to a true boolean value:</p>

<pre>
set isTrue [<b>expr</b> {
    [info exists ::env(SOME_ENV_VAR)] &amp;&amp;
    [string is true -strict $::env(SOME_ENV_VAR)]
}]
</pre>

<p>Generate a random integer in the range 0..99 inclusive:</p>

<pre>
set randNum [<b>expr</b> { int(100 * rand()) }]
</pre>

<h3><a name="M27">SEE ALSO</a></h3>

<b><a href="../TclCmd/array.htm">array</a></b>, <b><a href=
"../TclCmd/for.htm">for</a></b>, <b><a href=
"../TclCmd/if.htm">if</a></b>, <b><a href=
"../TclCmd/mathfunc.htm">mathfunc</a></b>, <b><a href=
"../TclCmd/mathop.htm">mathop</a></b>, <b><a href=
"../TclCmd/namespace.htm">namespace</a></b>, <b><a href=
"../TclCmd/proc.htm">proc</a></b>, <b><a href=
"../TclCmd/string.htm">string</a></b>, <b><a href=
"../TclCmd/Tcl.htm">Tcl</a></b>, <b><a href=
"../TclCmd/while.htm">while</a></b> 

<h3><a name="M28">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#arithmetic">arithmetic</a>, <a href=
"../Keywords/B.htm#boolean">boolean</a>, <a href=
"../Keywords/C.htm#compare">compare</a>, <a href=
"../Keywords/E.htm#expression">expression</a>, <a href=
"../Keywords/F.htm#fuzzy comparison">fuzzy comparison</a> 

<h3><a name="M29">COPYRIGHT</a></h3>

Copyright (c) 1993 The Regents of the University of California.<br>
Copyright (c) 1994-2000 Sun Microsystems Incorporated.<br>
Copyright (c) 2005 by Kevin B. Kenny &lt;kennykb@acm.org&gt;. All
rights reserved.<br>
<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-2000 Sun Microsystems, Inc. Copyright &copy;
2005 by Kevin B. Kenny &lt;kennykb(at)acm.org&gt;. All rights
reserved</div>
</body>
</html>

