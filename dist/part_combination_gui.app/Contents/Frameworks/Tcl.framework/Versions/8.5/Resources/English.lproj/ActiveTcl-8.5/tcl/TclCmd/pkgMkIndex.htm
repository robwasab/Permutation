<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - pkg_mkIndex manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> pkgMkIndex</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="pkgMkIndex.htm#M2" name="L1180">NAME</a> 

<dl>
<dd>pkg_mkIndex - Build an index for automatic loading of
packages</dd>
</dl>
</dd>

<dd><a href="pkgMkIndex.htm#M3" name="L1181">SYNOPSIS</a> 

<dl>
<dd><b>pkg_mkIndex ?</b><i>-direct</i>? ?<i>-lazy</i>? ?<i>-load
pkgPat</i>? ?<i>-verbose</i>? <i>dir</i> ?<i>pattern pattern
...</i>?</dd>
</dl>
</dd>

<dd><a href="pkgMkIndex.htm#M4" name="L1182">DESCRIPTION</a></dd>

<dd><a href="pkgMkIndex.htm#M5" name="L1183">OPTIONS</a> 

<dl class="options">
<dd><a href="pkgMkIndex.htm#M6" name=
"L1184"><b>-direct</b></a></dd>

<dd><a href="pkgMkIndex.htm#M7" name="L1185"><b>-lazy</b></a></dd>

<dd><a href="pkgMkIndex.htm#M8" name="L1186"><b>-load</b>
<i>pkgPat</i></a></dd>

<dd><a href="pkgMkIndex.htm#M9" name=
"L1187"><b>-verbose</b></a></dd>

<dd><a href="pkgMkIndex.htm#M10" name="L1188"><b>--</b></a></dd>
</dl>
</dd>

<dd><a href="pkgMkIndex.htm#M11" name="L1189">PACKAGES AND THE
AUTO-LOADER</a></dd>

<dd><a href="pkgMkIndex.htm#M12" name="L1190">HOW IT WORKS</a></dd>

<dd><a href="pkgMkIndex.htm#M13" name="L1191">DIRECT
LOADING</a></dd>

<dd><a href="pkgMkIndex.htm#M14" name="L1192">COMPLEX
CASES</a></dd>

<dd><a href="pkgMkIndex.htm#M15" name="L1193">SEE ALSO</a></dd>

<dd><a href="pkgMkIndex.htm#M16" name="L1194">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

pkg_mkIndex - Build an index for automatic loading of packages 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>pkg_mkIndex ?</b><i>-direct</i>? ?<i>-lazy</i>? ?<i>-load
pkgPat</i>? ?<i>-verbose</i>? <i>dir</i> ?<i>pattern pattern
...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

<b>Pkg_mkIndex</b> is a utility procedure that is part of the
standard Tcl library. It is used to create index files that allow
packages to be loaded automatically when <b>package require</b>
commands are executed. To use <b>pkg_mkIndex</b>, follow these
steps: 

<dl class="description">
<dt>[1]</dt>

<dd>Create the package(s). Each package may consist of one or more
Tcl script files or binary files. Binary files must be suitable for
loading with the <b><a href="../TclCmd/load.htm">load</a></b>
command with a single argument; for example, if the file is
<b>test.so</b> it must be possible to load this file with the
command <b>load test.so</b>. Each script file must contain a
<b>package provide</b> command to declare the package and version
number, and each binary file must contain a call to <b><a href=
"../TclLib/PkgRequire.htm">Tcl_PkgProvide</a></b>.</dd>

<dt>[2]</dt>

<dd>Create the index by invoking <b>pkg_mkIndex</b>. The <i>dir</i>
argument gives the name of a directory and each <i>pattern</i>
argument is a <b><a href="../TclCmd/glob.htm">glob</a></b>-style
pattern that selects script or binary files in <i>dir</i>. The
default pattern is <b>*.tcl</b> and <b>*.[info
sharedlibextension]</b>. 

<p><b>Pkg_mkIndex</b> will create a file <b>pkgIndex.tcl</b> in
<i>dir</i> with package information about all the files given by
the <i>pattern</i> arguments. It does this by loading each file
into a slave interpreter and seeing what packages and new commands
appear (this is why it is essential to have <b>package provide</b>
commands or <b><a href=
"../TclLib/PkgRequire.htm">Tcl_PkgProvide</a></b> calls in the
files, as described above). If you have a package split among
scripts and binary files, or if you have dependencies among files,
you may have to use the <b>-load</b> option or adjust the order in
which <b>pkg_mkIndex</b> processes the files. See <b>COMPLEX
CASES</b> below.</p>
</dd>

<dt>[3]</dt>

<dd>Install the package as a subdirectory of one of the directories
given by the <b>tcl_pkgPath</b> variable. If <b>$tcl_pkgPath</b>
contains more than one directory, machine-dependent packages (e.g.,
those that contain binary shared libraries) should normally be
installed under the first directory and machine-independent
packages (e.g., those that contain only Tcl scripts) should be
installed under the second directory. The subdirectory should
include the package's script and/or binary files as well as the
<b>pkgIndex.tcl</b> file. As long as the package is installed as a
subdirectory of a directory in <b>$tcl_pkgPath</b> it will
automatically be found during <b>package require</b> commands. 

<p>If you install the package anywhere else, then you must ensure
that the directory containing the package is in the
<b>auto_path</b> global variable or an immediate subdirectory of
one of the directories in <b>auto_path</b>. <b>Auto_path</b>
contains a list of directories that are searched by both the
auto-loader and the package loader; by default it includes
<b>$tcl_pkgPath</b>. The package loader also checks all of the
subdirectories of the directories in <b>auto_path</b>. You can add
a directory to <b>auto_path</b> explicitly in your application, or
you can add the directory to your <b>TCLLIBPATH</b> environment
variable: if this environment variable is present, Tcl initializes
<b>auto_path</b> from it during application startup.</p>
</dd>

<dt>[4]</dt>

<dd>Once the above steps have been taken, all you need to do to use
a package is to invoke <b>package require</b>. For example, if
versions 2.1, 2.3, and 3.1 of package <b>Test</b> have been indexed
by <b>pkg_mkIndex</b>, the command <b>package require Test</b> will
make version 3.1 available and the command <b>package require
-exact Test 2.1</b> will make version 2.1 available. There may be
many versions of a package in the various index files in
<b>auto_path</b>, but only one will actually be loaded in a given
interpreter, based on the first call to <b>package require</b>.
Different versions of a package may be loaded in different
interpreters.</dd>
</dl>

<h3><a name="M5">OPTIONS</a></h3>

The optional switches are: 

<dl class="options">
<dt><a name="M6"><b>-direct</b></a></dt>

<dd>The generated index will implement direct loading of the
package upon <b>package require</b>. This is the default.</dd>

<dt><a name="M7"><b>-lazy</b></a></dt>

<dd>The generated index will manage to delay loading the package
until the use of one of the commands provided by the package,
instead of loading it immediately upon <b>package require</b>. This
is not compatible with the use of <i>auto_reset</i>, and therefore
its use is discouraged.</dd>

<dt><a name="M8"><b>-load</b> <i>pkgPat</i></a></dt>

<dd>The index process will pre-load any packages that exist in the
current interpreter and match <i>pkgPat</i> into the slave
interpreter used to generate the index. The pattern match uses
string match rules, but without making case distinctions. See
COMPLEX CASES below.</dd>

<dt><a name="M9"><b>-verbose</b></a></dt>

<dd>Generate output during the indexing process. Output is via the
<b>tclLog</b> procedure, which by default prints to stderr.</dd>

<dt><a name="M10"><b>--</b></a></dt>

<dd>End of the flags, in case <i>dir</i> begins with a dash.</dd>
</dl>

<h3><a name="M11">PACKAGES AND THE AUTO-LOADER</a></h3>

The package management facilities overlap somewhat with the
auto-loader, in that both arrange for files to be loaded on-demand.
However, package management is a higher-level mechanism that uses
the auto-loader for the last step in the loading process. It is
generally better to index a package with <b>pkg_mkIndex</b> rather
than <b><a href="../TclCmd/library.htm">auto_mkindex</a></b>
because the package mechanism provides version control: several
versions of a package can be made available in the index files,
with different applications using different versions based on
<b>package require</b> commands. In contrast, <b><a href=
"../TclCmd/library.htm">auto_mkindex</a></b> does not understand
versions so it can only handle a single version of each package. It
is probably not a good idea to index a given package with both
<b>pkg_mkIndex</b> and <b><a href=
"../TclCmd/library.htm">auto_mkindex</a></b>. If you use
<b>pkg_mkIndex</b> to index a package, its commands cannot be
invoked until <b>package require</b> has been used to select a
version; in contrast, packages indexed with <b><a href=
"../TclCmd/library.htm">auto_mkindex</a></b> can be used
immediately since there is no version control. 

<h3><a name="M12">HOW IT WORKS</a></h3>

<b>Pkg_mkIndex</b> depends on the <b>package unknown</b> command,
the <b>package ifneeded</b> command, and the auto-loader. The first
time a <b>package require</b> command is invoked, the <b>package
unknown</b> script is invoked. This is set by Tcl initialization to
a script that evaluates all of the <b>pkgIndex.tcl</b> files in the
<b>auto_path</b>. The <b>pkgIndex.tcl</b> files contain <b>package
ifneeded</b> commands for each version of each available package;
these commands invoke <b>package provide</b> commands to announce
the availability of the package, and they setup auto-loader
information to load the files of the package. If the <i>-lazy</i>
flag was provided when the <b>pkgIndex.tcl</b> was generated, a
given file of a given version of a given package is not actually
loaded until the first time one of its commands is invoked. Thus,
after invoking <b>package require</b> you may not see the package's
commands in the interpreter, but you will be able to invoke the
commands and they will be auto-loaded. 

<h3><a name="M13">DIRECT LOADING</a></h3>

Some packages, for instance packages which use namespaces and
export commands or those which require special initialization,
might select that their package files be loaded immediately upon
<b>package require</b> instead of delaying the actual loading to
the first use of one of the package's command. This is the default
mode when generating the package index. It can be overridden by
specifying the <i>-lazy</i> argument. 

<h3><a name="M14">COMPLEX CASES</a></h3>

Most complex cases of dependencies among scripts and binary files,
and packages being split among scripts and binary files are handled
OK. However, you may have to adjust the order in which files are
processed by <b>pkg_mkIndex</b>. These issues are described in
detail below. 

<p>If each script or file contains one package, and packages are
only contained in one file, then things are easy. You simply
specify all files to be indexed in any order with some glob
patterns.</p>

<p>In general, it is OK for scripts to have dependencies on other
packages. If scripts contain <b>package require</b> commands, these
are stubbed out in the interpreter used to process the scripts, so
these do not cause problems. If scripts call into other packages in
global code, these calls are handled by a stub <b><a href=
"../TclCmd/unknown.htm">unknown</a></b> command. However, if
scripts make variable references to other package's variables in
global code, these will cause errors. That is also bad coding
style.</p>

<p>If binary files have dependencies on other packages, things can
become tricky because it is not possible to stub out C-level APIs
such as <b><a href=
"../TclLib/PkgRequire.htm">Tcl_PkgRequire</a></b> API when loading
a binary file. For example, suppose the BLT package requires Tk,
and expresses this with a call to <b><a href=
"../TclLib/PkgRequire.htm">Tcl_PkgRequire</a></b> in its
<b>Blt_Init</b> routine. To support this, you must run
<b>pkg_mkIndex</b> in an interpreter that has Tk loaded. You can
achieve this with the <b>-load</b> <i>pkgPat</i> option. If you
specify this option, <b>pkg_mkIndex</b> will load any packages
listed by <b><a href="../TclCmd/info.htm">info loaded</a></b> and
that match <i>pkgPat</i> into the interpreter used to process
files. In most cases this will satisfy the <b><a href=
"../TclLib/PkgRequire.htm">Tcl_PkgRequire</a></b> calls made by
binary files.</p>

<p>If you are indexing two binary files and one depends on the
other, you should specify the one that has dependencies last. This
way the one without dependencies will get loaded and indexed, and
then the package it provides will be available when the second file
is processed. You may also need to load the first package into the
temporary interpreter used to create the index by using the
<b>-load</b> flag; it will not hurt to specify package patterns
that are not yet loaded.</p>

<p>If you have a package that is split across scripts and a binary
file, then you should avoid the <b>-load</b> flag. The problem is
that if you load a package before computing the index it masks any
other files that provide part of the same package. If you must use
<b>-load</b>, then you must specify the scripts first; otherwise
the package loaded from the binary file may mask the package
defined by the scripts.</p>

<h3><a name="M15">SEE ALSO</a></h3>

<b><a href="../TclCmd/package.htm">package</a></b> 

<h3><a name="M16">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#auto-load">auto-load</a>, <a href=
"../Keywords/I.htm#index">index</a>, <a href=
"../Keywords/P.htm#package">package</a>, <a href=
"../Keywords/V.htm#version">version</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1996 Sun Microsystems, Inc.</div>
</body>
</html>

